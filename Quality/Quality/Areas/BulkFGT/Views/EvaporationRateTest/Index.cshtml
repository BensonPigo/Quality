@using DatabaseObject.ViewModel.BulkFGT

@model EvaporationRateTest_ViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Scripts.Render("~/Scripts/Plugins/ChartJS")
@*<link href="~/ThirdParty/SciCustom/css/TableStyle.css" rel="stylesheet" />*@
@*<link href="~/ThirdParty/plugins/jquery-ui/jquery-ui.css" rel="stylesheet" />*@
@{

    int MaxRateListIdx = Model.RateList.Any() ? Model.RateList.Count() - 1 : 0;
    int MaxTimeListIdx = Model.TimeList.Any() ? Model.TimeList.Count() - 1 : 0;
}
<style>
    .SearchDiv {
        width: 100%;
        /*height: 8vh;*/
        /*background-color: pink;*/
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        display: flex;
    }

    .colDiv {
        width: 4.3%;
        padding: 2px;
    }

    .colDiv2 {
        width: 13%;
        padding: 2px;
    }


    .searchTitle {
        color: white;
    }

    .row-name {
        color: gray;
        font-size: 1.2em;
        background-color: wheat;
    }

    .bodyDiv {
        width: 100%;
        overflow-x: scroll;
    }

    .buttonArea, .MainArea, .DetailDataArea {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divDetailType {
        width: 100%;
        /*height:30vh;*/
    }

    .buttonAreaItem {
        width: 9%;
        padding: 2px;
    }

    .buttonAreaItem2 {
        width: 10%;
        padding: 2px;
    }

    .MainAreaItem100 {
        width: 99.6%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .MainAreaItem {
        width: 16.6%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }

    .DetailDataAreaItem1 {
        width: 9%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
    }

    .DetailDataAreaItem2 {
        width: 28%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
    }

    .DetailDataAreaItem1 input, .DetailDataAreaItem1 select {
        width: 100%;
    }

    .DetailDataAreaItem2 input, .DetailDataAreaItem2 select {
        width: 100%;
    }

    .colHead {
        background-color: wheat;
        color: darkslategray;
        font-size: 1rem;
        font-weight: bold;
        text-align: center;
    }

    .MainAreaItemSpan3 {
        width: 37.5%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }

    .MainAreaItemSpan7 {
        width: 87.5%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }


    .odd {
        background-color: white;
    }

    .even {
        background-color: lightgray;
    }

    .actionBtn {
        width: 100%;
    }

    .colTitle {
        /*color: white;*/
    }

    .canUse {
        color: white !important;
        cursor: pointer;
    }


    .textArenDiv {
        height: 5rem;
    }

    textarea {
        padding: 2px;
        width: 100%;
        height: 4.5rem;
    }

    input:-webkit-autofill {
        -webkit-text-fill-color: black;
    }

    h4 {
        font-size: 1rem;
    }

    #dialogProcessMsg {
        display: none;
        position: absolute;
        top: 20%;
        left: 25%;
        height: 100%;
        background-color: lavender;
        border-radius: 5px;
        z-index: 1002;
        width: 50%;
        height: 35vh;
        /*overflow: scroll;*/
    }

    .black_overlay {
        display: none;
        position: absolute;
        top: 0%;
        left: 0%;
        width: 100%;
        height: 100%;
        background-color: black;
        z-index: 1001;
        opacity: .80;
    }

    input, select, a, div {
        font-size: 1rem;
    }

    #tab-ChangeBefore, #tab-ChangeAfter {
        width: 100%;
    }

        #tab-ChangeBefore > ul, #tab-ChangeAfter > ul {
            display: block;
            margin: 0;
            list-style: none;
        }

    .tab-title {
        list-style: none;
    }

    #tab-ChangeBefore > ul > li, #tab-ChangeAfter > ul > li {
        display: inline-block;
        vertical-align: top;
        margin: 0 -1px -1px 0;
        border: 1px solid #BCBCBC;
        height: 4vh;
        line-height: 25px;
        background: #CDCDCD;
        padding: 0 15px;
        list-style: none;
        box-sizing: border-box;
        cursor: pointer;
    }

        #tab-ChangeBefore > ul > li.active, #tab-ChangeAfter > ul > li.active {
            background: #fff;
        }

    #tab-ChangeBefore > .tab-inner, #tab-ChangeAfter > .tab-inner {
        padding: 10px;
        color: #000;
        border: 1px #BCBCBC solid;
        height: 50vh;
        overflow: scroll;
        overflow-x: hidden;
    }

    .tab-inner {
        background-color: rgb(255, 255, 255);
        width: 100%;
        height: auto;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divTabInnerLeft {
        width: 35%;
        height: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divTabInnerBlank {
        width: 5%;
        height: 100%;
    }

    .divTabInnerRight {
        width: 60%;
        height: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divRate {
        width: 100%;
        /*height: 45%;*/
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        border: 1px #BCBCBC solid;
    }

    .divRateInner1 {
        width: 50%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime {
        width: 100%;
        /*height: 70%;*/
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        border: 1px #BCBCBC solid;
    }

    .divTime10 {
        width: 10%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime20 {
        width: 20%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime30 {
        width: 30%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime40 {
        width: 40%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .tab-innerItem1 {
        width: 8%;
        padding: 2px;
        border: 1px solid;
    }

    .tab-innerItem2 {
        width: 43%;
        padding: 2px;
        border: 1px solid;
    }

    .tab-innerItem3 {
        width: 16%;
        padding: 2px;
        border: 1px solid;
    }

    .tab-innerItem4 {
        width: 5%;
        padding: 2px;
        border: 1px solid;
    }


    .tab-innerDetail {
        background-color: rgb(255, 255, 255);
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .tab-innerDetailRow {
        height: 25vh;
    }

    .tableDiv {
        background-color: rgb(255, 255, 255);
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: stretch;
    }

    .tableDiv-innerItem1 {
        width: 100%;
        padding: 2px;
        /*height: 100%;*/
        border: 1px solid;
    }
</style>

<div class="main-content">
    <header class="page-header">
        <h3>
            <i class=""></i><span>Evaporation Rate Test</span>
        </h3>
        <div class="breadcrumb">
            <div>Home</div>
            <div class="current">Evaporation Rate Test</div>
        </div>
    </header>



    @using (Html.BeginForm("Index", ViewContext.RouteData.GetRequiredString("Controller"), FormMethod.Post, new { }))
    {
        <div class="main-area">


            <div class="SearchDiv">
                <!-- #region Row 1-->
                <div class="colDiv">
                    <h4 class="searchTitle">Brand</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.BrandID, new { @value = Model.Request.BrandID, @style = "width:80%" })
                    <input id="btnBrandID" onclick="OpenWindow('BrandID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Season</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.SeasonID, new { @value = Model.Request.SeasonID, @style = "width:80%" })
                    <input id="btnSeasonID" onclick="OpenWindow('SeasonID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Style</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.StyleID, new { @value = Model.Request.StyleID, @style = "width:80%" })
                    <input id="btnStyleID" onclick="OpenWindow('StyleID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Article</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.Article, new { @value = Model.Request.Article, @style = "width:80%" })
                    <input id="btnArticle" onclick="OpenWindow('Article')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <input type="submit" class="site-btn btn-blue actionBtn" name="action:Query" id="btnQuery" value="Query" />
                </div>
                <div class="colDiv">
                    <input type="button" class="site-btn btn-green actionBtn" name="action:New" id="btnNew" value="New" />
                </div>
                <div class="colDiv">
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Report No.</h4>
                </div>
                <div class="colDiv2">
                    @Html.DropDownListFor(o => o.Request.ReportNo, Model.ReportNo_Source, new { @style = "width:100%", onchange = "ReportNoChange(this.value)" })
                </div>
                <!-- #endregion -->

            </div>

            <div class="content-scroll">

                <div class="inner-scroll" style="float:left">

                    <div class="buttonArea">
                        <div class="buttonAreaItem">

                            <h4 id="Edit" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Edit.png" width="30" />
                                Edit
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <input id="SaveSubmit" type="submit" name="Action:EditSave" style="display:none" />
                            <h4 id="Save" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Save.png" width="30" />
                                Save
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Undo" class="toolBarItem" style="margin-right: 1em;">
                                <img src="~/Image/Icon/Undo.png" width="30" />
                                Undo
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <input id="DeleteSubmit" type="submit" name="Action:Delete" style="display:none" />
                            <h4 id="Delete" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Delete.png" width="30" />
                                Delete
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Encode" class="toolBarItem" style="margin-right: 1em;">
                                <img src="~/Image/Icon/Lock.png" width="30" />
                                Encode
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Amend" class="toolBarItem" style="margin-right: 1em;">
                                <img src="~/Image/Icon/Unlock.png" width="30" />
                                Amend
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Excel" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/XLS.png" width="30" />
                                Excel
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="PDF" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/PDF.png" width="30" />
                                PDF
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Picture" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Picture.png" width="30" />
                                Picture
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="SendtoMR" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/SendMail.png" width="30" />
                                Send to MR
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="NewItem" class="toolBarItem">
                                <img src="~/Image/Icon/New.png" width="30" />
                                New Item
                            </h4>
                        </div>
                    </div>

                    @*表頭*@
                    <div class="MainArea">
                        <!-- #region Row 1-->
                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Report No</h4>

                        </div>
                        <div class="MainAreaItem odd">
                            @Html.TextBoxFor(o => o.Main.ReportNo, new { @class = "" })

                            @Html.HiddenFor(o => o.Main.Status)
                            @Html.HiddenFor(o => o.Main.TestBeforePicture)
                            @Html.HiddenFor(o => o.Main.TestAfterPicture)
                        </div>

                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Report Date</h4>

                        </div>
                        <div class="MainAreaItem odd">
                            @Html.TextBoxFor(o => o.Main.ReportDateText, new { @class = "" })
                        </div>

                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Submit Date</h4>
                        </div>
                        <div class="MainAreaItem odd">
                            @Html.HiddenFor(o => o.Main.SubmitDate)
                            @Html.TextBoxFor(o => o.Main.SubmitDateText, new { @class = "CanEdit" })
                        </div>
                        <!-- #endregion -->
                        <!-- #region Row 2-->

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">SP#</h4>
                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.OrderID, new { @class = "even CanEdit" })
                        </div>

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Brand</h4>
                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.BrandID, new { @class = "even" })
                        </div>

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Season</h4>
                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.SeasonID, new { @class = "even" })
                        </div>


                        <!-- #endregion -->
                        <!-- #region Row 3-->

                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Style</h4>
                        </div>
                        <div class="MainAreaItem odd">
                            @Html.TextBoxFor(o => o.Main.StyleID, new { @class = "" })
                        </div>

                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Article</h4>

                        </div>
                        <div class="MainAreaItem odd">
                            <select id="Main_Article" name="Main.Article" class="CanEdit">
                                @foreach (var item in Model.Article_Source)
                                {
                                    string selected = item.Value.Equals(Model.Main.Article) ? "selected" : "";
                                    <option value="@item.Value" @selected>@item.Text</option>
                                }
                            </select>
                        </div>

                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Seq</h4>
                        </div>
                        <div class="MainAreaItem odd">
                            @Html.TextBoxFor(o => o.Main.Seq, new { @class = "odd" })
                            @Html.HiddenFor(o => o.Main.Seq1, new { @class = "" })
                            @Html.HiddenFor(o => o.Main.Seq2, new { @class = "" })

                        </div>

                        <!-- #endregion -->
                        <!-- #region Row 4-->

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Fabric Ref#</h4>

                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.FabricRefNo, new { @class = "even", @onclick = "OpenWindow('FabricRefNo')", @placeholder = "Click" })
                        </div>

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Fabric Color</h4>

                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.FabricColor, new { @class = "even" })

                        </div>

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Fabric Description</h4>
                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.FabricDescription, new { @class = "even CanEdit" })
                        </div>
                        <!-- #endregion -->
                        <!-- #region Row 5-->

                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Before Wash Average Rate</h4>

                        </div>
                        <div class="MainAreaItem odd">
                            @Html.TextBoxFor(o => o.Main.BeforeAverageRate, new { @class = "odd", @DetailType = "MainBefore" })
                        </div>


                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">After Wash Average Rate</h4>

                        </div>
                        <div class="MainAreaItem odd">
                            @Html.TextBoxFor(o => o.Main.AfterAverageRate, new { @class = "odd", @DetailType = "MainAfter" })
                        </div>


                        <div class="MainAreaItem odd">
                            <h4 class="colTitle">Result</h4>

                        </div>
                        <div class="MainAreaItem odd">
                            @{ string mainResultColor = Model.Main.Result == "Pass" ? "blue" : "red";}
                            @Html.TextBoxFor(o => o.Main.Result, new { @class = "", @style = $@"color:{mainResultColor}" })
                        </div>

                        <!-- #endregion -->
                        <!-- #region Row 6-->

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Remark</h4>

                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.Remark, new { @class = "CanEdit even", @style = "width:100%" })
                        </div>

                        <div class="MainAreaItem even">
                            <h4 class="colTitle">Last Upadate</h4>

                        </div>
                        <div class="MainAreaItem even">
                            @Html.TextBoxFor(o => o.Main.LastUpadate, new { @class = "even", @style = "width:100%" })
                        </div>

                        <div class="MainAreaItem even">
                        </div>
                        <div class="MainAreaItem even">
                        </div>

                        <!-- #endregion -->
                    </div>

                    @*表身*@
                    <div class="bodyDiv">

                        <div class="detailDataDiv">
                            <br />
                            <div class="DetailDataArea">
                                <!--#region Head-->
                                <!--#endregion-->


                                @if (Model.DetailList != null && Model.DetailList.Count > 0)
                                {
                                    int DetailListIdx = 0;
                                    int TimeListIdx = 0;
                                    int RateListIdx = 0;
                                    int SpecimenListIdx = 0;
                                    foreach (var detail in Model.DetailList)
                                    {
                                        var specimenList = Model.SpecimenList.Where(o => o.DetailType == detail.Type);
                                        int idxSpecimen = 1;
                                        string tabDivID = $"tab-Change{detail.Type}";
                                        string anotherType = detail.Type == "Before" ? "After" : "Before";

                                        @Html.Hidden($"DetailList[{DetailListIdx}].ReportNo", detail.ReportNo, new { @class = "", @style = "width:100%" })
                                        @Html.Hidden($"DetailList[{DetailListIdx}].Ukey", detail.Ukey, new { @class = "", @style = "width:100%" })
                                        @Html.Hidden($"DetailList[{DetailListIdx}].Type", detail.Type, new { @class = "", @style = "width:100%" })

                                        foreach (var specimen in specimenList)
                                        {
                                            <div class="divSpecimenChart" SpecimenID="@specimen.SpecimenID" DetailType="@specimen.DetailType" style="background-color: wheat; ">
                                                <canvas class="SpecimenChart" SpecimenID="@specimen.SpecimenID" DetailType="@specimen.DetailType"></canvas>
                                            </div>
                                        }
                                        <div class="divDetailType" detailType="@detail.Type">

                                            <div id="@tabDivID">
                                                <ul class="tab-title">
                                                    @foreach (var specimen in specimenList)
                                                    {
                                                        string linkText = $"#tab0{detail.Type}{idxSpecimen}";
                                                        string active = idxSpecimen == 1 ? "active" : string.Empty;
                                                        <li link="@linkText" class="@active">@specimen.SpecimenID</li>
                                                        idxSpecimen++;
                                                    }
                                                </ul>
                                            </div>

                                            @{
                                                int IdxDivID = 1;
                                            }
                                            @foreach (var specimen in specimenList)
                                            {
                                                string specimenID = specimen.SpecimenID;
                                                var timeList = Model.TimeList.Where(o => o.DetailType == detail.Type && o.SpecimenID == specimenID);
                                                var rateList = Model.RateList.Where(o => o.DetailType == detail.Type && o.SpecimenID == specimenID);
                                                string divID = $"tab0{detail.Type}{IdxDivID}";

                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].Ukey", specimen.Ukey, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].SpecimenID", specimen.SpecimenID, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].DetailUkey", specimen.DetailUkey, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].DetailType", specimen.DetailType, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].DetailUkey", specimen.DetailUkey, new { @class = "", @style = "width:100%" })


                                                <div id="@divID" class="tab-inner">

                                                    <div class="divTabInnerLeft">
                                                        <div class="divRate">
                                                            <div class="divRateInner1 colHead" style="background-color:aquamarine">
                                                                @detail.Type Average
                                                            </div>
                                                            <div class="divRateInner1">
                                                                @Html.TextBox($"SpecimenList[{SpecimenListIdx}].RateAverage", specimen.RateAverage, new
                                                                {
                                                                   @class = "RateAverage",
                                                                   @style = "width:100%",
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                               })
                                                            </div>

                                                            <div class="divRateInner1 colHead">
                                                                Rate of time
                                                            </div>
                                                            <div class="divRateInner1 colHead">
                                                                Evaporation Rate
                                                            </div>
                                                            @foreach (var rate in rateList)
                                                            {
                                                                <div class="divRateInner1">
                                                                    @Html.Hidden($"RateList[{RateListIdx}].Ukey", rate.Ukey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].SpecimenUkey", rate.SpecimenUkey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].Subtrahend_Time", rate.Subtrahend_Time, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].Minuend_Time", rate.Minuend_Time, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].Subtrahend_TimeUkey", rate.Subtrahend_TimeUkey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].Minuend_TimeUkey", rate.Minuend_TimeUkey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].DetailType", rate.DetailType, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].SpecimenID", rate.SpecimenID, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"RateList[{RateListIdx}].Ratio", rate.Ratio, new { @class = "", @style = "width:100%" })

                                                                    @Html.TextBox($"RateList[{RateListIdx}].RateName", rate.RateName, new { @class = "", @style = "width:100%" })
                                                                </div>
                                                                <div class="divRateInner1">
                                                                    <input type="hidden" class="detailRateListIdx" name="name" value="@RateListIdx" />
                                                                    @Html.TextBox($"RateList[{RateListIdx}].Value", rate.Value, new
                                                               {
                                                                   @class = "RateValue",
                                                                   @style = "width:100%",
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                                   @Subtrahend_Time = rate.Subtrahend_Time,
                                                                   @Minuend_Time = rate.Minuend_Time,
                                                                   @Ratio = rate.Ratio,
                                                                   @RateListIdx = MaxRateListIdx,
                                                                   @RateName = rate.RateName,
                                                                   @parentTabID = divID,
                                                                   @SpecimenListIdx = SpecimenListIdx
                                                               })
                                                                </div>
                                                                RateListIdx++;
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="divTabInnerBlank">
                                                        <button onclick="GotoType('@anotherType')" type="button" style="margin:0;min-width:0;width:100%;" class="btn btn-blue">
                                                            To
                                                            <br />
                                                            @anotherType
                                                            <br />
                                                            Wash
                                                        </button>
                                                        <hr />

                                                        <button onclick="SpecimenChartToggle('@specimen.DetailType','@specimen.SpecimenID')" type="button" style="margin:0;min-width:0;width:100%;" class="btn btn-blue btnShowChart">
                                                            chart
                                                        </button>
                                                    </div>
                                                    <div class="divTabInnerRight">
                                                        <div class="divTime">
                                                            <div class="divTime10 colHead">
                                                                Time
                                                            </div>
                                                            <div class="divTime10 colHead">
                                                                Mass
                                                            </div>
                                                            <div class="divTime30 colHead">
                                                                Evaporation (g)
                                                            </div>

                                                            <div class="divTime40 colHead">
                                                                Last Update
                                                            </div>
                                                            <div class="divTime10 colHead">
                                                                Delete
                                                            </div>
                                                            @foreach (var time in timeList)
                                                            {
                                                                <div class="divTime10">
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].Ukey", time.Ukey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].SpecimenUkey", time.SpecimenUkey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].Time", time.Time, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].InitialTime", time.InitialTime, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].InitialTimeUkey", time.InitialTimeUkey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].IsInitialMass", time.IsInitialMass, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].DetailType", time.DetailType, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].SpecimenID", time.SpecimenID, new { @class = "", @style = "width:100%" })

                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].Time", time.Time, new { @class = "", @style = "width:100%" })
                                                                </div>
                                                                <div class="divTime10">
                                                                    @*@time.Mass*@
                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].Mass", time.Mass, new
                                                               {
                                                                   @class = "CanEdit Mass",
                                                                   @style = "width:100%",
                                                                   @Time = time.Time,
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                                   @IsInitialMass = time.IsInitialMass,
                                                                   @onchange = "value=MassCheck(value);AutoUpdateTime(this)"

                                                               })
                                                                </div>
                                                                <div class="divTime30">
                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].Evaporation", time.Evaporation, new
                                                                    {
                                                                        @class = "Evaporation",
                                                                        @style = "width:100%",
                                                                        @DetailType = detail.Type,
                                                                        @SpecimenID = specimen.SpecimenID,
                                                                        @InitialTime = time.InitialTime,
                                                                        @Time = time.Time,
                                                                        @TimeListIdx = MaxTimeListIdx,
                                                                        @parentTabID = divID
                                                                    })

                                                                </div>

                                                                <div class="divTime40">
                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].LastUpadate", time.LastUpadate, new { @class = "", @style = "width:100%" })
                                                                    @time.LastUpadate
                                                                </div>
                                                                <div class="divTime10">
                                                                    <input type="hidden" class="detailTimeListIdx" name="name" value="@TimeListIdx" />
                                                                    @if (time.Time > 40)
                                                                    {
                                                                        <img class="detailDelete" src="~/Image/Icon/Delete.png" width="30" style="min-width: 30px" />
                                                                    }

                                                                </div>
                                                                TimeListIdx++;
                                                            }
                                                        </div>
                                                    </div>

                                                </div>
                                                SpecimenListIdx++;
                                                IdxDivID++;
                                            }
                                        </div>
                                        DetailListIdx++;
                                    }

                                }
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    }
</div>




<script type="text/javascript">

    var msg = new MessagerAlert();
    var EditType = "@Model.Main.EditType";
    var EditMode;
    let fcousDetailType = 'Before';
    let fcousSpecimenID = 'Specimen 1';
    let MaxRateListIdx = @MaxRateListIdx;
    let MaxTimeListIdx = @MaxTimeListIdx;


    var DataBeforeSpecimen1 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 1").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 1',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 1").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataBeforeSpecimen2 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 2").Select(o=>o.Time).OrderBy(o=>o).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 2',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 2").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataBeforeSpecimen3 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 3").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 3',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 3").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen1 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 1").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 1',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 1").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen2 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 2").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 2',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 2").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen3 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 3").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 3',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 3").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };

    $(function () {
        EditMode = false;

        IsEditModeChange();
        if (EditType == 'New') {
            EditMode = true;
            $("#SaveSubmit").attr("name", "Action:NewSave");
            IsEditModeChange();
        }
        QueryBind();
        tabChange();
        InitChart();
        GotoType('Before');

        @Html.Raw(Model.ErrorMessage)
    });

    function SpecimenChartToggle(detailType, specimenID) {
        $(`.divSpecimenChart`).hide();
        $(`.divSpecimenChart[DetailType='${detailType}'][SpecimenID='${specimenID}']`).toggle();
    }

    function InitChart() {

        var objBeforeSpecimen1 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 1']")[0].getContext('2d');
        var objBeforeSpecimen2 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 2']")[0].getContext('2d');
        var objBeforeSpecimen3 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 3']")[0].getContext('2d');
        var objAfterSpecimen1 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 1']")[0].getContext('2d');
        var objAfterSpecimen2 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 2']")[0].getContext('2d');
        var objAfterSpecimen3 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 3']")[0].getContext('2d');


        $.myBar = new Chart(objBeforeSpecimen1, {
            type: 'line',
            data: DataBeforeSpecimen1,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        position: 'left',
                    },
                    title: {
                        display: false,
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {

                            beginAtZero: true,
                            //fontSize: 20,
                            stepSize: 20,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: "Evaporation(g)",
                            //fontSize: 25
                        }
                    }],
                    xAxes: [
                        {
                            ticks: {
                                //fontSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Time(min)",
                                //fontSize: 25
                            }
                        }
                    ]
                },
            },
        });
        $.myBar = new Chart(objBeforeSpecimen2, {
            type: 'line',
            data: DataBeforeSpecimen2,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top',
                    },
                    title: {
                        display: false,
                        text: 'Chart.js Line Chart'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {

                            beginAtZero: true,
                            //fontSize: 20,
                            stepSize: 20,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: "Evaporation(g)",
                            //fontSize: 25
                        }
                    }],
                    xAxes: [
                        {
                            ticks: {
                                //fontSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Time(min)",
                                //fontSize: 25
                            }
                        }
                    ]
                },
            },
        });
        $.myBar = new Chart(objBeforeSpecimen3, {
            type: 'line',
            data: DataBeforeSpecimen3,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top',
                    },
                    title: {
                        display: false,
                        text: 'Chart.js Line Chart'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {

                            beginAtZero: true,
                            //fontSize: 20,
                            stepSize: 20,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: "Evaporation(g)",
                            //fontSize: 25
                        }
                    }],
                    xAxes: [
                        {
                            ticks: {
                                //fontSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Time(min)",
                                //fontSize: 25
                            }
                        }
                    ]
                },
            },
        });
        $.myBar = new Chart(objAfterSpecimen1, {
            type: 'line',
            data: DataAfterSpecimen1,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top',
                    },
                    title: {
                        display: false,
                        text: 'Chart.js Line Chart'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {

                            beginAtZero: true,
                            //fontSize: 20,
                            stepSize: 20,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: "Evaporation(g)",
                            //fontSize: 25
                        }
                    }],
                    xAxes: [
                        {
                            ticks: {
                                //fontSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Time(min)",
                                //fontSize: 25
                            }
                        }
                    ]
                },
            },
        });
        $.myBar = new Chart(objAfterSpecimen2, {
            type: 'line',
            data: DataAfterSpecimen2,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top',
                    },
                    title: {
                        display: false,
                        text: 'Chart.js Line Chart'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {

                            beginAtZero: true,
                            //fontSize: 20,
                            stepSize: 20,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: "Evaporation(g)",
                            //fontSize: 25
                        }
                    }],
                    xAxes: [
                        {
                            ticks: {
                                //fontSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Time(min)",
                                //fontSize: 25
                            }
                        }
                    ]
                },
            },
        });
        $.myBar = new Chart(objAfterSpecimen3, {
            type: 'line',
            data: DataAfterSpecimen3,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                        position: 'top',
                    },
                    title: {
                        display: false,
                        text: 'Chart.js Line Chart'
                    }
                },
                scales: {
                    yAxes: [{
                        ticks: {

                            beginAtZero: true,
                            //fontSize: 20,
                            stepSize: 20,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: "Evaporation(g)",
                            //fontSize: 25
                        }
                    }],
                    xAxes: [
                        {
                            ticks: {
                                //fontSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Time(min)",
                                //fontSize: 25
                            }
                        }
                    ]
                },
            },
        });
    }

    function IsEditModeChange() {

        // 控制項重置
        ClickEventBind();
        BlurEventBind();
        $('.toolBarItem').removeClass("canUse");
        //$("#Main_SubmitDateText").removeClass('date-picker');

        if ($('#Main_ReportNo').val() == '' && EditType != 'New') {

            // 可編輯欄位關閉
            $('.MainArea select ,.tab-innerItem1 select ,.tab-innerItem2 select').attr("disabled", true);
            $('.MainArea input ,.MainArea textarea ,.tab-innerItem1 input ,.tab-innerItem2 input').attr("readonly", "readonly");
            $(".btnShowChart").attr("disabled", true);
        }
        else {
            //根據模式區分
            if (EditMode) {
                // 可編輯欄位開啟
                $('.CanEdit').removeAttr("disabled");
                $('.CanEdit').removeAttr("readonly");

                // 圖表只有非編輯模式可以用
                $(".btnShowChart").attr("disabled", true);

                if ($("#Main_Status").val() != '') {
                    $('#Main_OrderID').attr("readonly", "readonly");
                }

                // 編輯模式可用功能開啟
                $('#Save, #Undo ,#Picture ,#NewItem').addClass("canUse");
                $(".detailDelete").show();
                $("#Main_SubmitDateText").addClass('date-picker');
                $('.date-picker').datepicker({ changeYear: true, changeMonth: true, currentText: "Now" });

            }
            else {
                // 可編輯欄位關閉
                $('.divTime10 input ,.divTime20 input ,.divTime30 input ,.divTime40 input ,.divRateInner1 input').attr("readonly", "readonly");
                $('.MainAreaItem input').attr("readonly", "readonly");
                $(".detailDelete").hide();

                // 圖表只有非編輯模式可以用
                $(".btnShowChart").removeAttr("disabled");

                // 未Confirmed可用功能開啟
                if ($("#Main_Status").val() == 'New') {
                    $('#Encode').addClass("canUse");
                    $('#Edit , #Delete ,#Excel ,#PDF ,#SendtoMR ,#Picture ,#Exit').addClass("canUse");
                }
                else {
                    // Confirmed後的可用功能開啟
                    $('#Amend').addClass("canUse");
                    $('#Excel ,#PDF ,#SendtoMR ,#Picture ,#Exit').addClass("canUse");
                }
            }

        }

        // 移除不可用功能的事件
        $('.toolBarItem:not(.canUse)').unbind('click');
    }

    function QueryBind() {

        $('#btnQuery').on('click', function () {
            if ($('#Request_BrandID').val() == '' || $('#Request_SeasonID').val() == '' || $('#Request_StyleID').val() == '' || $('#Request_Article').val() == '') {
                msg.WithError("Brand, Season ,Style and Article cannot be empty");
                return false;
            }
        });

        $("#Request_BrandID").blur(function () {
            $.ajax({
                url: "@Url.Action("BrandList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_BrandID").val('');
                        msg.WithError('Brand Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Request_SeasonID").blur(function () {
            var BrandID = $('#Request_BrandID').val();
            $.ajax({
                url: "@Url.Action("SeasonList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_SeasonID").val('');
                        msg.WithError('Season Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Request_StyleID").blur(function () {
            var BrandID = $('#Request_BrandID').val();
            var SeasonID = $('#Request_SeasonID').val();
            $.ajax({
                url: "@Url.Action("StyleList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: SeasonID, StyleID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_StyleID").val('');
                        msg.WithError('Style Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Request_Article").blur(function () {
            var BrandID = $('#Request_BrandID').val();
            var SeasonID = $('#Request_SeasonID').val();
            var StyleID = $('#Request_StyleID').val();
            $.ajax({
                url: "@Url.Action("ArticleList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: SeasonID, StyleID: StyleID, Article: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_Article").val('');
                        msg.WithError('Article Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });
    }

    function OpenWindow(WindowType) {
        if (WindowType == "BrandID") {
            window.open('@Url.Action("BrandList", "PublicWindow", new { Area = "" })', WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "SeasonID") {

            if ($('#Request_BrandID').val() == '' ) {
                msg.WithError('Please input brand  first.');
                return;
            }
            var para = "?BrandID=" + $('#Request_BrandID').val();
            window.open('@Url.Action("SeasonList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "StyleID") {

            if ($('#Request_BrandID').val() == '' || $('#Request_SeasonID').val() == '') {
                msg.WithError('Please input brand and season first.');
                return;
            }
            var para = "?BrandID=" + $('#Request_BrandID').val() + "&SeasonID=" + $('#Request_SeasonID').val();
            window.open('@Url.Action("StyleList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "Article") {

            if ($('#Request_BrandID').val() == '' || $('#Request_SeasonID').val() == '' || $('#Request_StyleID').val() == '') {
                msg.WithError('Please input brand season ,and Style first.');
                return;
            }
            var para = "?TargetID=Request_Article&OrderID=&StyleUkey=0&BrandID=" + $('#Request_BrandID').val() + "&SeasonID=" + $('#Request_SeasonID').val() + "&StyleID=" + $('#Request_StyleID').val();
            window.open('@Url.Action("ArticleList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "FabricRefNo" && EditMode) {

            if ($('#Main_OrderID').val() == '') {
                msg.WithError('Please input SP# first.');
                return;
            }
            var para = "?TargetID=Main_FabricRefNo&OrderID=" + $('#Main_OrderID').val();
            window.open('@Url.Action("FabricRefNoList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=800,height=750');
        }
        if (WindowType == "AccRefNo" && EditMode) {

            if ($('#Main_OrderID').val() == '') {
                msg.WithError('Please input SP# first.');
                return;
            }
            var para = "?TargetID=Main_AccRefNo&OrderID=" + $('#Main_OrderID').val();
            window.open('@Url.Action("AccRefNoList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=800,height=750');
        }
        if (WindowType == "InkType" && EditMode) {

            if ($('#Main_ItemTested').val() != 'Printing') {
                return;
            }

            if ($('#Main_BrandID').val() == '' || $('#Main_SeasonID').val() == '' || $('#Main_StyleID').val() == '') {
                msg.WithError('Please input SP# first.');
                return;
            }
            var para = `?TargetID=Main_TypeOfPrint&BrandID=${$('#Main_BrandID').val()}&SeasonID=${$('#Main_SeasonID').val()}&StyleID=${$('#Main_StyleID').val()}`;
            window.open('@Url.Action("InkTypeList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=800,height=750');
        }
    }

    function GetBrandList(BrandID) {
        $("#Request_BrandID").val(BrandID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetSeasonList(SeasonID) {
        $("#Request_SeasonID").val(SeasonID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetStyleList(StyleID) {
        $("#Request_StyleID").val(StyleID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetArticleList(Article) {
        $("#Request_Article").val(Article);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetFabricRefNoList(FabricRefNoData) {
        $("#Main_Seq").val(FabricRefNoData.Seq);
        $("#Main_Seq1").val(FabricRefNoData.Seq1);
        $("#Main_Seq2").val(FabricRefNoData.Seq2);
        $("#Main_FabricRefNo").val(FabricRefNoData.Refno);
        $("#Main_FabricColor").val(FabricRefNoData.Color);
        // 在這邊取得開窗選擇的FabricRefNoData，進行後續動作

        // Roll Dyelot可能改變，因此清空表身
        // $(".colBody").remove();
    }

    function GetAccRefNoList(AccRefNoData) {
        //$("#Main_Seq").val(FabricRefNoData.Seq);
        //$("#Main_Seq1").val(FabricRefNoData.Seq1);
        //$("#Main_Seq2").val(FabricRefNoData.Seq2);
        $("#Main_AccRefNo").val(AccRefNoData.Refno);
        $("#Main_AccColor").val(AccRefNoData.Color);
        // 在這邊取得開窗選擇的FabricRefNoData，進行後續動作

        // Roll Dyelot可能改變，因此清空表身
        // $(".colBody").remove();
    }

    function GetInkTypeList(InkTypeData) {
        $("#Main_TypeOfPrint").val(InkTypeData.InkType);
        // 在這邊取得開窗選擇的FabricRefNoData，進行後續動作

        // Roll Dyelot可能改變，因此清空表身
        $(".colBody").remove();
    }

    function GetPicture(data) {
        $('#Main_TestBeforePicture').val(data.BeforePicture.replace("data:image/png;base64,", ""));
        $('#Main_TestAfterPicture').val(data.AfterPicture.replace("data:image/png;base64,", ""));
    }

    function ClickEventBind() {

        $('.toolBarItem ,.detailDelete').unbind('click');

        $('#btnNew').on('click', function () {
            window.location = '@Url.Action("New")';
        });

        $('#Edit').on('click', function () {
            EditMode = true;
            IsEditModeChange();
        });
        $('#Save').on('click', function () {
            if (EditMode == false) {
                return;
            }

            if ($('#Main_OrderID').val() == '' || $('#Main_BrandID').val() == '' || $('#Main_SeasonID').val() == '' || $('#Main_StyleID').val() == '' || $('#Main_Article').val() == '') {
                msg.WithError("SP#, Brand, Season ,Style and Article cannot be empty");
                return false;
            }

            //$('.detailRowIdx').each(function (index, data) {
            //    var idx = $(this).val();
            //    if (idx != index) {

            //        let className = `Row${idx}`;


            //        $.each($(`.Row${idx} .DetailInput`), function () {
            //            let colName = $(this).attr("Name").split('.')[1];
            //            let newName = `DetailList[${index}].${colName}`;
            //            let newID = `DetailList_${index}__${colName}`;
            //            $(this).removeClass(`Row${idx}`);
            //            $(this).addClass(`Row${index}`);
            //            $(this).attr("ID", newID);
            //            $(this).attr("Name", newName);
            //        });
            //    }
            //});


            $("#SaveSubmit").click();

        });

        $('#Undo').on('click', function () {
            if (EditType == 'New') {
                window.location.href="@Url.Action("Index")";
            }
            if ($("#Main_ReportNo").val() != '') {
                // 重新Query 一次Detail
                window.location.reload();
            }
            else {
                EditMode = false;
                EditType = '';
                IsEditModeChange();
            }
        });

        $('#Delete').on('click', function (e) {
            if (EditMode == true) {
                return;
            }

            if (EditMode == false && $('#Main_ReportNo').val() != null && $('#Main_ReportNo').val() != "" && $('#Main_ReportNo').val() != "0") {
                e.preventDefault();
                msg.WithConfirm('Do you want to delete the data ?',
                    function () {
                        $("#DeleteSubmit").click();
                    }, null);
            }
        });

        $('#Picture').on('click', function () {
            var para = "?Title=" + $('.page-header span').html() + "&EditMode=" + EditMode;
            para += "&" + "Table=EvaporationRateTest";
            para += "&" + "TargetBeforeColumn=Main_TestBeforePicture";
            para += "&" + "TargetAfterColumn=Main_TestAfterPicture";
            para += "&" + "BeforeColumn=TestBeforePicture";
            para += "&" + "AfterColumn=TestAfterPicture";
            para += "&" + "PKey_1=ReportNo";
            para += "&" + "PKey_1_Val=" + $('#Main_ReportNo').val();
            window.open('@Url.Action("PictureList", "PublicWindow",new { Area=""})' + para, 'Picture List', config = 'toolbar=no,status=no,location=no,width=1024,height=750');
        });

        $('#SendtoMR').on('click', function () {

            if ($("#Main_ReportNo").val() == '') {
                return false;
            }
            var para = '?Subject=@Model.Main.MailSubject';
            window.open('@Url.Action("SendMailer", "SendMailAttachfiles", new { Area=""})' + para, 'SendMail', config = 'toolbar=no,status=no,location=no,width=800,height=400');
        });

        $("#Excel").on("click", function () {

            msg.WithInfoTimer("Report Generating...");

            $.ajax({
                url: "@Url.Action("ToExcel")",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val()}),
                async: true,
                success: function (data) {
                    if (data.Result) {
                        window.location.href = data.reportPath;
                    }
                    else {
                        msg.WithError(data.ErrorMessage);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#PDF").on("click", function () {

            msg.WithInfoTimer("Report Generating...");

            $.ajax({
                url: "@Url.Action("ToPDF")",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val()}),
                async: true,
                success: function (data) {
                    if (data.Result) {
                        window.location.href = data.reportPath;
                    }
                    else {
                        msg.WithError(data.ErrorMessage);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        if ($("#Main_Status").val() == "New") {

            $('#Encode').on('click', function () {

                $.ajax({
                    url: "@Url.Action("Encode")",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val(), Result: $("#Main_Result").val() }),
                    async: false,
                    success: function (data) {
                        if (data.Result) {
                            if (data.Action == "FailMail()") {
                                FailMail();
                            }
                            else {
                                msg.WithSuccesCheck("Success", function () {
                                    $("#btnQuery").click();
                                });
                            }
                        }
                        else {
                            msg.WithError(data.ErrMsg);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.responseText);
                    }
                });
            });
        }

        if ($("#Main_Status").val() != "New") {

            $('#Amend').on('click', function () {

                $.ajax({
                    url: "@Url.Action("Amend")",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val(), Result: $("#Main_Result").val() }),
                    async: false,
                    success: function (data) {
                        if (data.Result) {
                            msg.WithSuccesCheck("Success", function () {
                                $("#btnQuery").click();
                            });
                        }
                        else {
                            msg.WithError(data.ErrMsg);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.responseText);
                    }
                });
            });
        }

        $('.detailDelete').on('click', function () {
            if (EditMode == false) {
                return;
            }
            var t = $(this);

            msg.WithConfirm('Do you want to delete the data ?',
                function () {

                    let divTime = $(t).parent().parent();
                    let divRate = $(t).parent().parent().parent().parent().find('.divTabInnerLeft').find('.divRate');

                    // 找出刪除的detailtype、specimenid
                    let detailtype = $($(divTime).find('div')[6]).find(".Mass").attr("detailtype");
                    let specimenid = $($(divTime).find('div')[6]).find(".Mass").attr("specimenid");

                    let divTimeLength = $(divTime).find('div').length;
                    let ctnPerRow = 5;
                    var deleteTimeIdx = 0;
                    for (var i = divTimeLength - 1; 0 <= i; i--) {
                        if ((i + 1) % 5 == 0) {
                            // 找出被刪除的index
                            deleteTimeIdx = parseInt($($(divTime).find('div')[i]).find('.detailTimeListIdx').val());
                        }

                        $($(divTime).find('div')[i]).remove();
                        if (ctnPerRow == 1) {
                            break;
                        }
                        ctnPerRow--;
                    }
                    // 把大於這個idx的都往前推一
                    AdjustElements('TimeList', deleteTimeIdx);

                    let divRateLength = $(divRate).find('div').length;
                    ctnPerRow = 2;
                    var deleteRateIdx = 0;

                    for (var i = divRateLength - 1; 0 <= i; i--) {
                        if ((i + 1) % 2 == 0) {
                            // 找出被刪除的index
                            deleteRateIdx = parseInt($($(divRate).find('div')[i]).find('.detailRateListIdx').val());
                        }

                        $($(divRate).find('div')[i]).remove();
                        if (ctnPerRow == 1) {
                            break;
                        }
                        ctnPerRow--;
                    }

                    // 把大於這個idx的都往前推一
                    AdjustElements('RateList', deleteRateIdx);

                    MaxRateListIdx -= 1;
                    MaxTimeListIdx -= 1;
                    AutoUpdateTime(detailtype, specimenid);
                    AutoUpdateRate(detailtype, specimenid);

                }, null);
        });

        $('#NewItem').on('click', function () {
            AddDetailRow();
        });
    }

    function AdjustElements(listName,indexToDelete) {

        // 取得所有 name 屬性以 "TimeList[" 開頭的元素
        const elementsToAdjust = $('[name^="' + listName +'["]');

        for (const obj of elementsToAdjust) {
            // 取得元素的目前 name 屬性
            const currentName = obj.getAttribute('name');

            // 從 name 屬性中提取索引
            const match = currentName.match(/\[(\d+)\]/);
            if (match) {
                const currentIndex = parseInt(match[1]);

                // 如果索引大於刪除的索引，則遞減索引
                if (currentIndex > indexToDelete) {
                    const newIndex = currentIndex - 1;

                    // 更新 name 屬性，將舊索引替換為新索引
                    const newName = currentName.replace('[' + currentIndex + ']', '[' + newIndex + ']');

                    // 更新 ID 属性
                    obj.setAttribute('name', newName);
                    obj.setAttribute('id', obj.getAttribute('id').replace('_' + currentIndex + '_', '_' + newIndex + '_'));
                }
            }

        }
    }
    // 若表身有資料被刪除，則重新編號索引
    function reBuildIndex(listName) {

        //listName = RateList or TimeList

        // 取剩下的Row
        var rows = $(`.detail${listName}Idx`);

        // 新的索引，一律從0開始
        var newIndex = 0;

        // 剩下的Row逐一處理，可能會有連號造成Index不連貫，例如原本有三筆資料，索引0、1、2，但1刪掉了，剩下的兩筆索引要重新編成0、1
        rows.each(function () {

            // 取得舊索引
            var oldIndex = $(this).val();

            // 取得Name或ID用到舊索引的控制項，一律換成新索引
            $(`input[name^="${listName}[${oldIndex}]"]`).each(function () {
                var oldName = $(this).attr('name');
                var newName = oldName.replace(oldIndex, newIndex);
                $(this).attr('name', newName);
            })

            $(`input[id^="${listName}_${oldIndex}_"]`).each(function () {
                var oldID = $(this).attr('id');
                var newID = oldID.replace(oldIndex, newIndex);
                $(this).attr('id', newID);
            })

            //$(`select[name^="DetailList[${oldIndex}]"]`).each(function () {
            //    var oldName = $(this).attr('name');
            //    var newName = oldName.replace(oldIndex, newIndex);
            //    $(this).attr('name', newName);

            //    // 跟RowIndex有關的事件也要更新
            //    if (newName.endsWith('Scale')) {
            //        $(this).attr('onchange', `ScaleChange(${newIndex}, this, 'Result', '4-5')`);
            //    }
            //})

            $(this).attr('value', newIndex);
            newIndex++;
        });

    }

    function extractIndex(inputString) {
        // 使用正則表達式匹配 [ ] 中的數字
        const match = inputString.match(/\[(\d+)\]/);

        if (match) {
            // 如果找到匹配，將匹配的數字轉換為整數並返回
            const index = parseInt(match[1], 10);
            return index;
        } else {
            // 如果未找到匹配，返回 -1 或任何您希望的預設值
            return -1;
        }
    }

    function BlurEventBind() {

        $('input ,select').unbind('blur').unbind('change');

        $("#Main_OrderID").on("change", function () {
            if (EditMode == false) {
                return;
            }
            // 重設Article下拉選單
            $("#Main_Article").empty();

            if ($(this).val() == '') {
                $("#Main_OrderID").val('');
                $("#Main_BrandID").val('');
                $("#Main_SeasonID").val('');
                $("#Main_StyleID").val('');
                $("#Main_Article").val('');
                return;
            }

            let orderID = $(this).val();


            $.ajax({
                url: "@Url.Action("OrderIDCheck")",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ orderID: orderID }),
                async: true,
                success: function (data) {
                    if (data.Result == false || data.ErrMsg != "") {

                        $("#Main_OrderID").val('');
                        $("#Main_BrandID").val('');
                        $("#Main_SeasonID").val('');
                        $("#Main_StyleID").val('');
                        $("#Main_Articl").val('');

                        msg.WithError(data.ErrMsg);
                    }
                    else {
                        // 塞入Article下拉選單
                        $("#Main_Article").append(data.ArticleSource);

                        $("#Main_BrandID").val(data.Main.BrandID);
                        $("#Main_SeasonID").val(data.Main.SeasonID);
                        $("#Main_StyleID").val(data.Main.StyleID);

                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });

        });

        $("#Main_ItemTested").on("change", function () {
            if (EditMode == false) {
                return;
            }
            let itemTested = $(this).val();

            if (itemTested != 'Printing') {
                $("#Main_TypeOfPrint").val('');
            }
        });

        $("#Main_SubmitDateText").on("change", function () {
            $("#Main_SubmitDate").val($("#Main_SubmitDateText").val());
        });
    }

    function AddDetailRow() {

        MaxRateListIdx += 1;
        MaxTimeListIdx += 1;
        //  必要參數
        var detailType = fcousDetailType;
        var specimenID = fcousSpecimenID;

        let parentTabID = '';

        let evaporationList = $(`.Evaporation[detailType="${detailType}"][specimenID="${specimenID}"]`);
        let lastEvaporation = evaporationList[evaporationList.length - 1];

        // Time List 必要參數
        let lastTime = parseInt($(lastEvaporation).attr("Time")) + 10;
        let TimeListIdx = MaxTimeListIdx;
        parentTabID = $(lastEvaporation).attr("parentTabID");

        let rateValueList = $(`.RateValue[detailType="${detailType}"][specimenID="${specimenID}"]`);
        let lastRateValue = rateValueList[rateValueList.length - 1];

        // Rate List 必要參數
        let lastRateName = parseInt($(lastRateValue).attr("RateName")[1]) + 1;
        let RateListIdx = MaxRateListIdx;

        let SpecimenListIdx = parseInt($(lastRateValue).attr("SpecimenListIdx")) + 1;
        let subtrahendTime = parseInt($(lastRateValue).attr("subtrahend-time")) + 10;
        let minuendTime = parseInt($(lastRateValue).attr("minuend-time")) + 10;



        $.ajax({
            url: "@Url.Action("AddTimeRow")",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ parentTabID: parentTabID, detailType: detailType, specimenID: specimenID, TimeListIdx: TimeListIdx, lastTime: lastTime }),
            async: false,
            success: function (data) {
                $(`#${parentTabID} > .divTabInnerRight > .divTime`).append(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(xhr.responseText);
            },
        });

        $.ajax({
            url: "@Url.Action("AddRateRow")",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                parentTabID: parentTabID,
                detailType: detailType, specimenID: specimenID, RateListIdx: RateListIdx, SpecimenListIdx: SpecimenListIdx , lastRateName: lastRateName, subtrahendTime: subtrahendTime, minuendTime: minuendTime}),
            async: false,
            success: function (data) {
                $(`#${parentTabID} > .divTabInnerLeft > .divRate`).append(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(xhr.responseText);
            }
        });

        msg.WithSuccess("Add Success");

        ClickEventBind();

        AutoUpdateRate(detailType, specimenID);

    }

    function ReportNoChange(value) {
        $('#btnQuery').unbind('click').click();
    }

    function MassCheck(value) {
        if (parseFloat(value) >= 99.999) {
            return 99.999;
        }
        else if (parseFloat(value) < 0) {
            return 0;
        }
        else if (value == '') {
            return 0;
        }

        return Number.parseFloat(value).toFixed(3);
    }

    function tabChange() {
        var $liBefore = $('#tab-ChangeBefore > ul.tab-title li');
        $($liBefore.eq(0).attr('link')).show();

        $($liBefore.eq(0).addClass('active').attr('link')).siblings('.tab-inner').hide();
        $liBefore.click(function () {
            $($(this).attr('link')).show().siblings('.tab-inner').hide();
            $(this).addClass('active').siblings('.active').removeClass('active');

            // 將當前點選的Type + Specimen 記錄下來
            fcousDetailType = "Before";
            fcousSpecimenID = $(this).text();
            $(".divSpecimenChart").hide();
        });

        var $liAfter = $('#tab-ChangeAfter > ul.tab-title li');
        $($liAfter.eq(0).attr('link')).show();

        $($liAfter.eq(0).addClass('active').attr('link')).siblings('.tab-inner').hide();
        $liAfter.click(function () {
            $($(this).attr('link')).show().siblings('.tab-inner').hide();
            $(this).addClass('active').siblings('.active').removeClass('active');

            // 將當前點選的Type + Specimen 記錄下來
            fcousDetailType = "After";
            fcousSpecimenID = $(this).text();
            $(".divSpecimenChart").hide();
        });

    }

    function GotoType(type) {

        $(`.divDetailType[detailtype="${type}"]`).show();
        $(`.divDetailType[detailtype!="${type}"]`).hide();
        SpecimenChartToggle();
        fcousDetailType = type;
    }

    function DetailItemValueCgange(obj, standard, detailItemListIdx, evaluationItem) {

        if ($(obj).val() == standard) {
            $(`#DetailItemList_${detailItemListIdx}__Result`).val('Pass');
            $(`#DetailItemList_${detailItemListIdx}__Result`).css('color', 'blue');

            $(`input[tag='${evaluationItem}Tag']`).val('Pass');
            $(`input[tag='${evaluationItem}Tag']`).css('color', 'blue');
        }
        else {
            $(`#DetailItemList_${detailItemListIdx}__Result`).val('Fail');
            $(`#DetailItemList_${detailItemListIdx}__Result`).css('color', 'red');

            $(`input[tag='${evaluationItem}Tag']`).val('Fail');
            $(`input[tag='${evaluationItem}Tag']`).css('color', 'red');
        }

    }

    function AutoUpdateTime(updatedObj) {
        let isInitialMass =$(updatedObj).attr("IsInitialMass");
        let specimenID = $(updatedObj).attr("SpecimenID");
        let detailType = $(updatedObj).attr("DetailType");
        let newVal = $(updatedObj).val();

        if (isInitialMass == "True") {
            let evaporationList = $(`.Evaporation[detailType="${detailType}"][specimenID="${specimenID}"]`);
            $.each(evaporationList, function myfunction() {
                let evaporation = this;
                let time = $(evaporation).attr("Time");
                let massObj = $(`.Mass[detailType="${detailType}"][specimenID="${specimenID}"][Time="${time}"]`)[0];
                let mass = $(massObj).val();
                let initialMass = newVal;

                let val = initialMass - mass;

                if (parseFloat(val) >= 99.999) {
                    val = 99.999;
                }
                else if (parseFloat(val) < 0) {
                    val = 0;
                }
                else {
                    val = Number.parseFloat(val).toFixed(3);
                }

                $(evaporation).val(val);

            });
        }
        else {
            let time = $(updatedObj).attr("Time");
            let evaporationList = $(`.Evaporation[detailType="${detailType}"][specimenID="${specimenID}"][Time="${time}"]`);

            $.each(evaporationList, function myfunction() {
                let evaporation = this;
                let initialTime = $(evaporation).attr("InitialTime");
                let initialMassObj = $(`.Mass[detailType="${detailType}"][specimenID="${specimenID}"][Time="${initialTime}"]`)[0];
                let initialMass = $(initialMassObj).val();

                let val = initialMass - newVal;

                if (parseFloat(val) >= 99.999) {
                    val = 99.999;
                }
                else if (parseFloat(val) < 0) {
                    val = 0;
                }
                else {
                    val = Number.parseFloat(val).toFixed(3);
                }

                $(evaporation).val(val);
            });
        }

        AutoUpdateRate(detailType, specimenID);
    }

    function AutoUpdateRate(detailType, specimenID) {
        let rateValueList = $(`.RateValue[detailType="${detailType}"][specimenID="${specimenID}"]`);
        $.each(rateValueList, function () {
            let rateValue = this;
            let ratio = $(rateValue).attr("Ratio");
            let subtrahendTime = $(rateValue).attr("subtrahend-time");
            let minuendTime = $(rateValue).attr("minuend-time");
            let massSubtrahend = $(`.Mass[detailType="${detailType}"][specimenID="${specimenID}"][Time="${subtrahendTime}"]`)[0];
            let massMinuend = $(`.Mass[detailType="${detailType}"][specimenID="${specimenID}"][Time="${minuendTime}"]`)[0];

            let newRate = ($(massSubtrahend).val() - $(massMinuend).val()) * ratio;
            newRate = Number.parseFloat(newRate).toFixed(3);
            $(rateValue).val(newRate);
        });

        AutoUpdateAverageRate(detailType, specimenID);
    }

    function AutoUpdateAverageRate(detailType, specimenID) {
        let allRate = 0.0;
        let count = 0;
        let rateValueList = $(`.RateValue[detailType="${detailType}"][specimenID="${specimenID}"]`);
        $.each(rateValueList, function () {
            let rateValue = this;
            allRate += Number.parseFloat($(rateValue).val());
            count += 1;
        });

        let avg = Number.parseFloat(allRate / count).toFixed(3);
        $(`.RateAverage[detailType="${detailType}"][specimenID="${specimenID}"]`).val(avg);

        AutoUpdateFinalAverage(detailType);
    }

    function AutoUpdateFinalAverage(detailType) {
        let allRate = 0.0;
        let count = 0;
        let rateValueList = $(`.RateAverage[detailType="${detailType}"]`);
        $.each(rateValueList, function () {
            let rateValue = this;
            allRate += Number.parseFloat($(rateValue).val());
            count += 1;
        });

        let avg = Number.parseFloat(allRate / count).toFixed(3);
        $(`input[detailtype="Main${detailType}"]`).val(avg);
    }

    function FailMail() {
        var para = "?Title=" + $('.page-header span').html() + "&FactoryID=@ViewBag.FactoryID&Type=BulkFGT";
        window.open('@Url.Action("TestFailMailList", "PublicWindow",new { Area=""})' + para, 'Mail List', config = 'toolbar=no,status=no,location=no,width=650,height=750');
    }

    function GetTestFailMailList(data) {
        var to = "";
        var cc = "";
        $.each(data, function (index, value) {
            to += value.To + ';';
            cc += value.CC + ';';
        });

        $.ajax({
            url: "@Url.Action("SendMail")",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ ReportNo: '@Model.Main.ReportNo', TO: to, CC: cc }),
            async: false,
            success: function (data) {
                if (data.result) {
                    msg.WithSuccesCheck("Success", function () {
                        $("#btnQuery").click();
                    });
                }
                else {
                    msg.WithWarningCheck(data.resultMsg, function () {
                        location.reload();
                    });
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // console.log(xhr.responseText);
                msg.WithWarningCheck(xhr.responseText, function () {
                    location.reload();
                });
            }
        });
    }

    function GetSendMailer(data) {
        var to = data.To;
        var cc = data.CC;
        var subject = data.Subject;
        var body = data.Body;
        var rawFiles = data.RawFiles;

        if (to != "") {

            let formData = new FormData();
            formData.append('ReportNo', '@Model.Main.ReportNo');
            formData.append('To', to);
            formData.append('CC', cc);
            formData.append('Subject', subject);
            formData.append('Body', body);

            $.each(rawFiles, function () {
                formData.append('Files', this);
            })

            $.ajax({
                url: "@Url.Action("SendMail")",
                type: 'POST',
                contentType: false,
                data: formData,
                async: false,
                processData: false,
                success: function (data) {
                    if (data.result) {
                        msg.WithSuccesCheck("Success", function () {
                            $("#btnQuery").click();
                        });
                    }
                    else {
                        msg.WithWarningCheck(data.resultMsg, function () {
                            location.reload();
                        });
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    // console.log(xhr.responseText);
                    msg.WithWarningCheck(xhr.responseText, function () {
                        location.reload();
                    });
                }
            });
        }
    }

</script>