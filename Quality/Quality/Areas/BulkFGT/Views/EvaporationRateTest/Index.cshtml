@using DatabaseObject.ViewModel.BulkFGT

@model EvaporationRateTest_ViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Scripts.Render("~/Scripts/Plugins/ChartJS")
@*<link href="~/ThirdParty/SciCustom/css/TableStyle.css" rel="stylesheet" />*@
@*<link href="~/ThirdParty/plugins/jquery-ui/jquery-ui.css" rel="stylesheet" />*@
@{

    //int MaxRateListIdx = Model.RateList.Any() ? Model.RateList.Count() - 1 : 0;
    int MaxTimeListIdx = Model.TimeList.Any() ? Model.TimeList.Count() - 1 : 0;
}
<style>
    .SearchDiv {
        width: 100%;
        /*height: 8vh;*/
        /*background-color: pink;*/
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        display: flex;
    }

    .colDiv {
        width: 4.3%;
        padding: 2px;
    }

    .colDiv2 {
        width: 13%;
        padding: 2px;
    }


    .searchTitle {
        color: white;
    }

    .row-name {
        color: gray;
        font-size: 1.2em;
        background-color: wheat;
    }

    .bodyDiv {
        width: 100%;
        overflow-x: scroll;
    }

    .buttonArea, .MainArea, .DetailDataArea {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divDetailType {
        width: 100%;
        /*height:30vh;*/
    }

    .buttonAreaItem {
        width: 9%;
        padding: 2px;
    }

    .buttonAreaItem2 {
        width: 10%;
        padding: 2px;
    }

    .MainAreaItem100 {
        width: 99.6%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .MainAreaItem {
        width: 16.6%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }
    .MainAreaItem2 {
        width: 13.3%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }
    .MainAreaItem3 {
        width: 19.9%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }


    .DetailDataAreaItem1 {
        width: 9%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
    }

    .DetailDataAreaItem2 {
        width: 28%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
    }

    .DetailDataAreaItem1 input, .DetailDataAreaItem1 select {
        width: 100%;
    }

    .DetailDataAreaItem2 input, .DetailDataAreaItem2 select {
        width: 100%;
    }

    .colHead {
        background-color: wheat;
        color: darkslategray;
        font-size: 1rem;
        font-weight: bold;
        text-align: center;
    }

    .MainAreaItemSpan3 {
        width: 37.5%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }

    .MainAreaItemSpan7 {
        width: 87.5%;
        padding: 2px;
        height: 3rem;
        border: 1px solid;
        display: flex;
        align-items: center;
    }


    .odd {
        background-color: white;
    }

    .even {
        background-color: lightgray;
    }

    .actionBtn {
        width: 100%;
    }

    .colTitle {
        /*color: white;*/
    }

    .canUse {
        color: white !important;
        cursor: pointer;
    }


    .textArenDiv {
        height: 5rem;
    }

    textarea {
        padding: 2px;
        width: 100%;
        height: 4.5rem;
    }

    input:-webkit-autofill {
        -webkit-text-fill-color: black;
    }

    h4 {
        font-size: 1rem;
    }

    #dialogProcessMsg {
        display: none;
        position: absolute;
        top: 20%;
        left: 25%;
        height: 100%;
        background-color: lavender;
        border-radius: 5px;
        z-index: 1002;
        width: 50%;
        height: 35vh;
        /*overflow: scroll;*/
    }

    .black_overlay {
        display: none;
        position: absolute;
        top: 0%;
        left: 0%;
        width: 100%;
        height: 100%;
        background-color: black;
        z-index: 1001;
        opacity: .80;
    }

    input, select, a, div {
        font-size: 1rem;
    }

    #tab-ChangeBefore, #tab-ChangeAfter {
        width: 100%;
    }

        #tab-ChangeBefore > ul, #tab-ChangeAfter > ul {
            display: block;
            margin: 0;
            list-style: none;
        }

    .tab-title {
        list-style: none;
    }

    #tab-ChangeBefore > ul > li, #tab-ChangeAfter > ul > li {
        display: inline-block;
        vertical-align: top;
        margin: 0 -1px -1px 0;
        border: 1px solid #BCBCBC;
        height: 4vh;
        line-height: 25px;
        background: #CDCDCD;
        padding: 0 15px;
        list-style: none;
        box-sizing: border-box;
        cursor: pointer;
    }

        #tab-ChangeBefore > ul > li.active, #tab-ChangeAfter > ul > li.active {
            background: #fff;
        }

    #tab-ChangeBefore > .tab-inner, #tab-ChangeAfter > .tab-inner {
        padding: 10px;
        color: #000;
        border: 1px #BCBCBC solid;
        height: 50vh;
        overflow: scroll;
        overflow-x: hidden;
    }

    .tab-inner {
        background-color: rgb(255, 255, 255);
        width: 100%;
        height: auto;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divTabInnerLeft {
        width: 35%;
        height: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divTabInnerBlank {
        width: 5%;
        height: 100%;
    }

    .divTabInnerRight {
        width: 60%;
        height: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .divRate {
        width: 100%;
        /*height: 45%;*/
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        border: 1px #BCBCBC solid;
    }

    .divRateInner1 {
        width: 50%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime {
        width: 100%;
        /*height: 70%;*/
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        border: 1px #BCBCBC solid;
    }

    .divTime10 {
        width: 10%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime20 {
        width: 20%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime30 {
        width: 30%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .divTime40 {
        width: 40%;
        border: 1px #BCBCBC solid;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .tab-innerItem1 {
        width: 8%;
        padding: 2px;
        border: 1px solid;
    }

    .tab-innerItem2 {
        width: 43%;
        padding: 2px;
        border: 1px solid;
    }

    .tab-innerItem3 {
        width: 16%;
        padding: 2px;
        border: 1px solid;
    }

    .tab-innerItem4 {
        width: 5%;
        padding: 2px;
        border: 1px solid;
    }


    .tab-innerDetail {
        background-color: rgb(255, 255, 255);
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .tab-innerDetailRow {
        height: 25vh;
    }

    .tableDiv {
        background-color: rgb(255, 255, 255);
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: stretch;
    }

    .tableDiv-innerItem1 {
        width: 100%;
        padding: 2px;
        /*height: 100%;*/
        border: 1px solid;
    }
</style>

<div class="main-content">
    <header class="page-header">
        <h3>
            <i class=""></i><span>Evaporation Rate Test</span>
        </h3>
        <div class="breadcrumb">
            <div>Home</div>
            <div class="current">Evaporation Rate Test</div>
        </div>
    </header>



    @using (Html.BeginForm("Index", ViewContext.RouteData.GetRequiredString("Controller"), FormMethod.Post, new { }))
    {
        <div class="main-area">


            <div class="SearchDiv">
                <!-- #region Row 1-->
                <div class="colDiv">
                    <h4 class="searchTitle">Brand</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.BrandID, new { @value = Model.Request.BrandID, @style = "width:80%" })
                    <input id="btnBrandID" onclick="OpenWindow('BrandID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Season</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.SeasonID, new { @value = Model.Request.SeasonID, @style = "width:80%" })
                    <input id="btnSeasonID" onclick="OpenWindow('SeasonID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Style</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.StyleID, new { @value = Model.Request.StyleID, @style = "width:80%" })
                    <input id="btnStyleID" onclick="OpenWindow('StyleID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Article</h4>
                </div>
                <div class="colDiv2">
                    @Html.TextBoxFor(o => o.Request.Article, new { @value = Model.Request.Article, @style = "width:80%" })
                    <input id="btnArticle" onclick="OpenWindow('Article')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                </div>
                <div class="colDiv">
                    <input type="submit" class="site-btn btn-blue actionBtn" name="action:Query" id="btnQuery" value="Query" />
                </div>
                <div class="colDiv">
                    <input type="button" class="site-btn btn-green actionBtn" name="action:New" id="btnNew" value="New" />
                </div>
                <div class="colDiv">
                </div>
                <div class="colDiv">
                    <h4 class="searchTitle">Report No.</h4>
                </div>
                <div class="colDiv2">
                    @Html.DropDownListFor(o => o.Request.ReportNo, Model.ReportNo_Source, new { @style = "width:100%", onchange = "ReportNoChange(this.value)" })
                </div>
                <!-- #endregion -->

            </div>

            <div class="content-scroll">

                <div class="inner-scroll" style="float:left">

                    <div class="buttonArea">
                        <div class="buttonAreaItem">

                            <h4 id="Edit" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Edit.png" width="30" />
                                Edit
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <input id="SaveSubmit" type="submit" name="Action:EditSave" style="display:none" />
                            <h4 id="Save" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Save.png" width="30" />
                                Save
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Undo" class="toolBarItem" style="margin-right: 1em;">
                                <img src="~/Image/Icon/Undo.png" width="30" />
                                Undo
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <input id="DeleteSubmit" type="submit" name="Action:Delete" style="display:none" />
                            <h4 id="Delete" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Delete.png" width="30" />
                                Delete
                            </h4>

                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Encode" class="toolBarItem" style="margin-right: 1em;">
                                <img src="~/Image/Icon/Lock.png" width="30" />
                                Encode
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Amend" class="toolBarItem" style="margin-right: 1em;">
                                <img src="~/Image/Icon/Unlock.png" width="30" />
                                Amend
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Excel" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/XLS.png" width="30" />
                                Excel
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="PDF" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/PDF.png" width="30" />
                                PDF(Excel)
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="Picture" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/Picture.png" width="30" />
                                Picture
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="SendtoMR" class="toolBarItem" style=" margin-right: 1em;">
                                <img src="~/Image/Icon/SendMail.png" width="30" />
                                Send to MR
                            </h4>
                        </div>
                        <div class="buttonAreaItem">
                            <h4 id="NewItem" class="toolBarItem">
                                <img src="~/Image/Icon/New.png" width="30" />
                                New Item
                            </h4>
                        </div>
                    </div>

                    @*表頭*@
                <div class="MainArea">
                    <!-- #region Row 1-->
                    <div class="MainAreaItem2 odd">
                        <h4 class="colTitle">Report No</h4>

                    </div>
                    <div class="MainAreaItem3 odd">
                        @Html.TextBoxFor(o => o.Main.ReportNo, new { @class = "" })

                        @Html.HiddenFor(o => o.Main.Status)
                        @Html.HiddenFor(o => o.Main.TestBeforePicture)
                        @Html.HiddenFor(o => o.Main.TestAfterPicture)
                    </div>

                    <div class="MainAreaItem odd">
                        <h4 class="colTitle">Report Date</h4>

                    </div>
                    <div class="MainAreaItem odd">
                        @Html.TextBoxFor(o => o.Main.ReportDate, "{0:yyyy/MM/dd}", new { @class = "date-picker CanEdit" })
                    </div>

                    <div class="MainAreaItem odd">
                        <h4 class="colTitle">Receive Date</h4>
                    </div>
                    <div class="MainAreaItem odd">
                        @Html.HiddenFor(o => o.Main.SubmitDate)
                        @Html.TextBoxFor(o => o.Main.SubmitDateText, new { @class = "CanEdit" })
                    </div>
                    <!-- #endregion -->
                    <!-- #region Row 2-->

                    <div class="MainAreaItem2 even">
                        <h4 class="colTitle">SP#</h4>
                    </div>
                    <div class="MainAreaItem3 even">
                        @Html.TextBoxFor(o => o.Main.OrderID, new { @class = "even CanEdit" })
                    </div>

                    <div class="MainAreaItem even">
                        <h4 class="colTitle">Brand</h4>
                    </div>
                    <div class="MainAreaItem even">
                        @Html.TextBoxFor(o => o.Main.BrandID, new { @class = "even" })
                    </div>

                    <div class="MainAreaItem even">
                        <h4 class="colTitle">Season</h4>
                    </div>
                    <div class="MainAreaItem even">
                        @Html.TextBoxFor(o => o.Main.SeasonID, new { @class = "even" })
                    </div>


                    <!-- #endregion -->
                    <!-- #region Row 3-->

                    <div class="MainAreaItem2 odd">
                        <h4 class="colTitle">Style</h4>
                    </div>
                    <div class="MainAreaItem3 odd">
                        @Html.TextBoxFor(o => o.Main.StyleID, new { @class = "" })
                    </div>

                    <div class="MainAreaItem odd">
                        <h4 class="colTitle">Article</h4>

                    </div>
                    <div class="MainAreaItem odd CanEdit">
                        <select id="Main_Article" name="Main.Article" class="CanEdit">
                            @foreach (var item in Model.Article_Source)
                            {
                                string selected = item.Value.Equals(Model.Main.Article) ? "selected" : "";
                                <option value="@item.Value" @selected>@item.Text</option>
                            }
                        </select>
                    </div>

                    <div class="MainAreaItem odd">
                        <h4 class="colTitle">Seq</h4>
                    </div>
                    <div class="MainAreaItem odd">
                        @Html.TextBoxFor(o => o.Main.Seq, new { @class = "odd" })
                        @Html.HiddenFor(o => o.Main.Seq1, new { @class = "" })
                        @Html.HiddenFor(o => o.Main.Seq2, new { @class = "" })

                    </div>

                    <!-- #endregion -->
                    <!-- #region Row 4-->

                    <div class="MainAreaItem2 even">
                        <h4 class="colTitle">Fabric Ref#</h4>

                    </div>
                    <div class="MainAreaItem3 even">
                        @Html.TextBoxFor(o => o.Main.FabricRefNo, new { @class = "even", @onclick = "OpenWindow('FabricRefNo')", @placeholder = "Click" })
                    </div>

                    <div class="MainAreaItem even">
                        <h4 class="colTitle">Fabric Color</h4>

                    </div>
                    <div class="MainAreaItem even">
                        @Html.TextBoxFor(o => o.Main.FabricColor, new { @class = "even" })

                    </div>

                    <div class="MainAreaItem even">
                        <h4 class="colTitle">Fabric Description</h4>
                    </div>
                    <div class="MainAreaItem even">
                        @Html.TextBoxFor(o => o.Main.FabricDescription, new { @class = "even CanEdit" })
                    </div>
                    <!-- #endregion -->
                    <!-- #region Row 5-->

                    <div class="MainAreaItem2 odd">
                        <h4 class="colTitle">Before Wash Average Rate</h4>

                    </div>
                    <div class="MainAreaItem3 odd">
                        @Html.TextBoxFor(o => o.Main.BeforeAverageRate, new { @class = "odd", @DetailType = "MainBefore" })
                    </div>


                    <div class="MainAreaItem odd">
                        <h4 class="colTitle">After Wash Average Rate</h4>

                    </div>
                    <div class="MainAreaItem odd">
                        @Html.TextBoxFor(o => o.Main.AfterAverageRate, new { @class = "odd", @DetailType = "MainAfter" })
                    </div>


                    <div class="MainAreaItem odd">
                        <h4 class="colTitle">Result</h4>

                    </div>
                    <div class="MainAreaItem odd">
                        @{ string mainResultColor = Model.Main.Result == "Pass" ? "blue" : "red";}
                        @Html.TextBoxFor(o => o.Main.Result, new { @class = "", @style = $@"color:{mainResultColor}" })
                    </div>

                    <!-- #endregion -->
                    <!-- #region Row 6-->


                    <div class="MainAreaItem2 even">
                        <h4 class="colTitle">Approver</h4>
                    </div>
                    <div class="MainAreaItem3 even">
                        @Html.TextBoxFor(o => o.Main.Approver, new { @class = "CanEdit even", @style = "width:35%" })
                        @Html.TextBoxFor(o => o.Main.ApproverName, new { @class = "even", @style = "width:65%" })
                        <input id="btnTechnician" onclick="OpenWindow('Technician')" type="button" class="OnlyEdit site-btn btn-blue" style="margin:0;border:0;" value="..." />
                    </div>

                    <div class="MainAreaItem even">
                        <h4 class="colTitle">Remark</h4>

                    </div>
                    <div class="MainAreaItem even">
                        @Html.TextBoxFor(o => o.Main.Remark, new { @class = "CanEdit even", @style = "width:100%" })
                    </div>

                    <div class="MainAreaItem even">
                        <h4 class="colTitle">Last Upadate</h4>

                    </div>
                    <div class="MainAreaItem even">
                        @Html.TextBoxFor(o => o.Main.LastUpadate, new { @class = "even", @style = "width:100%" })
                    </div>
                    <!-- #endregion -->
                    <!-- #region Row 7-->

                    <div class="MainAreaItem2 odd">
                        <h4 class="colTitle">Preparer</h4>

                    </div>
                    <div class="MainAreaItem3 odd">
                        @Html.TextBoxFor(modelItem => Model.Main.Preparer, new { @style = "width:30%", @class = "inputPreparer odd", @disabled = "disabled" })
                        @Html.TextBoxFor(modelItem => Model.Main.PreparerName, new { @style = "width:55%", @disabled = "disabled", @class = "odd" })
                        <input id="btnPreparerSelectItem" type="button" class="CanEdit site-btn btn-blue btnPreparerSelectItem" style="margin:0;border:0;" value="..." />
                    </div>


                    <div class="MainAreaItem odd">
                    </div>
                    <div class="MainAreaItem odd"></div>


                    <div class="MainAreaItem odd">
                    </div>
                    <div class="MainAreaItem odd"> </div>

                    <!-- #endregion -->
                </div>

                    @*表身*@
                    <div class="bodyDiv">

                        <div class="detailDataDiv">
                            <br />
                            <div class="DetailDataArea">
                                <!--#region Head-->
                                <!--#endregion-->


                                @if (Model.DetailList != null && Model.DetailList.Count > 0)
                                {
                                    int DetailListIdx = 0;
                                    int TimeListIdx = 0; // 用於辨識畫面TimeList每一筆資料的Key值，起始和DB的TimeList idx一樣，可以跳號(例如1、2、3、5)
                                    int SpecimenListIdx = 0;
                                    foreach (var detail in Model.DetailList)
                                    {
                                        var specimenList = Model.SpecimenList.Where(o => o.DetailType == detail.Type);
                                        int idxSpecimen = 1;
                                        string tabDivID = $"tab-Change{detail.Type}";
                                        string anotherType = detail.Type == "Before" ? "After" : "Before";

                                        @Html.Hidden($"DetailList[{DetailListIdx}].ReportNo", detail.ReportNo, new { @class = "", @style = "width:100%" })
                                        @Html.Hidden($"DetailList[{DetailListIdx}].Ukey", detail.Ukey, new { @class = "", @style = "width:100%" })
                                        @Html.Hidden($"DetailList[{DetailListIdx}].Type", detail.Type, new { @class = "", @style = "width:100%" })

                                        foreach (var specimen in specimenList)
                                        {
                                            <div class="divSpecimenChart" SpecimenID="@specimen.SpecimenID" DetailType="@specimen.DetailType" style="background-color: wheat; ">
                                                <canvas class="SpecimenChart" SpecimenID="@specimen.SpecimenID" DetailType="@specimen.DetailType"></canvas>
                                            </div>
                                        }
                                        <div class="divDetailType" detailType="@detail.Type">

                                            <div id="@tabDivID">
                                                <ul class="tab-title">
                                                    @foreach (var specimen in specimenList)
                                                    {
                                                        string linkText = $"#tab0{detail.Type}{idxSpecimen}";
                                                        string active = idxSpecimen == 1 ? "active" : string.Empty;
                                                        <li link="@linkText" class="@active">@specimen.SpecimenID</li>
                                                        idxSpecimen++;
                                                    }
                                                </ul>
                                            </div>

                                            @{
                                                int IdxDivID = 1;
                                            }
                                            @foreach (var specimen in specimenList)
                                            {
                                                string specimenID = specimen.SpecimenID;
                                                var timeList = Model.TimeList.Where(o => o.DetailType == detail.Type && o.SpecimenID == specimenID);
                                                //var rateList = Model.RateList.Where(o => o.DetailType == detail.Type && o.SpecimenID == specimenID);
                                                string divID = $"tab0{detail.Type}{IdxDivID}";
                                                string typeColor = detail.Type == "Before" ? "aquamarine" : "darksalmon";
                                                string specimenColor = detail.Type == "Before" ? "aquamarine" : "darksalmon";
                                                switch (specimen.SpecimenID)
                                                {
                                                    case "Specimen 1":
                                                        specimenColor = "RGB(234, 182, 248)";
                                                        break;
                                                    case "Specimen 2":
                                                        specimenColor = "RGB(214, 162, 228)";
                                                        break;
                                                    case "Specimen 3":
                                                        specimenColor = "RGB(194, 142, 208)";
                                                        break;
                                                    case "Specimen 4":
                                                        specimenColor = "RGB(174, 122, 188)";
                                                        break;
                                                    case "Specimen 5":
                                                        specimenColor = "RGB(154, 102, 168)";
                                                        break;
                                                    default:
                                                        break;
                                                }

                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].Ukey", specimen.Ukey, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].SpecimenID", specimen.SpecimenID, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].DetailUkey", specimen.DetailUkey, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].DetailType", specimen.DetailType, new { @class = "", @style = "width:100%" })
                                                @Html.Hidden($"SpecimenList[{SpecimenListIdx}].DetailUkey", specimen.DetailUkey, new { @class = "", @style = "width:100%" })


                                                <div id="@divID" class="tab-inner">
                                                    <div class="divTabInnerBlank">
                                                        <button onclick="GotoType('@anotherType')" type="button" style="margin:0;min-width:0;width:100%;" class="btn btn-blue">
                                                            To
                                                            <br />
                                                            @anotherType
                                                            <br />
                                                            Wash
                                                        </button>
                                                        <hr />

                                                        <button onclick="SpecimenChartToggle('@specimen.DetailType','@specimen.SpecimenID')" type="button" style="margin:0;min-width:0;width:100%;" class="btn btn-blue btnShowChart">
                                                            chart
                                                        </button>
                                                    </div>
                                                    <div class="divTabInnerRight">
                                                        <div class="divTime">
                                                            <!--#region Before Result(g/h) -->
                                                            <div class="divTime20 colHead" style="background-color:@typeColor">
                                                                @detail.Type Result(g/h)
                                                            </div>
                                                            <div class="divTime20">
                                                                @Html.TextBox($"SpecimenList[{SpecimenListIdx}].RateAverage", specimen.RateAverage, new
                                                                {
                                                                   @class = "RateAverage",
                                                                   @style = $"width:100%;background-color:{specimenColor};",
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                               })
                                                            </div>
                                                            <div class="divTime20" style="width:60%;"></div>
                                                            <!--#endregion-->

                                                            <!--#region Specimen Mass(g) -->
                                                            <div class="divTime20 colHead" style="background-color:@typeColor">
                                                                Specimen Mass(g)
                                                            </div>
                                                            <div class="divTime20">
                                                                @*<input  style="width:100%" type="text" value="@timeList.FirstOrDefault().Mass" readonly="readonly">*@
                                                                @Html.TextBox($"SpecimenMassG[{SpecimenListIdx}]", timeList.Where(o => o.IsInitialMass).FirstOrDefault().Mass, new
                                                                {
                                                                   @class = "SpecimenMassG",
                                                                   @style = $"width:100%;background-color:{specimenColor};",
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                                   @readonly="readonly",
                                                               })
                                                            </div>
                                                            <div class="divTime20" style="width:60%;"></div>
                                                            <!--#endregion-->

                                                            <div class="divTime10 colHead">
                                                                Time
                                                            </div>
                                                            <div class="divTime10 colHead">
                                                                Mass
                                                            </div>
                                                            <div class="divTime30 colHead">
                                                                Evaporation (g)
                                                            </div>

                                                            <div class="divTime40 colHead">
                                                                Last Update
                                                            </div>
                                                            <div class="divTime10 colHead">
                                                                Delete
                                                            </div>
                                                            @foreach (var time in timeList)
                                                            {
                                                                <div class="divTime10 TimeListRow" DomTimeListIdx="@TimeListIdx">
                                                                    @*TimeList[0]、TimeList[1]，這邊的索引是需要和後端Model Binding的TimeList 索引，不可跳號*@
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].Ukey", time.Ukey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].SpecimenUkey", time.SpecimenUkey, new { @class = "", @style = "width:100%" })
                                                                    @*@Html.Hidden($"TimeList[{TimeListIdx}].Time", time.Time, new { @class = "", @style = "width:100%" })*@
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].InitialTime", time.InitialTime, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].InitialTimeUkey", time.InitialTimeUkey, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].IsInitialMass", time.IsInitialMass, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].DetailType", time.DetailType, new { @class = "", @style = "width:100%" })
                                                                    @Html.Hidden($"TimeList[{TimeListIdx}].SpecimenID", time.SpecimenID, new { @class = "", @style = "width:100%" })

                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].Time", time.Time, new
                                                                    {
                                                                        @class = "Time",
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                                   @style = "width:100%"
                                                                    })
                                                                </div>
                                                                <div class="divTime10 TimeListRow" DomTimeListIdx="@TimeListIdx">
                                                                    @*@time.Mass*@
                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].Mass", time.Mass, new
                                                               {
                                                                   @class = "CanEdit Mass",
                                                                   @style = "width:100%",
                                                                   @Time = time.Time,
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                                   @IsInitialMass = time.IsInitialMass,
                                                                   @onchange = $@"value=MassCheck(value);AutoUpdateEvaporation (this);"

                                                               })
                                                                </div>
                                                                <div class="divTime30 TimeListRow" DomTimeListIdx="@TimeListIdx">
                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].Evaporation", time.Evaporation, new
                                                               {
                                                                   @class = "Evaporation",
                                                                   @style = "width:100%",
                                                                   @DetailType = detail.Type,
                                                                   @SpecimenID = specimen.SpecimenID,
                                                                   @InitialTime = time.InitialTime,
                                                                   @Time = time.Time,
                                                                   @parentTabID = divID
                                                               })

                                                                </div>
                                                                <div class="divTime40 TimeListRow" DomTimeListIdx="@TimeListIdx">
                                                                    @Html.TextBox($"TimeList[{TimeListIdx}].LastUpadate", time.LastUpadate, new { @class = "", @style = "width:100%" })
                                                                </div>
                                                                <div class="divTime10 TimeListRow" DomTimeListIdx="@TimeListIdx">
                                                                    <input type="hidden" class="detailTimeListIdx" name="name" value="@TimeListIdx" />
                                                                    @if (time.Time > 0)
                                                                    {
                                                                        <img class="detailDelete" src="~/Image/Icon/Delete.png" width="30" style="min-width: 30px" />
                                                                    }

                                                                </div>
                                                                TimeListIdx++;
                                                            }
                                                        </div>
                                                    </div>

                                                </div>
                                                SpecimenListIdx++;
                                                IdxDivID++;
                                            }
                                        </div>
                                        DetailListIdx++;
                                    }

                                }
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    }
</div>




<script type="text/javascript">

    var msg = new MessagerAlert();
    var EditType = "@Model.Main.EditType";
    var EditMode;

    // 紀錄每次點擊的tab，用於後續鎖定
    let focusObj = {
        DetailType: 'Before',
        BeforeSpecimenID: 'Specimen 1',
        AfterSpecimenID: 'Specimen 1'
    };
    let MaxTimeListModelIdx = @MaxTimeListIdx;
    let ttlSpecimenCount = 0;


    var DataBeforeSpecimen1 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 1").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 1',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 1").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataBeforeSpecimen2 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 2").Select(o=>o.Time).OrderBy(o=>o).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 2',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 2").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataBeforeSpecimen3 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 3").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 3',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 3").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataBeforeSpecimen4 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 4").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 4',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 4").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataBeforeSpecimen5 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 5").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 5',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="Before" && o.SpecimenID== "Specimen 5").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen1 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 1").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 1',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 1").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen2 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 2").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 2',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 2").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen3 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 3").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 3',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 3").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen4 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 4").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 4',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 4").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };
    var DataAfterSpecimen5 = {
        labels: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType =="After" && o.SpecimenID== "Specimen 5").Select(o=>o.Time).ToList()))],  //Time
        datasets: [
            {
                label: 'Specimen 5',
                data: [@Html.Raw(String.Join(",", Model.TimeList.Where(o=>o.DetailType == "After" && o.SpecimenID== "Specimen 5").OrderBy(o=>o.Time).Select(o=>o.Evaporation).ToList()))],
                borderColor: window.chartColors.red,
            }
        ]
    };

    // 建立資料模型
    let data = {
        name: 'John Doe',
        age: 25
    };

    $(function () {
        EditMode = false;

        IsEditModeChange();
        if (EditType == 'New') {
            EditMode = true;
            $("#SaveSubmit").attr("name", "Action:NewSave");
            IsEditModeChange();
        }
        QueryBind();
        tabChange();
        InitChart();
        GotoType('Before');
        IsInitialMassSync();
        @Html.Raw(Model.ErrorMessage)
    });

    function IsInitialMassSync() {
        let masses = $('.Mass');

        $(masses).each(function (index, data) {
            var massIpt = this;

            $(massIpt).on('input', function () {
                let isInitialMass = $(this).attr('IsInitialMass');
                if (isInitialMass == 'True') {
                    let detailtype = $(this).attr('detailtype');
                    let specimenid = $(this).attr('specimenid');
                    let targetObj = $(`.SpecimenMassG[detailtype="${detailtype}"][specimenid="${specimenid}"]`);
                    $(targetObj).val(MassCheck($(this).val()));
                }
            });
        });
    }

    function SpecimenChartToggle(detailType, specimenID) {
        $(`.divSpecimenChart`).hide();
        $(`.divSpecimenChart[DetailType='${detailType}'][SpecimenID='${specimenID}']`).toggle();
    }

    function InitChart() {
        // Before Specimen 1
        if (DataBeforeSpecimen1.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objBeforeSpecimen1 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 1']")[0].getContext('2d');
            $.myBar = new Chart(objBeforeSpecimen1, {
                type: 'line',
                data: DataBeforeSpecimen1,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'left',
                        },
                        title: {
                            display: false,
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // Before Specimen 2
        if (DataBeforeSpecimen2.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objBeforeSpecimen2 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 2']")[0].getContext('2d');
            $.myBar = new Chart(objBeforeSpecimen2, {
                type: 'line',
                data: DataBeforeSpecimen2,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // Before Specimen 3
        if (DataBeforeSpecimen3.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objBeforeSpecimen3 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 3']")[0].getContext('2d');
            $.myBar = new Chart(objBeforeSpecimen3, {
                type: 'line',
                data: DataBeforeSpecimen3,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // Before Specimen 4
        if (DataBeforeSpecimen4.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objBeforeSpecimen4 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 4']")[0].getContext('2d');
            $.myBar = new Chart(objBeforeSpecimen4, {
                type: 'line',
                data: DataBeforeSpecimen4,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // Before Specimen 5
        if (DataBeforeSpecimen5.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objBeforeSpecimen5 = $(".SpecimenChart[DetailType='Before'][SpecimenID='Specimen 5']")[0].getContext('2d');
            $.myBar = new Chart(objBeforeSpecimen5, {
                type: 'line',
                data: DataBeforeSpecimen5,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }


        // After Specimen 1
        if (DataAfterSpecimen1.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objAfterSpecimen1 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 1']")[0].getContext('2d');
            $.myBar = new Chart(objAfterSpecimen1, {
                type: 'line',
                data: DataAfterSpecimen1,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // After Specimen 2
        if (DataAfterSpecimen2.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objAfterSpecimen2 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 2']")[0].getContext('2d');
            $.myBar = new Chart(objAfterSpecimen2, {
                type: 'line',
                data: DataAfterSpecimen2,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // After Specimen 3
        if (DataAfterSpecimen3.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objAfterSpecimen3 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 3']")[0].getContext('2d');
            $.myBar = new Chart(objAfterSpecimen3, {
                type: 'line',
                data: DataAfterSpecimen3,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // After Specimen 4
        if (DataAfterSpecimen4.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objAfterSpecimen4 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 4']")[0].getContext('2d');
            $.myBar = new Chart(objAfterSpecimen4, {
                type: 'line',
                data: DataAfterSpecimen4,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
        // After Specimen 5
        if (DataAfterSpecimen5.labels.length > 0) {
            ttlSpecimenCount += 1;
            var objAfterSpecimen5 = $(".SpecimenChart[DetailType='After'][SpecimenID='Specimen 5']")[0].getContext('2d');
            $.myBar = new Chart(objAfterSpecimen5, {
                type: 'line',
                data: DataAfterSpecimen5,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'top',
                        },
                        title: {
                            display: false,
                            text: 'Chart.js Line Chart'
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {

                                beginAtZero: true,
                                //fontSize: 20,
                                stepSize: 20,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: "Evaporation(g)",
                                //fontSize: 25
                            }
                        }],
                        xAxes: [
                            {
                                ticks: {
                                    //fontSize: 20,
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Time(min)",
                                    //fontSize: 25
                                }
                            }
                        ]
                    },
                },
            });
        }
    }

    function IsEditModeChange() {

        // 控制項重置
        ClickEventBind();
        BlurEventBind();
        $('.toolBarItem').removeClass("canUse");
        //$("#Main_SubmitDateText").removeClass('date-picker');

        if ($('#Main_ReportNo').val() == '' && EditType != 'New') {

            // 可編輯欄位關閉
            $('.MainArea select ,.tab-innerItem1 select ,.tab-innerItem2 select').attr("disabled", true);
            $('.MainArea input ,.MainArea textarea ,.tab-innerItem1 input ,.tab-innerItem2 input').attr("readonly", "readonly");
            $(".btnShowChart").attr("disabled", true);
        }
        else {
            //根據模式區分
            if (EditMode) {
                // 可編輯欄位開啟
                $('.CanEdit').removeAttr("disabled");
                $('.CanEdit').removeAttr("readonly");

                // 圖表只有非編輯模式可以用
                $(".btnShowChart").attr("disabled", true);

                if ($("#Main_Status").val() != '') {
                    $('#Main_OrderID').attr("readonly", "readonly");
                }

                // 編輯模式可用功能開啟
                $('#Save, #Undo ,#Picture ,#NewItem').addClass("canUse");
                $(".detailDelete").show();
                $("#Main_SubmitDateText").addClass('date-picker');
                $('.date-picker').datepicker({ changeYear: true, changeMonth: true, currentText: "Now" });
                $('.inputPreparer').removeAttr("disabled");
                DetailButtonBind();
            }
            else {
                // 可編輯欄位關閉
                $('.divTime10 input ,.divTime20 input ,.divTime30 input ,.divTime40 input ,.divRateInner1 input').attr("readonly", "readonly");
                $('.MainArea input ,.MainAreaItem input').attr("readonly", "readonly");
                $(".detailDelete").hide();
                $(".inputPreparer").attr("disabled", "disabled");
                // 圖表只有非編輯模式可以用
                $(".btnShowChart").removeAttr("disabled");

                // 未Confirmed可用功能開啟
                if ($("#Main_Status").val() == 'New') {
                    $('#Encode').addClass("canUse");
                    $('#Edit , #Delete ,#Excel ,#PDF ,#SendtoMR ,#Picture ,#Exit').addClass("canUse");
                }
                else {
                    // Confirmed後的可用功能開啟
                    $('#Amend').addClass("canUse");
                    $('#Excel ,#PDF ,#SendtoMR ,#Picture ,#Exit').addClass("canUse");
                }
            }

        }

        // 移除不可用功能的事件
        $('.toolBarItem:not(.canUse)').unbind('click');
    }
    function DetailButtonBind()
    {
        $('.inputPreparer').unbind('blur').on('blur', function () {
            var targetID = $(this).closest('tr').attr('idx');

            if ($(this).val() == "") {
                $("#Main_Preparer").val('');
                $("#Main_PreparerName").val('');
                return;
            }

            $.ajax({
                url: "@Url.Action("Pass1List", "PublicWindow",new { Area=""})",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Main_Preparer").val('');
                        $("#Main_PreparerName").val('');
                        msg.WithError('Approver Not Found');
                    }
                    else {
                        $("#Main_Preparer").val(data[0].ID);
                        $("#Main_PreparerName").val(data[0].Name);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $('.btnPreparerSelectItem').unbind('click').on('click', function () {
            var targetID ='Main_Preparer';
            var para = "?TargetID=" + targetID;
            window.open('@Url.Action("Pass1List", "PublicWindow",new{Area=""})' + para, 'Roll', config = 'toolbar=no,status=no,location=no,width=950,height=650');
        });
    }
    function QueryBind() {

        $('#btnQuery').on('click', function () {
            if ($('#Request_BrandID').val() == '' || $('#Request_SeasonID').val() == '' || $('#Request_StyleID').val() == '' || $('#Request_Article').val() == '') {
                msg.WithError("Brand, Season ,Style and Article cannot be empty");
                return false;
            }
        });

        $("#Request_BrandID").blur(function () {
            $.ajax({
                url: "@Url.Action("BrandList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_BrandID").val('');
                        msg.WithError('Brand Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Request_SeasonID").blur(function () {
            var BrandID = $('#Request_BrandID').val();
            $.ajax({
                url: "@Url.Action("SeasonList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_SeasonID").val('');
                        msg.WithError('Season Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Request_StyleID").blur(function () {
            var BrandID = $('#Request_BrandID').val();
            var SeasonID = $('#Request_SeasonID').val();
            $.ajax({
                url: "@Url.Action("StyleList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: SeasonID, StyleID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_StyleID").val('');
                        msg.WithError('Style Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Request_Article").blur(function () {
            var BrandID = $('#Request_BrandID').val();
            var SeasonID = $('#Request_SeasonID').val();
            var StyleID = $('#Request_StyleID').val();
            $.ajax({
                url: "@Url.Action("ArticleList", "PublicWindow", new { Area = "" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: SeasonID, StyleID: StyleID, Article: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Request_Article").val('');
                        msg.WithError('Article Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });
    }

    function OpenWindow(WindowType) {
        if (WindowType == "BrandID") {
            window.open('@Url.Action("BrandList", "PublicWindow", new { Area = "" })', WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "SeasonID") {

            if ($('#Request_BrandID').val() == '' ) {
                msg.WithError('Please input brand  first.');
                return;
            }
            var para = "?BrandID=" + $('#Request_BrandID').val();
            window.open('@Url.Action("SeasonList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "StyleID") {

            if ($('#Request_BrandID').val() == '' || $('#Request_SeasonID').val() == '') {
                msg.WithError('Please input brand and season first.');
                return;
            }
            var para = "?BrandID=" + $('#Request_BrandID').val() + "&SeasonID=" + $('#Request_SeasonID').val();
            window.open('@Url.Action("StyleList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "Article") {

            if ($('#Request_BrandID').val() == '' || $('#Request_SeasonID').val() == '' || $('#Request_StyleID').val() == '') {
                msg.WithError('Please input brand season ,and Style first.');
                return;
            }
            var para = "?TargetID=Request_Article&OrderID=&StyleUkey=0&BrandID=" + $('#Request_BrandID').val() + "&SeasonID=" + $('#Request_SeasonID').val() + "&StyleID=" + $('#Request_StyleID').val();
            window.open('@Url.Action("ArticleList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "FabricRefNo" && EditMode) {

            if ($('#Main_OrderID').val() == '') {
                msg.WithError('Please input SP# first.');
                return;
            }
            var para = "?TargetID=Main_FabricRefNo&OrderID=" + $('#Main_OrderID').val();
            window.open('@Url.Action("FabricRefNoList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=800,height=750');
        }
        if (WindowType == "AccRefNo" && EditMode) {

            if ($('#Main_OrderID').val() == '') {
                msg.WithError('Please input SP# first.');
                return;
            }
            var para = "?TargetID=Main_AccRefNo&OrderID=" + $('#Main_OrderID').val();
            window.open('@Url.Action("AccRefNoList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=800,height=750');
        }
        if (WindowType == "InkType" && EditMode) {

            if ($('#Main_ItemTested').val() != 'Printing') {
                return;
            }

            if ($('#Main_BrandID').val() == '' || $('#Main_SeasonID').val() == '' || $('#Main_StyleID').val() == '') {
                msg.WithError('Please input SP# first.');
                return;
            }
            var para = `?TargetID=Main_TypeOfPrint&BrandID=${$('#Main_BrandID').val()}&SeasonID=${$('#Main_SeasonID').val()}&StyleID=${$('#Main_StyleID').val()}`;
            window.open('@Url.Action("InkTypeList", "PublicWindow", new { Area = "" })' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=800,height=750');
        }
        if (WindowType == "Technician" && EditMode) {

            var para = "?TargetID=Main_Approver";
            window.open('@Url.Action("Pass1List", "PublicWindow",new{Area=""})' + para,'Approver',config='toolbar=no,status=no,location=no,width=1000,height=650');
        }
    }

    function GetBrandList(BrandID) {
        $("#Request_BrandID").val(BrandID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetSeasonList(SeasonID) {
        $("#Request_SeasonID").val(SeasonID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetStyleList(StyleID) {
        $("#Request_StyleID").val(StyleID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetArticleList(Article) {
        $("#Request_Article").val(Article);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetFabricRefNoList(FabricRefNoData) {
        $("#Main_Seq").val(FabricRefNoData.Seq);
        $("#Main_Seq1").val(FabricRefNoData.Seq1);
        $("#Main_Seq2").val(FabricRefNoData.Seq2);
        $("#Main_FabricRefNo").val(FabricRefNoData.Refno);
        $("#Main_FabricColor").val(FabricRefNoData.Color);
        // 在這邊取得開窗選擇的FabricRefNoData，進行後續動作

        // Roll Dyelot可能改變，因此清空表身
        // $(".colBody").remove();
    }

    function GetAccRefNoList(AccRefNoData) {
        //$("#Main_Seq").val(FabricRefNoData.Seq);
        //$("#Main_Seq1").val(FabricRefNoData.Seq1);
        //$("#Main_Seq2").val(FabricRefNoData.Seq2);
        $("#Main_AccRefNo").val(AccRefNoData.Refno);
        $("#Main_AccColor").val(AccRefNoData.Color);
        // 在這邊取得開窗選擇的FabricRefNoData，進行後續動作

        // Roll Dyelot可能改變，因此清空表身
        // $(".colBody").remove();
    }

    function GetInkTypeList(InkTypeData) {
        $("#Main_TypeOfPrint").val(InkTypeData.InkType);
        // 在這邊取得開窗選擇的FabricRefNoData，進行後續動作

        // Roll Dyelot可能改變，因此清空表身
        $(".colBody").remove();
    }

    function GetPicture(data) {
        $('#Main_TestBeforePicture').val(data.BeforePicture.replace("data:image/png;base64,", ""));
        $('#Main_TestAfterPicture').val(data.AfterPicture.replace("data:image/png;base64,", ""));
    }

    function ClickEventBind() {

        $('.toolBarItem ,.detailDelete').unbind('click');

        $('#btnNew').on('click', function () {
            window.location = '@Url.Action("New")';
        });

        $('#Edit').on('click', function () {
            EditMode = true;
            IsEditModeChange();
        });
        $('#Save').on('click', function () {
            if (EditMode == false) {
                return;
            }

            if ($('#Main_OrderID').val() == '' || $('#Main_BrandID').val() == '' || $('#Main_SeasonID').val() == '' || $('#Main_StyleID').val() == '' || $('#Main_Article').val() == '') {
                msg.WithError("SP#, Brand, Season ,Style and Article cannot be empty");
                return false;
            }

            $("#SaveSubmit").click();

        });

        $('#Undo').on('click', function () {
            if (EditType == 'New') {
                window.location.href="@Url.Action("Index")";
            }
            if ($("#Main_ReportNo").val() != '') {
                // 重新Query 一次Detail
                $("#btnQuery").click();
            }
            else {
                EditMode = false;
                EditType = '';
                IsEditModeChange();
            }
        });

        $('#Delete').on('click', function (e) {
            if (EditMode == true) {
                return;
            }

            if (EditMode == false && $('#Main_ReportNo').val() != null && $('#Main_ReportNo').val() != "" && $('#Main_ReportNo').val() != "0") {
                e.preventDefault();
                msg.WithConfirm('Do you want to delete the data ?',
                    function () {
                        $("#DeleteSubmit").click();
                    }, null);
            }
        });

        $('#Picture').on('click', function () {
            var para = "?Title=" + $('.page-header span').html() + "&EditMode=" + EditMode;
            para += "&" + "Table=EvaporationRateTest";
            para += "&" + "TargetBeforeColumn=Main_TestBeforePicture";
            para += "&" + "TargetAfterColumn=Main_TestAfterPicture";
            para += "&" + "BeforeColumn=TestBeforePicture";
            para += "&" + "AfterColumn=TestAfterPicture";
            para += "&" + "PKey_1=ReportNo";
            para += "&" + "PKey_1_Val=" + $('#Main_ReportNo').val();
            window.open('@Url.Action("PictureList", "PublicWindow",new { Area=""})' + para, 'Picture List', config = 'toolbar=no,status=no,location=no,width=1024,height=750');
        });

        $('#SendtoMR').on('click', function () {

            if ($("#Main_ReportNo").val() == '') {
                return false;
            }
            var para = '?Subject=@Model.Main.MailSubject';
            window.open('@Url.Action("SendMailer", "SendMailAttachfiles", new { Area=""})' + para, 'SendMail', config = 'toolbar=no,status=no,location=no,width=800,height=400');
        });

        $("#Excel").on("click", function () {

            msg.WithInfoTimer("Report Generating...");

            $.ajax({
                url: "@Url.Action("ToExcel")",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val()}),
                async: true,
                success: function (data) {
                    if (data.Result) {
                        window.location.href = data.reportPath;
                    }
                    else {
                        msg.WithError(data.ErrorMessage);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                    msg.WithError("Error generating report.");
                }
            });
        });

        $("#PDF").on("click", function () {

            msg.WithInfoTimer("Report Generating...");

            $.ajax({
                url: "@Url.Action("ToPDF")",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val()}),
                async: true,
                success: function (data) {
                    if (data.Result) {
                        window.location.href = data.reportPath;
                    }
                    else {
                        msg.WithError(data.ErrorMessage);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                    msg.WithError("Error generating report.");
                }
            });
        });

        if ($("#Main_Status").val() == "New") {

            $('#Encode').on('click', function () {

                $.ajax({
                    url: "@Url.Action("Encode")",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val(), Result: $("#Main_Result").val() }),
                    async: false,
                    success: function (data) {
                        if (data.Result) {
                            if (data.Action == "FailMail()") {
                                FailMail();
                            }
                            else {
                                msg.WithSuccesCheck("Success", function () {
                                    $("#btnQuery").click();
                                });
                            }
                        }
                        else {
                            msg.WithError(data.ErrMsg);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.responseText);
                    }
                });
            });
        }

        if ($("#Main_Status").val() != "New") {

            $('#Amend').on('click', function () {

                $.ajax({
                    url: "@Url.Action("Amend")",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ ReportNo: $('#Main_ReportNo').val(), Result: $("#Main_Result").val() }),
                    async: false,
                    success: function (data) {
                        if (data.Result) {
                            msg.WithSuccesCheck("Success", function () {
                                $("#btnQuery").click();
                            });
                        }
                        else {
                            msg.WithError(data.ErrMsg);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.responseText);
                    }
                });
            });
        }

        $('.detailDelete').on('click', function () {
            if (!EditMode) return;

            const $btn = $(this);
            msg.WithConfirm('Do you want to delete the data ?', () => {
                // 取得刪除圖示所在的 DOM 索引
                const deleteIdx = parseInt($btn.parent().find('.detailTimeListIdx').val(), 10);

                // 取得要刪除的那一行中，.Time 元素的相關資訊
                const $timeElem = $(`.TimeListRow[domtimelistidx=${deleteIdx}]:first > .Time`);
                const detailType = $timeElem.attr('detailtype');
                const specimenId = $timeElem.attr('specimenid');
                const timeValue = $timeElem.val();

                // 刪除該 DOM 索引的所有 TimeListRow
                $(`.TimeListRow[domtimelistidx=${deleteIdx}]`).remove();

                // 更新後續元素的 DOM 索引
                AdjustElementsDomIndex('TimeList', deleteIdx);

                // 更新大於被刪除索引的時間數值
                AutoUpdateTime(detailType, specimenId, timeValue);

                // 減少全域計數器
                MaxTimeListModelIdx -= 1;
            });
        });

        $('#NewItem').on('click', function () {
            AddDetailRow();
        });
    }

    function BlurEventBind() {

        $('input ,select').unbind('blur').unbind('change');

        $("#Main_OrderID").on("change", function () {
            if (EditMode == false) {
                return;
            }
            // 重設Article下拉選單
            $("#Main_Article").empty();

            if ($(this).val() == '') {
                $("#Main_OrderID").val('');
                $("#Main_BrandID").val('');
                $("#Main_SeasonID").val('');
                $("#Main_StyleID").val('');
                $("#Main_Article").val('');
                return;
            }

            let orderID = $(this).val();


            $.ajax({
                url: "@Url.Action("OrderIDCheck")",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ orderID: orderID }),
                async: true,
                success: function (data) {
                    if (data.Result == false || data.ErrMsg != "") {

                        $("#Main_OrderID").val('');
                        $("#Main_BrandID").val('');
                        $("#Main_SeasonID").val('');
                        $("#Main_StyleID").val('');
                        $("#Main_Articl").val('');

                        msg.WithError(data.ErrMsg);
                    }
                    else {
                        // 塞入Article下拉選單
                        $("#Main_Article").append(data.ArticleSource);

                        $("#Main_BrandID").val(data.Main.BrandID);
                        $("#Main_SeasonID").val(data.Main.SeasonID);
                        $("#Main_StyleID").val(data.Main.StyleID);

                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });

        });

        $("#Main_ItemTested").on("change", function () {
            if (EditMode == false) {
                return;
            }
            let itemTested = $(this).val();

            if (itemTested != 'Printing') {
                $("#Main_TypeOfPrint").val('');
            }
        });

        $("#Main_SubmitDateText").on("change", function () {
            $("#Main_SubmitDate").val($("#Main_SubmitDateText").val());
        });

        $("#Main_Approver").on("blur", function () {
            if (EditMode == false) {
                return;
            }
            if ($(this).val() == "") {
                $("#Main_Approver").val('');
                $("#Main_ApproverName").val('');
                return;
            }

            $.ajax({
                url: "@Url.Action("Pass1List", "PublicWindow",new { Area=""})",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ ID:$(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Main_Approver").val('');
                        $("#Main_ApproverName").val('');
                        msg.WithError('Approver Not Found');
                    }
                    else
                    {
                        $("#Main_Approver").val(data[0].ID);
                        $("#Main_ApproverName").val(data[0].Name);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });

        });
    }

    function AddDetailRow() {

        //MaxRateListIdx += 1;
        MaxTimeListModelIdx += 1;
        //  必要參數

        var detailType = focusObj.DetailType;
        var specimenID = '';
        if (detailType == 'Before') {
            specimenID = focusObj.BeforeSpecimenID;
        }
        else {
            specimenID = focusObj.AfterSpecimenID;
        }

        let parentTabID = '';

        let evaporationList = $(`.Evaporation[detailType="${detailType}"][specimenID="${specimenID}"]`);
        let lastEvaporation = evaporationList[evaporationList.length - 1];

        // Time List 必要參數
        let lastTime = parseInt($(lastEvaporation).attr("Time")) + 3;
        if (lastTime > 60) {
            return;
        }
        let TimeListModelIdx = MaxTimeListModelIdx;
        let TimeListDomIdx = $('.TimeListRow').length / 5;
        parentTabID = $(lastEvaporation).attr("parentTabID");

        $.ajax({
            url: "@Url.Action("AddTimeRow")",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ parentTabID: parentTabID, detailType: detailType, specimenID: specimenID, TimeListModelIdx: TimeListModelIdx, TimeListDomIdx: TimeListDomIdx , lastTime: lastTime }),
            async: false,
            success: function (data) {
                $(`#${parentTabID} > .divTabInnerRight > .divTime`).append(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(xhr.responseText);
            },
        });

        msg.WithSuccess("Add Success");

        ClickEventBind();
        //AutoUpdateRate(detailType, specimenID);
        AutoUpdateAverageRate(detailType, specimenID);

    }

    function ReportNoChange(value) {
        $('#btnQuery').unbind('click').click();
    }

    function MassCheck(value) {
        if (parseFloat(value) >= 99.999) {
            return 99.999;
        }
        else if (parseFloat(value) < 0) {
            return 0;
        }
        else if (value == '') {
            return 0;
        }
        else if (isNaN(value)) {
            return 0;
        }

        return Number.parseFloat(value).toFixed(4);
    }

    function tabChange() {
        var $liBefore = $('#tab-ChangeBefore > ul.tab-title li');
        $($liBefore.eq(0).attr('link')).show();

        $($liBefore.eq(0).addClass('active').attr('link')).siblings('.tab-inner').hide();
        $liBefore.click(function () {
            $($(this).attr('link')).show().siblings('.tab-inner').hide();
            $(this).siblings('.active').removeClass('active');
            $(this).addClass('active');

            // 將當前點選的Type + Specimen 記錄下來
            focusObj.DetailType = "Before";
            focusObj.BeforeSpecimenID = $(this).text();
            $(".divSpecimenChart").hide();
        });

        var $liAfter = $('#tab-ChangeAfter > ul.tab-title li');
        $($liAfter.eq(0).attr('link')).show();

        $($liAfter.eq(0).addClass('active').attr('link')).siblings('.tab-inner').hide();
        $liAfter.click(function () {
            $($(this).attr('link')).show().siblings('.tab-inner').hide();
            $(this).siblings('.active').removeClass('active');
            $(this).addClass('active');

            // 將當前點選的Type + Specimen 記錄下來
            focusObj.DetailType = "After";
            focusObj.AfterSpecimenID = $(this).text();
            $(".divSpecimenChart").hide();
        });

    }

    function GotoType(type) {

        $(`.divDetailType[detailtype="${type}"]`).show();
        $(`.divDetailType[detailtype!="${type}"]`).hide();
        SpecimenChartToggle();
        focusObj.DetailType = type;
    }

    // 更新DOM身上的Index
    function AdjustElementsDomIndex(listName, indexToDelete) {

        // 取得所有 name 屬性以 "TimeList[" 開頭的元素
        const elementsToAdjust = $('[name^="' + listName + '["]');

        for (const obj of elementsToAdjust) {
            // 取得元素的目前 name 屬性
            const currentName = obj.getAttribute('name');

            // 從 name 屬性中提取索引
            const match = currentName.match(/\[(\d+)\]/);
            if (match) {
                const currentIndex = parseInt(match[1]);

                // 如果索引大於刪除的索引，則遞減索引
                if (currentIndex > indexToDelete) {
                    const newIndex = currentIndex - 1;

                    // 更新 name 屬性，將舊索引替換為新索引
                    const newName = currentName.replace('[' + currentIndex + ']', '[' + newIndex + ']');

                    // 更新 ID 属性
                    obj.setAttribute('name', newName);
                    obj.setAttribute('id', obj.getAttribute('id').replace('_' + currentIndex + '_', '_' + newIndex + '_'));
                }
            }

        }
    }

    // 更新指定元素 (Time、Evaporation 與 Mass) 的數值，若其當前值大於 updateFrom，則減少 3
    function AutoUpdateTime(detailType, specimenid, updateFrom) {
        const updateAttribute = (className, attrName) => {
            $(`.${className}[detailtype="${detailType}"][specimenid="${specimenid}"]`)
                .filter((_, elem) => parseFloat($(elem).attr(attrName)) > updateFrom)
                .each((_, elem) => {
                    const current = parseFloat($(elem).attr(attrName));
                    $(elem).attr(attrName, current - 3);
                });
        };

        updateAttribute("Time", "value");
        updateAttribute("Evaporation", "time");
        updateAttribute("Mass", "time");
    }

    // 更新蒸發值，依據是否為初始質量來決定計算方式，並呼叫更新平均值的函式
    function AutoUpdateEvaporation(updatedObj) {
        const $updated = $(updatedObj);
        const isInitialMass = $updated.attr("IsInitialMass");
        const specimenID = $updated.attr("SpecimenID");
        const detailType = $updated.attr("DetailType");
        const newVal = parseFloat($updated.val());

        // 計算差值並限制在 0 ~ 99.999 之間，並格式化為四位小數
        const computeEvap = (initial, current) => {
            const diff = initial - current;
            if (diff >= 99.999) return 99.999;
            if (diff < 0) return 0;
            return parseFloat(diff).toFixed(4);
        };

        if (isInitialMass === "True") {
            $(`.Evaporation[detailtype="${detailType}"][specimenID="${specimenID}"]`).each((_, elem) => {
                const time = $(elem).attr("Time");
                // 取得對應 Mass 元素 (取第一筆符合條件的)
                const $massObj = $(`.Mass[detailtype="${detailType}"][specimenID="${specimenID}"][Time="${time}"]`).first();
                const mass = parseFloat($massObj.val());
                const val = computeEvap(newVal, mass);
                $(elem).val(val);
            });
        } else {
            const time = $updated.attr("Time");
            $(`.Evaporation[detailtype="${detailType}"][specimenID="${specimenID}"][Time="${time}"]`).each((_, elem) => {
                const initialTime = $(elem).attr("InitialTime");
                const $initialMassObj = $(`.Mass[detailtype="${detailType}"][specimenID="${specimenID}"][Time="${initialTime}"]`).first();
                const initialMass = parseFloat($initialMassObj.val());
                const val = computeEvap(initialMass, newVal);
                $(elem).val(val);
            });
        }

        AutoUpdateAverageRate(detailType, specimenID);
    }

    // 依據所有 Time 與 Evaporation 的數值計算出斜率，並更新 RateAverage，再進一步更新最終平均
    function AutoUpdateAverageRate(detailType, specimenid) {
        const timeValueArray = $(`.Time[detailtype="${detailType}"][specimenid="${specimenid}"]`)
            .map((_, elem) => parseFloat($(elem).val()))
            .get();
        const evaporationValueArray = $(`.Evaporation[detailtype="${detailType}"][specimenid="${specimenid}"]`)
            .map((_, elem) => parseFloat($(elem).val()))
            .get();

        const slope = calculateSlope(timeValueArray, evaporationValueArray);
        $(`.RateAverage[detailtype="${detailType}"][specimenid="${specimenid}"]`).val(slope);
        AutoUpdateFinalAverage(detailType);
    }

    // 計算所有 RateAverage 的總和 (乘上 60) 再求平均，並更新 Main 區域的對應輸入框
    function AutoUpdateFinalAverage(detailType) {
        let sum = 0;
        let count = 0;
        $(`.RateAverage[detailtype="${detailType}"]`).each((_, elem) => {
            sum += parseFloat($(elem).val()) * 60;
            count++;
        });
        const avg = (sum / count).toFixed(4);
        $(`input[detailtype="Main${detailType}"]`).val(avg);
    }

    function calculateSlope(arrTime, arrEvaporation) {
        if (arrTime.length !== arrEvaporation.length || arrTime.length === 0) {
            //throw new Error("The input arrays must have the same non-zero length.");
            return 0;
        }

        // 計算 X 和 Y 的平均值
        const X = arrTime.reduce((sum, value) => sum + value, 0) / arrTime.length;
        const Y = arrEvaporation.reduce((sum, value) => sum + value, 0) / arrEvaporation.length;

        // 計算 (Time - X)*(Evaporation - Y) 的總和 和 (Time - X)^2 的總和
        let numeratorSum = 0; // 分子總和
        let denominatorSum = 0; // 分母總和

        for (let i = 0; i < arrTime.length; i++) {
            const timeDiff = arrTime[i] - X;
            const evaporationDiff = arrEvaporation[i] - Y;
            numeratorSum += timeDiff * evaporationDiff;
            denominatorSum += timeDiff ** 2;
        }

        // 檢查分母是否為 0，避免除以 0
        if (denominatorSum === 0) {
            // throw new Error("Division by zero: All time values are the same.");
            return 0;
        }

        // 計算斜率
        const slope = numeratorSum / denominatorSum;
        return Number.parseFloat(slope).toFixed(4);
    }

    function FailMail() {
        var para = "?Title=" + $('.page-header span').html() + "&FactoryID=@ViewBag.FactoryID&Type=BulkFGT";
        window.open('@Url.Action("TestFailMailList", "PublicWindow",new { Area=""})' + para, 'Mail List', config = 'toolbar=no,status=no,location=no,width=650,height=750');
    }

    function GetTestFailMailList(data) {
        var to = "";
        var cc = "";
        $.each(data, function (index, value) {
            to += value.To + ';';
            cc += value.CC + ';';
        });

        $.ajax({
            url: "@Url.Action("SendMail")",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ ReportNo: '@Model.Main.ReportNo', TO: to, CC: cc }),
            async: false,
            success: function (data) {
                if (data.result) {
                    msg.WithSuccesCheck("Success", function () {
                        $("#btnQuery").click();
                    });
                }
                else {
                    msg.WithWarningCheck(data.resultMsg, function () {
                        location.reload();
                    });
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // console.log(xhr.responseText);
                msg.WithWarningCheck(xhr.responseText, function () {
                    location.reload();
                });
            }
        });
    }
    function ExistsTestFailMailList() {
        $("#btnQuery").click();
    }

    function GetSendMailer(data) {
        var to = data.To;
        var cc = data.CC;
        var subject = data.Subject;
        var body = data.Body;
        var rawFiles = data.RawFiles;

        if (to != "") {

            let formData = new FormData();
            formData.append('ReportNo', '@Model.Main.ReportNo');
            formData.append('To', to);
            formData.append('CC', cc);
            formData.append('Subject', subject);
            formData.append('Body', body);

            $.each(rawFiles, function () {
                formData.append('Files', this);
            })

            $.ajax({
                url: "@Url.Action("SendMail")",
                type: 'POST',
                contentType: false,
                data: formData,
                async: false,
                processData: false,
                success: function (data) {
                    if (data.result) {
                        msg.WithSuccesCheck("Success", function () {
                            $("#btnQuery").click();
                        });
                    }
                    else {
                        msg.WithWarningCheck(data.resultMsg, function () {
                            location.reload();
                        });
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    // console.log(xhr.responseText);
                    msg.WithWarningCheck(xhr.responseText, function () {
                        location.reload();
                    });
                }
            });
        }
    }

    function GetPass1(data, targetID) {
        $('#' + targetID).val(data.ID);
        $('#' + targetID + "Name").val(data.Name );
    }
</script>