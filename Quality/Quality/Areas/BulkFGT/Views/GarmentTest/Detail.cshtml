@using DatabaseObject.ResultModel;

@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/ThirdParty/plugins/Tabs/nicepage.css" rel="stylesheet" />
<script src="~/ThirdParty/plugins/Tabs/nicepage.js"></script>

@model GarmentTest_Detail_Result

<style type="text/css">
    .content-scroll {
        height: calc( 95vh - 200px );
    }

    .inner-scroll {
        height: calc( 95vh - 200px );
    }

    #tab-Change {
        width: 92vw;
    }

        #tab-Change > ul {
            display: block;
            margin: 0;
            list-style: none;
        }

    .tab-title {
        list-style: none;
    }

    #tab-Change > ul > li {
        display: inline-block;
        vertical-align: top;
        margin: 0 -1px -1px 0;
        border: 1px solid #BCBCBC;
        height: 4vh;
        line-height: 25px;
        background: #cdcdcd;
        padding: 0 15px;
        list-style: none;
        box-sizing: border-box;
    }

        #tab-Change > ul > li a {
            color: #000;
            text-decoration: none;
        }

        #tab-Change > ul > li.active {
            border-bottom: 1px solid #fff;
            background: #fff;
        }

    #tab-Change > .tab-inner {
        clear: both;
        color: #000;
    }

    .DataTable {
        width: 92vw;
        font-size: 1rem;
        font-weight: bold;
        border: solid 1px black;
        background-color: white;
    }

        .DataTable > tbody > tr:nth-of-type(odd) {
            background-color: #ffffff;
        }

        .DataTable > tbody > tr:nth-of-type(even) {
            background-color: #F0F2F2;
        }

        .DataTable > tbody > tr > td {
            border: solid 1px gray;
            padding: 1em;
            text-align: left;
            vertical-align: middle;
        }

    .White {
        color: white !important;
    }

    .Black {
        color: black !important;
    }

    .IsEditMode {
        color: white !important;
        cursor: pointer;
    }

    .IsEditModeQuery {
        color: gray !important;
        cursor: no-drop;
    }

    .bigSize {
        width: 3em;
        height: 2em;
    }

    .ReportAction {
        width: 29vw;
        height: 29vh;
        position: absolute;
        left: 30vw;
        top: 19vh;
        z-index: 1042;
        background-color: #c8eac8;
        border: solid 1px black;
        font-size: 1.4em;
        font-weight: bold;
    }

        .ReportAction > table > tbody > tr > td {
            padding: 0.5em;
        }

            .ReportAction > table > tbody > tr > td > input[type=button] {
                cursor: pointer;
            }
</style>

<div class="main-content">
    <header class="page-header">
        <h3>
            <i class="icon-users"></i><span>Garment Test</span>
        </h3>
    </header>

    <div class="main-area">
        <div class="content-scroll">
            <div class="inner-scroll">
                @using (Html.BeginForm("DetailSave", ViewContext.RouteData.GetRequiredString("Controller"), FormMethod.Post, new { id = "DetailForm" }))
                {
                    <div style="margin-top: 1em;">
                        <table id="ButtonMode">
                            <tbody>
                                <tr>
                                    <td>
                                        <h4 id="Exit" style=" margin-right: 1em;">
                                            <a href="@Url.Action("IndexBack", "GarmentTest", new { Brand = Model.Main.BrandID , Season = Model.Main.SeasonID, Style = Model.Main.StyleID, Article = Model.Main.Article })">
                                                <img src="~/Image/Icon/Exit.png" width="30" />
                                                Exit
                                            </a>
                                        </h4>
                                    </td>
                                    <td>
                                        <h4 id="Edit" style=" margin-right: 1em;">
                                            <img src="~/Image/Icon/Edit.png" width="30" />
                                            Edit
                                        </h4>
                                    </td>
                                    <td>
                                        <h4 id="Save" style=" margin-right: 1em;">
                                            <img src="~/Image/Icon/Save.png" width="30" />
                                            Save
                                        </h4>
                                    </td>
                                    <td>
                                        <h4 id="Encode" style=" margin-right: 1em;">
                                            <img src="~/Image/Icon/Lock.png" width="30" />
                                            Encode
                                        </h4>
                                    </td>
                                    <td>
                                        <h4 id="Amend" style=" margin-right: 1em;">
                                            <img src="~/Image/Icon/Unlock.png" width="30" />
                                            Amend
                                        </h4>
                                    </td>
                                    <td>
                                        <h4 id="Report" style=" margin-right: 1em;">
                                            <img src="~/Image/Icon/Print.png" width="30" />
                                            Report
                                        </h4>
                                        <div class="ReportAction display-None">
                                            <table>
                                                <tbody>
                                                    <tr>
                                                        <td>
                                                            <input id="ReportOption" name="ReportOption" type="radio" class="bigSize" value="Wash_Test_2018">
                                                            <label for="ReportOptionx">Finished Garement Wash Test Ver.2018</label>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <input id="ReportOption" name="ReportOption" type="radio" class="bigSize" value="Wash_Test_2020">
                                                            <label for="ReportOptionx">Finished Garement Wash Test Ver.2020</label>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            <input id="ReportOption" name="ReportOption" type="radio" class="bigSize" value="Physical_Test">
                                                            <label for="ReportOptionx">Finished Garement Physical Test</label>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td style="text-align: center;">
                                                            <input id="ReportPDF" type="button" value="PDF">
                                                            <input id="ReportExcel" type="button" value="Excel" style="margin: 0 1em;">
                                                            <input id="ReportExit" type="button" value="Exit">
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </td>
                                    <td>
                                        <h4 id="Picture" style=" margin-right: 1em;">
                                            <img src="~/Image/Icon/Camera.png" width="30" />
                                            Picture
                                        </h4>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div id="tab-Change" style="margin-top: 1em;">
                        <ul class="tab-title">
                            <li><a href="#tab01"><h3>Detail</h3></a></li>
                            <li><a href="#tab02"><h3>Shrinkage</h3></a></li>
                            <li><a href="#tab03"><h3>Spirality</h3></a></li>
                            <li><a href="#tab04"><h3>Appearance</h3></a></li>
                            <li><a href="#tab05"><h3>FGWT</h3></a></li>
                            <li><a href="#tab06"><h3>FGPT</h3></a></li>
                        </ul>
                        <div id="tab01" class="tab-inner">
                            @if (Model.Detail != null)
                            {
                                <table id="Detail" class="DataTable">
                                    <tbody>
                                        <tr>
                                            <td style="width:10vw;"><h4>Style#</h4></td>
                                            <td style="width:20vw;">
                                                @Html.DisplayFor(o => Model.Main.StyleID, "", "")
                                                @Html.HiddenFor(o => Model.Detail.Status)
                                                @Html.HiddenFor(o => Model.Detail.ID)
                                                @Html.HiddenFor(o => Model.Detail.No)
                                                @Html.HiddenFor(o => Model.Detail.MtlTypeID)
                                                @Html.HiddenFor(o => Model.Detail.TestBeforePicture)
                                                @Html.HiddenFor(o => Model.Detail.TestAfterPicture)
                                            </td>
                                            <td style="width:10vw;"><h4>Season</h4></td>
                                            <td style="width:20vw;">@Html.DisplayFor(o => Model.Main.SeasonID, "", "")</td>
                                            <td style="width:10vw;"><h4>Brand</h4></td>
                                            <td style="width:20vw;">@Html.DisplayFor(o => Model.Main.BrandID, "", "")</td>
                                        </tr>
                                        <tr>
                                            <td><h4>SP#</h4></td>
                                            <td>@Html.DisplayFor(o => Model.Detail.OrderID, "", "")</td>
                                            <td><h4>Article</h4></td>
                                            <td>@Html.DisplayFor(o => Model.Main.Article, "", "")</td>
                                            <td><h4>Size</h4></td>
                                            <td>@Html.DisplayFor(o => Model.Detail.SizeCode, "", "")</td>
                                        </tr>
                                        <tr>
                                            <td><h4>Submit Date</h4></td>
                                            <td>@Html.TextBoxFor(o => Model.Detail.SubmitDate, "{0:yyyy/MM/dd}", new { @class = "date-picker" })</td>
                                            <td><h4>Arrive Qty</h4></td>
                                            <td>
                                                <input id="Detail_ArrivedQty" name="Detail.ArrivedQty" type="number" min="0" step="1" value="@Model.Detail.ArrivedQty">
                                            </td>
                                            <td><h4>Result</h4></td>
                                            @{
                                                string DetailFontColor = Model.Detail.Result == "P" || Model.Detail.Result == "Pass" ? "blue" : "red";
                                                string DetailVal = Model.Detail.Result == "P" || Model.Detail.Result == "Pass" ? "Pass" :
                                                        string.IsNullOrEmpty(Model.Detail.Result) ? string.Empty : "Fail";
                                            }
                                            <td class="@DetailFontColor">
                                                @DetailVal
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><h4>LO to Factory</h4></td>
                                            <td>@Html.TextBoxFor(o => Model.Detail.LOtoFactory, "", "")</td>
                                            <td><h4>Non 450</h4></td>
                                            <td>
                                                @Html.CheckBoxFor(o => o.Detail.NonSeamBreakageTest, new { @class = "bigSize" })
                                            </td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                        <tr>
                                            <td colspan="6"><h3>Washing Condition</h3></td>
                                        </tr>
                                        <tr>
                                            <td><h4>Line Dry</h4></td>
                                            <td>
                                                @{
                                                    string chkLineDry = Model.Detail.LineDry.HasValue ? Model.Detail.LineDry.Value ? "checked" : string.Empty : string.Empty;
                                                    string chkTumbleDry = Model.Detail.TumbleDry.HasValue ? Model.Detail.TumbleDry.Value ? "checked" : string.Empty : string.Empty;
                                                    string chkHandWash = Model.Detail.HandWash.HasValue ? Model.Detail.HandWash.Value ? "checked" : string.Empty : string.Empty;
                                                    string MaterialType = Model.Detail.MtlTypeID;

                                                    if (string.IsNullOrEmpty(chkLineDry) && string.IsNullOrEmpty(chkTumbleDry) && string.IsNullOrEmpty(chkHandWash))
                                                    {
                                                        chkLineDry = "checked";
                                                    }
                                                }
                                                <input class="bigSize DetailDrySelect" id="Detail_DrySelect" name="Detail.DrySelect" type="radio" value="LineDry" @chkLineDry>
                                            </td>
                                            <td><h4>Tumble Dry</h4></td>
                                            <td>
                                                <input class="bigSize DetailDrySelect" id="Detail_DrySelect" name="Detail.DrySelect" type="radio" value="TumbleDry" @chkTumbleDry>
                                            </td>
                                            <td><h4>Hand Wash</h4></td>
                                            <td>
                                                <input class="bigSize DetailDrySelect" id="Detail_DrySelect" name="Detail.DrySelect" type="radio" value="HandWash" @chkHandWash>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><h4>Temperature(˚C)</h4></td>
                                            <td>
                                                @if (Model.Main.BrandID == "ADIDAS" || Model.Main.BrandID == "REEBOK")
                                                {
                                                    <select id="Detail_Temperature" name="Detail.Temperature">
                                                        @foreach (var item in (List<SelectListItem>)ViewBag.TemperatureList)
                                                        {
                                                            string selected = item.Text.Equals(Model.Detail.Temperature.ToString()) ? "selected" : "";
                                                            <option value="@item.Value" @selected>@item.Text</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    @Html.TextBoxFor(o => o.Detail.Temperature, "", new { @type = "number", @onchange = "value=IntCheck(value)" })
                                                }
                                            </td>
                                            <td><h4>Fabric Composition</h4></td>
                                            <td colspan="3">@Html.TextBoxFor(o => Model.Detail.Composition, "", new { @style = "width:100%;" })</td>
                                        </tr>
                                        <tr>
                                            <td><h4>Fabrication Type</h4></td>
                                            <td colspan="2">

                                                <select id="Detail_FabricationType" name="Detail.FabricationType">
                                                    @foreach (var item in Model.FabricationType_Source)
                                                    {
                                                        /*
                                                        (1) 是KINT的時候，才可以選Rib
                                                        (2) 是KINT且LineDry的時候，才可以選Wool
                                                        (3) 是WOVEN的時候，才可以選Elastane
                                                         */
                                                        string selected = item.Text.Equals(Model.Detail.FabricationType) ? "selected" : "";
                                                        // 只有是WOVEN的時候，才可以選Elastane
                                                        bool enabled1 = MaterialType == "KNIT";
                                                        bool enabled2 = MaterialType == "KNIT" && chkLineDry == "checked";
                                                        bool enabled3 = MaterialType == "WOVEN";
                                                        string strEnabled1 = enabled1 ? "" : "disabled";
                                                        string strEnabled2 = enabled2 ? "" : "disabled";
                                                        string strEnabled3 = enabled3 ? "" : "disabled";

                                                        if (item.Text.ToUpper() == "RIB")
                                                        {
                                                            <option @strEnabled1 MtlTypeID="@MaterialType" value="@item.Value" @selected>@item.Text</option>
                                                        }

                                                        if (item.Text.ToUpper() == "WOOL")
                                                        {
                                                            <option @strEnabled2 MtlTypeID="@MaterialType" value="@item.Value" @selected>@item.Text</option>
                                                        }

                                                        if (item.Text.ToLower() == "elastane")
                                                        {
                                                            <option @strEnabled3 MtlTypeID="@MaterialType" value="@item.Value" @selected>@item.Text</option>
                                                        }

                                                        if (item.Text.ToLower() == "non")
                                                        {
                                                            <option MtlTypeID="@MaterialType" value="@item.Value" @selected>@item.Text</option>
                                                        }
                                                    }
                                                </select>
                                            </td>
                                            <td colspan="3" rowspan="2">
                                                <div>
                                                    @{
                                                        string DetailAbove50NaturalFibres = Model.Detail.Above50NaturalFibres != null && Model.Detail.Above50NaturalFibres.Value ? "checked" : "";
                                                        string DetailAbove50SyntheticFibres = Model.Detail.Above50SyntheticFibres != null && Model.Detail.Above50SyntheticFibres.Value ? "checked" : "";
                                                    }
                                                    <input id="Detail_Above50" name="Detail.Above50" type="radio" class="bigSize" value="Above50NaturalFibres" @DetailAbove50NaturalFibres />
                                                    <label for="Detail_Above50x">All basic Fabrics ≥ 50% natural fibres</label>
                                                </div>
                                                <div>
                                                    <input id="Detail_Above50" name="Detail.Above50" type="radio" class="bigSize" value="Above50SyntheticFibres" @DetailAbove50SyntheticFibres />
                                                    <label for="Detail_Above50x">All basic Fabrics ≥ 50% synthetic fibres (ex. polyester)</label>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="3"></td>
                                        </tr>
                                        <tr>
                                            <td><h4>Machine Model</h4></td>
                                            <td>
                                                <select id="Detail_Machine" name="Detail.Machine">
                                                    @foreach (var item in (List<SelectListItem>)ViewBag.MachineList)
                                                    {
                                                        string selected = Model.Detail.Machine != null && item.Text.Equals(Model.Detail.Machine.ToString()) ? "selected" : "";
                                                        <option value="@item.Value" @selected>@item.Text</option>
                                                    }
                                                </select>
                                            <td><h4>Remark</h4></td>
                                            <td colspan="3">
                                                @Html.TextBoxFor(o => Model.Detail.Remark, "", new { @style = "width:100%;" })
                                            </td>
                                        </tr>
                                        <tr>
                                            <td colspan="3"><h4>Streched Neck Opening is OK according to size spec?</h4></td>
                                            <td>
                                                <select id="Detail_Neck" name="Detail.Neck">
                                                    @foreach (var item in (List<SelectListItem>)ViewBag.NeckList)
                                                    {
                                                        string selected = item.Value.ToLower().Equals(Model.Detail.Neck.ToString().ToLower()) ? "selected" : "";
                                                        <option value="@item.Value" @selected>@item.Text</option>
                                                    }
                                                </select>
                                            </td>
                                            <td colspan="2"></td>
                                        </tr>
                                    </tbody>
                                </table>
                                <table style="width:92vw; padding:1em;">
                                    <tr>
                                        <td align="right">
                                            <input id="btnGenerateFGWT" type="button" class="site-btn btn-gy" style="margin:0;border:0;padding:1.2em;" name="GenerateFGWT" value="Generate FGWT" />
                                        </td>
                                    </tr>
                                </table>
                            }
                            <textarea id="ErrMsg" class="display-None">@Model.ErrMsg</textarea>
                        </div>
                        <div id="tab02" class="tab-inner">
                            @if (Model.Main != null)
                            {
                                <table id="Shrinkage" class="DataTable">
                                    <thead>
                                        <tr>
                                            @{
                                                bool bol710 = Model.Main.WashName == null || Model.Main.WashName.Equals("710");
                                                bool bol701 = Model.Main.WashName == null || Model.Main.WashName.Equals("701");
                                                string wash3 = bol710 ? "After Wash 10" : "After Wash 3";
                                                string shrink3 = bol710 ? "Shrinkage 10(%)" : "Shrinkage 3(%)";

                                            }
                                            <th><h4>Location</h4></th>
                                            <th><h4>Type</h4></th>
                                            <th><h4>Before Wash</h4></th>
                                            <th><h4>Size Spec Meas.</h4></th>
                                            <th><h4>After Wash 1</h4></th>
                                            <th><h4>Shrinkage 1(%)</h4></th>
                                            <th><h4>@wash3</h4></th>
                                            <th><h4>@shrink3</h4></th>
                                            @if (bol710)
                                            {
                                                <th><h4>After Wash 15</h4></th>
                                                <th><h4>Shrinkage 15(%)</h4></th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i <= Model.Shrinkages.Count - 1; i++)
                                        {
                                            string KeyToFgwt = string.Empty;
                                            if (Model.Shrinkages[i].Type.Contains("lining"))
                                            {
                                                KeyToFgwt = string.Empty;
                                            }
                                            else if (Model.Shrinkages[i].Type == "a) Front rise" || Model.Shrinkages[i].Type == "a) length of necktape")
                                            {
                                                KeyToFgwt = "a)";
                                            }
                                            else if (string.Equals(Model.Shrinkages[i].Type, "a1) Length of center front", StringComparison.OrdinalIgnoreCase))
                                            {
                                                KeyToFgwt = "skirt a1)";
                                            }
                                            else if (string.Equals(Model.Shrinkages[i].Type, "a2) Length of center back", StringComparison.OrdinalIgnoreCase))
                                            {
                                                KeyToFgwt = "skirt a2)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "b) Length of side seam" || Model.Shrinkages[i].Type == "b) Back rise" || Model.Shrinkages[i].Type == "b) length armhole to bottom hem")
                                            {
                                                KeyToFgwt = "b)";
                                            }
                                            else if (string.Equals(Model.Shrinkages[i].Type, "b) Waistband width", StringComparison.OrdinalIgnoreCase))
                                            {
                                                KeyToFgwt = "skirt b)";
                                            }
                                            else if (string.Equals(Model.Shrinkages[i].Type, "c) Length of front", StringComparison.OrdinalIgnoreCase) || Model.Shrinkages[i].Type == "c) Inseam or crotch width (if inseam less then 3)")
                                            {
                                                KeyToFgwt = "c)";
                                            }
                                            else if (string.Equals(Model.Shrinkages[i].Type, "c1) Hip width", StringComparison.OrdinalIgnoreCase))
                                            {
                                                KeyToFgwt = "skirt c1)";
                                            }
                                            else if (string.Equals(Model.Shrinkages[i].Type, "c2) Hem opening", StringComparison.OrdinalIgnoreCase))
                                            {
                                                KeyToFgwt = "skirt c2)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "d) Length of center-back" || Model.Shrinkages[i].Type == "d) Waistband width" || Model.Shrinkages[i].Type == "d) length of centre back")
                                            {
                                                KeyToFgwt = "d)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "e) Length of underarm seam" || Model.Shrinkages[i].Type == "e) length of underarm" || Model.Shrinkages[i].Type == "e) Leg opening")
                                            {
                                                KeyToFgwt = "e)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "f) Across back width" || Model.Shrinkages[i].Type == "f) Knee width" || Model.Shrinkages[i].Type == "f) width across back")
                                            {
                                                KeyToFgwt = "f)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "g1) Chest width" || Model.Shrinkages[i].Type == "g1) width below centre back neck (average) (Chest Width)")
                                            {
                                                KeyToFgwt = "g1)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "g2) Hem opening" || Model.Shrinkages[i].Type == "g2) width below centre back neck (average) (Hem Opening)")
                                            {
                                                KeyToFgwt = "g2)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "g) Thigh width")
                                            {
                                                KeyToFgwt = "g)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "h) Sleeve width" || Model.Shrinkages[i].Type == "h) width of sleeve")
                                            {
                                                KeyToFgwt = "h)";
                                            }
                                            else if (Model.Shrinkages[i].Type == "i) Sleeve opening or cuff width" || Model.Shrinkages[i].Type == "i) width of sleeve bottom/cuff bottom")
                                            {
                                                KeyToFgwt = "i)";
                                            }

                                            if (!string.IsNullOrEmpty(KeyToFgwt))
                                            {
                                                KeyToFgwt = (KeyToFgwt + Model.Shrinkages[i].Location).ToUpper();
                                            }
                                            <tr>
                                                <td>
                                                    @Html.TextBoxFor(o => Model.Shrinkages[i].Location, new { @readonly = "readonly", @style = "width:6vw;" })
                                                    @Html.HiddenFor(o => Model.Shrinkages[i].ID)
                                                    @Html.HiddenFor(o => Model.Shrinkages[i].No)
                                                </td>
                                                <td style="width: 18vw;">@Html.TextBoxFor(o => Model.Shrinkages[i].Type, new { @readonly = "readonly" })</td>
                                                <td>
                                                    <input id="Shrinkages_@{@i}__BeforeWash" name="Shrinkages[@i].BeforeWash" KeyToFgwt="@Html.Raw("Before" + KeyToFgwt)" onchange="ShrinkagesToFGWT(this)" class="BeforeWash" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].BeforeWash" style="width: 8vw;">
                                                </td>
                                                <td>
                                                    <input id="Shrinkages_@{@i}__SizeSpec" name="Shrinkages[@i].SizeSpec" class="SizeSpec" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].SizeSpec" style="width: 8vw;">
                                                </td>
                                                <td>
                                                    <input id="Shrinkages_@{@i}__AfterWash1" name="Shrinkages[@i].AfterWash1" class="AfterWash1" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].AfterWash1" style="width: 8vw;">
                                                </td>
                                                <td>
                                                    <input id="Shrinkages_@{@i}__Shrinkage1" name="Shrinkages[@i].Shrinkage1" class="Shrinkage1" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].Shrinkage1" readonly="readonly" style="width: 8vw;">
                                                </td>
                                                <td>
                                                    @if (bol701)
                                                    {
                                                        <input id="Shrinkages_@{@i}__AfterWash2" name="Shrinkages[@i].AfterWash2" KeyToFgwt="@Html.Raw("After" + KeyToFgwt)" onchange="ShrinkagesToFGWT(this)" class="AfterWash2" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].AfterWash2" style="width: 8vw;">
                                                    }
                                                    else
                                                    {
                                                        <input id="Shrinkages_@{@i}__AfterWash2" name="Shrinkages[@i].AfterWash2" class="AfterWash2" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].AfterWash2" style="width: 8vw;">
                                                    }
                                                </td>
                                                <td>
                                                    <input id="Shrinkages_@{@i}__Shrinkage2" name="Shrinkages[@i].Shrinkage2" class="Shrinkage2" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].Shrinkage2" readonly="readonly" style="width: 8vw;">
                                                </td>
                                                @if (bol710)
                                                {
                                                    <td>
                                                        <input id="Shrinkages_@{@i}__AfterWash3" name="Shrinkages[@i].AfterWash3" KeyToFgwt="@Html.Raw("After" + KeyToFgwt)" onchange="ShrinkagesToFGWT(this)" class="AfterWash3" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].AfterWash3" style="width: 8vw;">
                                                    </td>
                                                    <td>
                                                        <input id="Shrinkages_@{@i}__Shrinkage3" name="Shrinkages[@i].Shrinkage3" class="Shrinkage3" type="number" min="0" step="0.1" value="@Model.Shrinkages[i].Shrinkage3" readonly="readonly" style="width: 8vw;">
                                                    </td>
                                                }
                                            </tr>
                                        }

                                        @if (Model.Shrinkages.Count == 0)
                                        {
                                            <tr>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                @if (bol710)
                                                {
                                                    <td></td>
                                                    <td></td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </div>
                        <div id="tab03" class="tab-inner">
                            <table id="Spirality" class="DataTable">
                                <tbody>
                                    @for (int i = 0; i <= Model.Spiralities.Count - 1; i++)
                                    {
                                        string Location = string.Empty;
                                        switch (Model.Spiralities[i].Location)
                                        {
                                            case "T":
                                                Location = "Top";
                                                break;
                                            case "B":
                                                Location = "Bottom";
                                                break;
                                            case "I":
                                                Location = "Inner";
                                                break;
                                            case "O":
                                                Location = "Outer";
                                                break;
                                            default:
                                                break;
                                        }
                                        <tr>
                                            <td>
                                                <h4>Spirality (@Location)%</h4>
                                                @Html.HiddenFor(o => Model.Spiralities[i].ID)
                                                @Html.HiddenFor(o => Model.Spiralities[i].No)
                                                @Html.HiddenFor(o => Model.Spiralities[i].Location)
                                            </td>
                                            <td><h4>Method A</h4></td>
                                            <td>
                                                <input id="Spiralities_@{@i}__MethodA" name="Spiralities[@i].MethodA" class="MethodA" type="number" min="0" step="0.1" value="@Model.Spiralities[i].MethodA" readonly="readonly">
                                            </td>
                                            <td><h4>FOR @Location</h4></td>
                                            <td>AA'</td>
                                            <td>
                                                <input id="Spiralities_@{@i}__MethodA_AAPrime" name="Spiralities[@i].MethodA_AAPrime" class="MethodA_AAPrime" type="number" min="0" step="0.1" value="@Model.Spiralities[i].MethodA_AAPrime">
                                            </td>
                                            <td>A'B</td>
                                            <td>
                                                <input id="Spiralities_@{@i}__MethodA_APrimeB" name="Spiralities[@i].MethodA_APrimeB" class="MethodA_APrimeB" type="number" min="0" step="0.1" value="@Model.Spiralities[i].MethodA_APrimeB">
                                            </td>
                                        </tr>
                                        <tr>
                                            <td></td>
                                            <td><h4>Method B</h4></td>
                                            <td>
                                                <input id="Spiralities_@{@i}__MethodB" name="Spiralities[@i].MethodB" class="MethodB" type="number" min="0" step="0.1" value="@Model.Spiralities[i].MethodB" readonly="readonly">
                                            </td>
                                            <td></td>
                                            <td>AA'</td>
                                            <td>
                                                <input id="Spiralities_@{@i}__MethodB_AAPrime" name="Spiralities[@i].MethodB_AAPrime" class="MethodB_AAPrime" type="number" min="0" step="0.1" value="@Model.Spiralities[i].MethodB_AAPrime">
                                            </td>
                                            <td>A'B</td>
                                            <td>
                                                <input id="Spiralities_@{@i}__MethodB_AB" name="Spiralities[@i].MethodB_AB" class="MethodB_AB" type="number" min="0" step="0.1" value="@Model.Spiralities[i].MethodB_AB">
                                            </td>
                                        </tr>
                                        <tr>
                                            <td></td>
                                            <td colspan="3"><h4>Movement of side seam/outseam in CM</h4></td>
                                            <td></td>
                                            <td>
                                                <input id="Spiralities_@{@i}__CM" name="Spiralities[@i].CM" type="number" min="0" step="0.1" value="@Model.Spiralities[i].CM">
                                            </td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div id="tab04" class="tab-inner">
                            @if (Model.Apperance.Count > 0)
                            {
                                <table id="Appearance" class="DataTable">
                                    <thead>
                                        <tr>
                                            <th colspan="2"><h4>After Wash Appearance Check list</h4></th>
                                            <th><h4>Wash1</h4></th>
                                            <th><h4>Wash@{@Model.Apperance[0].WashName2}</h4></th>
                                            @if (!string.IsNullOrEmpty(Model.Apperance[0].WashName3))
                                            {
                                                <th><h4>Wash@{@Model.Apperance[0].WashName3}</h4></th>
                                            }
                                            <th><h4>Comment</h4></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i <= Model.Apperance.Count - 1; i++)
                                        {
                                            <tr>
                                                <td>
                                                    @{
                                                        bool showClass = Model.Apperance[i].Seq.Equals(1) || Model.Apperance[i].Seq.Equals(3);
                                                        string TypeClass = showClass ? "bg-lightred ApperanceType" : "ApperanceType";
                                                    }

                                                    @Html.TextBoxFor(o => Model.Apperance[i].Type, "", new { @readonly = "readonly", @class = TypeClass, @style = "width:100%;" })
                                                    @Html.HiddenFor(o => Model.Apperance[i].ID)
                                                    @Html.HiddenFor(o => Model.Apperance[i].No)
                                                    @Html.HiddenFor(o => Model.Apperance[i].Seq)
                                                </td>
                                                <td>
                                                    @if (showClass)
                                                    {
                                                        <img src="~/Image/Icon/List.png" width="30" idx="@Model.Apperance[i].Seq" class="AppearanceList" style="cursor:pointer;" />
                                                    }
                                                </td>
                                                <td>
                                                    <select id="Apperance_@{@i}__Wash1" name="Apperance[@i].Wash1" style="width:100%;">
                                                        @foreach (var item in (List<SelectListItem>)ViewBag.WashList)
                                                        {
                                                            string selected = item.Text.Equals(Model.Apperance[i].Wash1.ToString()) ? "selected" : "";
                                                            <option value="@item.Value" @selected>@item.Text</option>
                                                        }
                                                    </select>
                                                </td>
                                                <td>
                                                    <select id="Apperance_@{@i}__Wash2" name="Apperance[@i].Wash2" style="width:100%;">
                                                        @foreach (var item in (List<SelectListItem>)ViewBag.WashList)
                                                        {
                                                            string selected = item.Text.Equals(Model.Apperance[i].Wash2.ToString()) ? "selected" : "";
                                                            <option value="@item.Value" @selected>@item.Text</option>
                                                        }
                                                    </select>
                                                </td>
                                                @if (!string.IsNullOrEmpty(Model.Apperance[i].WashName3))
                                                {
                                                    <td>
                                                        <select id="Apperance_@{@i}__Wash3" name="Apperance[@i].Wash3" style="width:100%;">
                                                            @foreach (var item in (List<SelectListItem>)ViewBag.WashList)
                                                            {
                                                                string selected = item.Text.Equals(Model.Apperance[i].Wash3.ToString()) ? "selected" : "";
                                                                <option value="@item.Value" @selected>@item.Text</option>
                                                            }
                                                        </select>
                                                    </td>
                                                }
                                                <td>
                                                    @Html.TextBoxFor(o => Model.Apperance[i].Comment, new { @style = "width:100%;" })
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </div>
                        <div id="tab05" class="tab-inner">
                            <table id="FGWT" class="DataTable">
                                <thead>
                                    <tr>
                                        <th><h4>Location</h4></th>
                                        <th><h4>Type</h4></th>
                                        <th><h4>Before Wash</h4></th>
                                        <th><h4>After Wash</h4></th>
                                        <th><h4>Shrikage(%)</h4></th>
                                        <th colspan="2"><h4>Scale</h4></th>
                                        <th><h4>Result</h4></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i <= Model.FGWT.Count - 1; i++)
                                    {
                                        string Location = Model.FGWT[i].Location;
                                        switch (Model.FGWT[i].Location)
                                        {
                                            case "T":
                                                Location = "Top";
                                                break;
                                            case "B":
                                                Location = "Bottom";
                                                break;
                                            case "S":
                                                Location = "Top+Bottom";
                                                break;
                                            case "I":
                                                Location = "Inner";
                                                break;
                                            case "O":
                                                Location = "Outer";
                                                break;
                                        };

                                        bool bolWash = Model.FGWT[i].EditType.Equals("1");
                                        bool bolScale = Model.FGWT[i].EditType.Equals("2");

                                        string KeyToShrinkage = string.Empty;
                                        if (Model.FGWT[i].SystemType.Contains("lining"))
                                        {
                                            KeyToShrinkage = string.Empty;
                                        }
                                        else if (Model.FGWT[i].SystemType == "a) length of front leg" || Model.FGWT[i].SystemType == "a) length of necktape")
                                        {
                                            KeyToShrinkage = "a)";
                                        }
                                        else if (string.Equals(Model.FGWT[i].SystemType, "skirt a1) length from waist to bottom hem (center front)", StringComparison.OrdinalIgnoreCase))
                                        {
                                            KeyToShrinkage = "skirt a1)";
                                        }
                                        else if (string.Equals(Model.FGWT[i].SystemType, "skirt a2) length from waist to bottom hem (center back)", StringComparison.OrdinalIgnoreCase))
                                        {
                                            KeyToShrinkage = "skirt a2)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "b) length armhole to bottom hem" || Model.FGWT[i].SystemType == "b) length of back leg")
                                        {
                                            KeyToShrinkage = "b)";
                                        }
                                        else if (string.Equals(Model.FGWT[i].SystemType, "skirt b) width at waistband", StringComparison.OrdinalIgnoreCase))
                                        {
                                            KeyToShrinkage = "skirt b)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "c) length of inside leg" || Model.FGWT[i].SystemType == "c) length of front")
                                        {
                                            KeyToShrinkage = "c)";
                                        }
                                        else if (string.Equals(Model.FGWT[i].SystemType, "skirt c1) width below top/bottom edge of waistband (average) (Hip width)", StringComparison.OrdinalIgnoreCase))
                                        {
                                            KeyToShrinkage = "skirt c1)";
                                        }
                                        else if (string.Equals(Model.FGWT[i].SystemType, "skirt c2) width below top/bottom edge of waistband (average) (Hem opening)", StringComparison.OrdinalIgnoreCase))
                                        {
                                            KeyToShrinkage = "skirt c2)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "d) length of centre back" || Model.FGWT[i].SystemType == "d) width at waist")
                                        {
                                            KeyToShrinkage = "d)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "e) length of underarm" || Model.FGWT[i].SystemType == "e) width at bottom of leg")
                                        {
                                            KeyToShrinkage = "e)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "f) width across back" || Model.FGWT[i].SystemType == "f) width of leg halfway")
                                        {
                                            KeyToShrinkage = "f)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "g1) width below centre back neck (average) (Chest Width)")
                                        {
                                            KeyToShrinkage = "g1)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "g2) width below centre back neck (average) (Hem Opening)")
                                        {
                                            KeyToShrinkage = "g2)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "g) width of top of leg")
                                        {
                                            KeyToShrinkage = "g)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "h) width of sleeve")
                                        {
                                            KeyToShrinkage = "h)";
                                        }
                                        else if (Model.FGWT[i].SystemType == "i) width of sleeve botttom/cuff bottom")
                                        {
                                            KeyToShrinkage = "i)";
                                        }
                                        KeyToShrinkage = (KeyToShrinkage + Location).ToUpper();
                                        <tr>
                                            <td>
                                                @Location
                                            </td>
                                            <td>
                                                @Html.DisplayFor(o => Model.FGWT[i].SystemType)
                                                @Html.HiddenFor(o => Model.FGWT[i].Type)
                                                @Html.HiddenFor(o => Model.FGWT[i].ID)
                                                @Html.HiddenFor(o => Model.FGWT[i].No)
                                                @Html.HiddenFor(o => Model.FGWT[i].Location)
                                                @Html.HiddenFor(o => Model.FGWT[i].Seq)
                                            </td>
                                            <td>
                                                @if (bolWash)
                                                {
                                                    <input id="FGWT_@{@i}__BeforeWash" name="FGWT[@i].BeforeWash" KeyToShrinkage="@Html.Raw("Before" + KeyToShrinkage)" class="BeforeWash" type="number" min="0" step="0.1" value="@Model.FGWT[i].BeforeWash">
                                                }
                                            </td>
                                            <td>
                                                @if (bolWash)
                                                {
                                                    <input id="FGWT_@{@i}__AfterWash" name="FGWT[@i].AfterWash" KeyToShrinkage="@Html.Raw("After" + KeyToShrinkage)" class="AfterWash" type="number" min="0" step="0.1" value="@Model.FGWT[i].AfterWash">
                                                }
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(o => Model.FGWT[i].Shrinkage, new { @readonly = "readonly", @style = "width:6vw;", @class = "Shrinkage" })
                                            </td>
                                            <td>
                                                @if (bolScale)
                                                {
                                                    <select id="FGWT_@{@i}__Scale" name="FGWT[@i].Scale">
                                                        @foreach (var item in (List<SelectListItem>)ViewBag.ScaleList)
                                                        {
                                                            string selected = Model.FGWT[i].Scale != null && item.Text.Equals(Model.FGWT[i].Scale.ToString()) ? "selected" : "";
                                                            <option value="@item.Value" @selected>@item.Text</option>
                                                        }
                                                    </select>
                                                }
                                            </td>
                                            <td>
                                                @if (bolScale && false)
                                                {
                                                    <img src="~/Image/Icon/List.png" width="30" idx="@Model.FGWT[i].Seq" style="cursor:pointer;" />
                                                }
                                            </td>
                                            @{
                                                string FGWTFontColor = Model.FGWT[i].Result == "P" || Model.FGWT[i].Result == "Pass" ? "blue" : "red";
                                                string FGWTVal = Model.FGWT[i].Result == "P" || Model.FGWT[i].Result == "Pass" ? "Pass" :
                                                        string.IsNullOrEmpty(Model.FGWT[i].Result) ? string.Empty : "Fail";
                                            }
                                            <td class="@FGWTFontColor">
                                                @FGWTVal
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.FGWT.Count == 0)
                                    {
                                        <tr>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div id="tab06" class="tab-inner">
                            <table id="FGPT" class="DataTable">
                                <thead>
                                    <tr>
                                        <th><h4>Location</h4></th>
                                        <th><h4>Test Name</h4></th>
                                        <th colspan="2"><h4>Type</h4></th>
                                        <th><h4>Test Result</h4></th>
                                        <th><h4>Test Detail</h4></th>
                                        <th><h4>Result</h4></th>
                                        <th><h4>Action</h4></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i <= Model.FGPT.Count - 1; i++)
                                    {
                                        string Location = Model.FGPT[i].Location;
                                        bool canEdit = Model.FGPT[i].IsOriginal;
                                        switch (Model.FGPT[i].Location)
                                        {
                                            case "T":
                                                Location = "Top";
                                                break;
                                            case "B":
                                                Location = "Bottom";
                                                break;
                                            case "S":
                                                Location = "Top+Bottom";
                                                break;
                                        };
                                        bool boolVer = Model.FGPT[i].TypeSelection_VersionID > 0;
                                        string yellow = boolVer ? "bg-lightyellow" : "";
                                        <tr>
                                            <td>
                                                @Location
                                                @Html.HiddenFor(o => Model.FGPT[i].ID)
                                                @Html.HiddenFor(o => Model.FGPT[i].No)
                                                @Html.HiddenFor(o => Model.FGPT[i].Location)
                                                @Html.HiddenFor(o => Model.FGPT[i].Seq)
                                                @Html.HiddenFor(o => Model.FGPT[i].TypeSelection_VersionID)
                                                @Html.HiddenFor(o => Model.FGPT[i].TestName)
                                                @Html.HiddenFor(o => Model.FGPT[i].Criteria)
                                                @Html.TextBoxFor(o => Model.FGPT[i].Type, new { @readonly = "readonly", @class = "display-None txtFGPTType" })
                                                @Html.HiddenFor(o => Model.FGPT[i].TypeSelection_Seq, new { @class = "TypeSelection_Seq" })
                                            </td>
                                            <td>
                                                @Html.DisplayFor(o => Model.FGPT[i].TestName)
                                                @Html.TextBoxFor(o => Model.FGPT[i].TypeOri, new { @readonly = "readonly", @class = "display-None TypeOri" })
                                            </td>
                                            <td class="FGPTType @yellow">
                                                @Html.DisplayFor(o => Model.FGPT[i].Type)
                                            </td>
                                            <td style="width:5vw;">
                                                @if (boolVer)
                                                {
                                                    <img src="~/Image/Icon/List.png" width="30" class="FGPTList" idx="@Model.FGPT[i].TypeSelection_VersionID" style="cursor:pointer;" />
                                                }
                                            </td>
                                            <td class="bg-lightred">
                                                @{
                                                    switch (Model.FGPT[i].TestUnit.ToUpper())
                                                    {
                                                        case "MM":
                                                            <select id="FGPT_@{@i}__TestResult" name="FGPT[@i].TestResult" style="width:100%;">
                                                                @foreach (var item in (List<SelectListItem>)ViewBag.TestResultmmList)
                                                                {
                                                                    string selected = item.Text.Equals(Model.FGPT[i].TestResult.ToString()) ? "selected" : "";
                                                                    <option value="@item.Value" @selected>@item.Text</option>
                                                                }
                                                            </select>
                                                            break;
                                                        case "N":
                                                            <input id="FGPT_@{@i}__TestResult" name="FGPT[@i].TestResult" type="number" min="0" step="0.1" value="@Model.FGPT[i].TestResult">
                                                            break;
                                                        case "PASS/FAIL":
                                                            <select id="FGPT_@{@i}__TestResult" name="FGPT[@i].TestResult" style="width:100%;">
                                                                @foreach (var item in (List<SelectListItem>)ViewBag.TestResultPassList)
                                                                {
                                                                    string selected = item.Text.Equals(Model.FGPT[i].TestResult.ToString()) ? "selected" : "";
                                                                    <option value="@item.Value" @selected>@item.Text</option>
                                                                }
                                                            </select>
                                                            break;
                                                    }
                                                }
                                            </td>
                                            <td>
                                                @Html.DisplayFor(o => Model.FGPT[i].TestUnit)
                                                @Html.HiddenFor(o => Model.FGPT[i].TestUnit)
                                            </td>
                                            @{
                                                string FGPTFontColor = Model.FGPT[i].Result == "P" || Model.FGPT[i].Result == "Pass" ? "blue" : "red";
                                                string FGPTVal = Model.FGPT[i].Result == "P" || Model.FGPT[i].Result == "Pass" ? "Pass" :
                                                        string.IsNullOrEmpty(Model.FGPT[i].Result) ? string.Empty : "Fail";
                                            }
                                            <td class="@FGPTFontColor">
                                                @FGPTVal
                                            </td>
                                            <td>
                                                @if (canEdit)
                                                {
                                                    <img src="~/Image/Icon/Delete.png" width="30" class="FgptDelete" idx="@i" style="cursor:pointer;" />
                                                }
                                            </td>
                                        </tr>
                                    }

                                    <tr>
                                        <td colspan="7">

                                            <button id="btnNewFgptItem" class="btn btn-blue" style="text-shadow:none;">New Item</button>
                                        </td>
                                    </tr>
                                    @if (Model.FGPT.Count == 0)
                                    {
                                        <tr>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                            <td></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!--Detail彈跳視窗-->
<div class="detail-dialog to-edit-detail" title="New Item">
    <div class="detail-dialog-content dialog-content-w-icon" style="height:35vh">
        <form class="page-display-form nr-form" style="width:80%;padding:0;">
            <div class="form-item" style="height: 100%;padding-top:8vh;">
                <table style="border: 1px solid gray;font-size: 1vw;width: 100%;height: 10vh;text-align: center;background-color: transparent;color: white;">
                    <tr>
                        <td style="width:10vw;border: 1px solid gray;height: 5vh;font-size: 2vh;background-color:#696868;vertical-align: middle;">
                            <label>Location</label>
                        </td>
                        <td style="border: 1px solid gray;font-size: 2vh;vertical-align: middle;">
                            <input tpye="text" id="NewLocation" maxlength="20" value="" />
                        </td>
                        <td style="width:10vw;border: 1px solid gray;font-size: 2vh;background-color:#696868;vertical-align: middle;">
                            <label>Test Name</label>
                        </td>
                        <td style=" border: 1px solid gray;font-size: 2vh;vertical-align: middle;">
                            <input tpye="text" id="NewTestName" maxlength="30" value="" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:10vw;border: 1px solid gray;height: 5vh;font-size: 2vh;background-color:#696868;vertical-align: middle;">
                            <label>Type</label>
                        </td>
                        <td style=" border: 1px solid gray;font-size: 2vh;vertical-align: middle;" colspan="3">
                            <input tpye="text" id="NewType" maxlength="300" value="" style=" width: 43.3vw;" />
                        </td>
                    </tr>
                    <tr>
                        <td style="width:10vw;border: 1px solid gray;height: 5vh;font-size: 2vh;background-color:#696868;vertical-align: middle;">
                            <label>Criteria</label>
                        </td>
                        <td style=" border: 1px solid gray;font-size: 2vh;vertical-align: middle;">

                            <input type="number" id="NewCriteria" value="" />
                        </td>

                        <td style="width:10vw;border: 1px solid gray;height: 5vh;font-size: 2vh;background-color:#696868;vertical-align: middle;">
                            <label>TestUnit</label>
                        </td>
                        <td style=" border: 1px solid gray;font-size: 2vh;vertical-align: middle;">
                            @Html.DropDownList("NewTestUnit", Model.TestUnit_Source)
                        </td>
                    </tr>
                </table>
                <br />
            </div>
        </form>
    </div>
</div>


<script type="text/javascript">
    var msg;
    var EditMode;
    var FGPTListSelect;
    $(function () {
        msg = new MessagerAlert();
        EditMode = ('@Model.EditMode' == 'True');

        IsEditModeChange();
        ShrinkagesEventBind();
        SpiralityEventBind();
        ApperanceEventBind();
        FGWTEventBind();
        FGPTEventBind();
        ReportEventBind();
        tabChange();

        if ('@Model.Result' == 'False') {
            msg.WithError($('#ErrMsg').val());
        }
        else if ('@Model.Result' == 'True') {
             msg.WithSuccess('Success');
        }

        $("#btnNewFgptItem").click(function () {
            event.preventDefault();

            if (EditMode == false) {
                AddFgptItem();
            }

        });

        $(".FgptDelete").click(function () {

            if (EditMode == false) {
                DeleteFgptItem(this);
            }

        });

        $('.DetailDrySelect').click(function () {
            /*
            (1) 是KINT的時候，才可以選Rib
            (2) 是KINT且LineDry的時候，才可以選Wool
            (3) 是WOVEN的時候，才可以選Elastane
             */
            var selectedDry = $("#Detail_DrySelect:checked").val();
            var mtlType = $("#Detail_MtlTypeID").val();
            if (mtlType == 'KNIT' && selectedDry == 'LineDry') {
                $('option[MtlTypeID="KNIT"][Value="Wool"]').removeAttr("disabled");
            }
            else {
                // 因為disabled之後無法讀取值，所以要先判斷是否需要清空再disabled
                if ($("#Detail_FabricationType").val() == 'Wool') {
                    $("#Detail_FabricationType").val('Non');
                }

                $('option[MtlTypeID="KNIT"][Value="Wool"]').prop("disabled", "disabled");
            }
        });

        $(".detail-dialog").dialog({
            autoOpen: false,
            modal: true,
            closeText: ' ',
            width: 500,
            minHeight: 400,
            position: {
                my: "center top",
                at: "center top",
                of: window
            },
            dialogClass: "site-box",
            open: function (event, ui) {
                $('.ui-widget-overlay').bind('click', function () {
                    //location.reload();//強制Refresh頁面 Benson
                    $(".ui-dialog-content").dialog('close');
                });
                $(this).parent().siblings().find(".ui-dialog-content").dialog('close');

            },
            close: function () {
            },
        });

    });

    function AddFgptItem() {
        $(".to-edit-detail").dialog({
            width: "70%",
            dialogClass: "add-contact-box",
            buttons: {
                "1": {
                    text: 'Import',
                    click: function (btn, obj) {

                        if (EditMode == false) {
                            var ID = '@Model.Detail.ID';
                            var No = '@Model.Detail.No';
                            var Location = $("#NewLocation").val();
                            var Type = $("#NewType").val();
                            var TestName = $("#NewTestName").val();
                            var Criteria = $("#NewCriteria").val();
                            var TestUnit = $("#NewTestUnit").val();

                            $.ajax({
                                url: "@Url.Action("ImportNewItem", "GarmentTest", new { Area = "BulkFGT" })",
                                type: 'POST',
                                contentType: "application/json; charset=utf-8",
                                data: JSON.stringify({
                                    ID: ID,
                                    No: No,
                                    Location: Location,
                                    Type: Type,
                                    TestName: TestName,
                                    Criteria: Criteria,
                                    TestUnit: TestUnit,

                                }),
                                async: false,
                                success: function (data) {
                                    if (data.SaveResult) {
                                        msg.WithSuccesCheck("Success", function () {
                                            location.reload();
                                        });
                                    }
                                    else {
                                        msg.WithError(data.ErrMsg);
                                    }
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    console.log(xhr.responseText);
                                }
                            });

                        }

                    },
                    "class": "site-btn btn-red btn-lg",
                    "ID": "dialogEdit"
                },
                "2": {
                    text: 'Exit',
                    click: function () {
                        $(this).dialog("close");
                    }
                    , "class": "site-btn btn-gy btn-lg"
                },
            },
        });
        $(".to-edit-detail").dialog("open");
        $(".to-edit-detail").on("dialogclose", function (event, ui) {
            EditMode = false;

            //對話窗關閉，Table的內容要清除
            $("#moduleTable tbody").remove();
        });
    }


    function DeleteFgptItem(self) {

        // 取得那一列的值
        var idx = $(self).attr('idx');


        var ID = $(`#FGPT_${idx}__ID`).val();
        var No = $(`#FGPT_${idx}__No`).val();
        var Location = $(`#FGPT_${idx}__Location`).val();
        var TestName = $(`#FGPT_${idx}__TestName`).val();
        var Type = $(`#FGPT_${idx}__Type`).val();
        var Seq = $(`#FGPT_${idx}__Seq`).val();

        $.ajax({
            url: "@Url.Action("DeleteOriginalItem", "GarmentTest", new { Area = "BulkFGT" })",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                ID: ID,
                No: No,
                Location: Location,
                Type: Type,
                TestName: TestName,
                Seq: Seq,

            }),
            async: false,
            success: function (data) {
                if (data.SaveResult) {
                    msg.WithSuccesCheck("Success", function () {
                        location.reload();
                    });
                }
                else {
                    msg.WithError(data.ErrMsg);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(xhr.responseText);
            }
        });
    }

    function IsEditModeChange() {
        EditModeButtionBind();

        if (EditMode) {
            $("#Edit, #Encode, #Amend, #Report").unbind('click').removeClass("IsEditMode");
            $('#Save, #Undo').addClass("IsEditMode");
            $('#btnGenerateFGWT').unbind('click').addClass("IsEditModeQuery");

            $('.DataTable input, .DataTable select').removeAttr("disabled");
            $('.AppearanceList, .FGPTList').removeClass('display-None');
            $('.FgptDelete').addClass('display-None');
        }
        else {
            $("#Report").addClass("IsEditMode");
            $('#Save, #Undo').unbind('click').removeClass("IsEditMode");

            if ($('#FGWT > tbody > tr').length > 1) {
                $('#btnGenerateFGWT').removeClass("IsEditModeQuery");
            }

            if ($('#Detail_Status').val() == "New") {
                $('#Edit, #Encode').addClass("IsEditMode");
            }

            if ($('#Detail_Status').val() == "Confirmed") {
                $('#Amend').addClass("IsEditMode");
            }

            $('.DataTable input, .DataTable select').attr("disabled", "disabled");
            $('.AppearanceList, .FGPTList').addClass('display-None');
            $('.FgptDelete').removeClass('display-None');
        }

        $('#Picture').addClass("IsEditMode");
    }

    function EditModeButtionBind() {
        if ($('#Detail_Status').val() == "New") {
            $('#Edit').on('click', function () {
                EditMode = true;
                IsEditModeChange();
            });

            $('#Encode').on('click', function () {
                $.ajax({
                    url: "@Url.Action("Encode_Detail", "GarmentTest", new { Area = "BulkFGT" })",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ ID: $('#Detail_ID').val(), No: $('#Detail_No').val(), status: "Encode" }),
                    async: false,
                    success: function (data) {
                        if (data.Result) {
                            if (data.sentMail) {
                                FailMail();
                            }
                            else {
                                msg.WithSuccesCheck("Success", function () {
                                    location.reload();
                                });
                            }
                        }
                        else {
                            msg.WithError(data.ErrMsg);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.responseText);
                    }
                });
            });
        }

        if ($('#Detail_Status').val() == "Confirmed") {
            $('#Amend').on('click', function () {
                $.ajax({
                    url: "@Url.Action("Encode_Detail", "GarmentTest", new { Area = "BulkFGT" })",
                    type: 'POST',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({ ID: $('#Detail_ID').val(), No: $('#Detail_No').val(), status: "Amend" }),
                    async: false,
                    success: function (data) {
                        if (data.Result) {
                            msg.WithSuccesCheck("Success", function () {
                                location.reload();
                            });
                        }
                        else {
                            msg.WithError(data.ErrMsg);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console.log(xhr.responseText);
                    }
                });
            });
        }

        $('#Save').on('click', function () {
            document.getElementById("DetailForm").submit();
        });

        $('#Report').on('click', function () {
            $('.ReportAction').removeClass('display-None');
        });

        $('#Picture').on('click', function () {
            var para = "?Title=" + $('.page-header span').html() + "&EditMode=" + EditMode;
            para += "&" + "Table=GarmentTest_Detail";
            para += "&" + "TargetBeforeColumn=Detail_TestBeforePicture";
            para += "&" + "TargetAfterColumn=Detail_TestAfterPicture";
            para += "&" + "BeforeColumn=TestBeforePicture";
            para += "&" + "AfterColumn=TestAfterPicture";
            para += "&" + "PKey_1=ID";
            para += "&" + "PKey_2=No";
            para += "&" + "PKey_1_Val=" + $('#Detail_ID').val();
            para += "&" + "PKey_2_Val=" + $('#Detail_No').val();
            window.open('@Url.Action("PictureList", "PublicWindow",new { Area=""})' + para, 'Picture List', config = 'toolbar=no,status=no,location=no,width=1024,height=750');
        });

        if ($('#FGWT > tbody > tr').length == 1) {
            $('#btnGenerateFGWT').on('click', function () {
                if ($("#Detail_DrySelect:checked").length == 1 && $('#Detail_Above50:checked').length == 1) {
                    $.ajax({
                        url: "@Url.Action("GenerateFGWT", "GarmentTest", new { Area = "BulkFGT" })",
                        type: 'POST',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify({ ID: $('#Detail_ID').val(), No: $('#Detail_No').val() }),
                        async: false,
                        success: function (data) {
                            if (data.Result) {
                                msg.WithSuccesCheck("Success", function () {
                                    location.reload();
                                });
                            }
                            else {
                                msg.WithError(data.ErrMsg);
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            console.log(xhr.responseText);
                        }
                    });
                }
                else {
                    return false;
                }
            });
        }

    }

    function tabChange() {
        var $li = $('#tab-Change > ul.tab-title li');
        $($li.eq(0).addClass('active').find('a').attr('href')).siblings('.tab-inner').hide();

        $li.click(function () {
            $($(this).find('a').attr('href')).show().siblings('.tab-inner').hide();
            $(this).addClass('active').siblings('.active').removeClass('active');
        });
    }

    function ReportEventBind() {
        $('#ReportPDF').on('click', function () {
            ToReport(1);
        });

        $('#ReportExcel').on('click', function () {
            ToReport(0);
        });

        $('#ReportExit').on('click', function () {
            $('.ReportAction').addClass('display-None');
        });
    }

    function ToReport(IsToPDF) {
        var type = $('#ReportOption:checked').val();

        msg.WithInfoTimer("Report Generating...");

        $.ajax({
            url: "@Url.Action("Report", "GarmentTest", new { Area = "BulkFGT" })",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ ID: $('#Detail_ID').val(), No: $('#Detail_No').val(), type: type, IsToPDF: IsToPDF}),
            async: true,
            success: function (data) {
                if (data.Result) {
                    window.location.href = data.reportPath;
                }
                else {
                    msg.WithError(data.ErrMsg);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(xhr.responseText);
            }
        });
    }

    function ShrinkagesEventBind() {
        $('.BeforeWash').on('blur', function () {
            var tr = $(this).parent().parent();
            var before = $(this).val();
            $('.AfterWash1,.AfterWash2,.AfterWash3').trigger('blur');
        });

        $('.AfterWash1').on('blur', function () {
            if ($(this).val() == "") {
                return;
            }
            var tr = $(this).parent().parent();
            var wash = $(this).val();
            var before = tr.find("input[class='BeforeWash']").val();
            var shrink = tr.find("input[class='Shrinkage1']");
            shrink.val(AfterWashCal(wash, before));
        });

        $('.AfterWash2').on('blur', function () {
            if ($(this).val() == "") {
                return;
            }
            var tr = $(this).parent().parent();
            var wash = $(this).val();
            var before = tr.find("input[class='BeforeWash']").val();
            var shrink = tr.find("input[class='Shrinkage2']");
            shrink.val(AfterWashCal(wash, before));
        });

        $('.AfterWash3').on('blur', function () {
            if ($(this).val() == "") {
                return;
            }
            var tr = $(this).parent().parent();
            var wash = $(this).val();
            var before = tr.find("input[class='BeforeWash']").val();
            var shrink = tr.find("input[class='Shrinkage3']");
            shrink.val(AfterWashCal(wash, before));
        });
    }

    function AfterWashCal(Wash, Before) {
        return Round(accMul(accDiv(accSubtr(Wash, Before), Before), 100));
    }

    function SpiralityEventBind() {
        $('.MethodA_AAPrime').on('blur', function () {
            var tr = $(this).parent().parent();
            var AA = $(this).val();
            var AB = tr.find("input[class='MethodA_APrimeB']").val();
            if (AB == null || AB == 0) {
                return;
            }
            tr.find("input[class='MethodA']").val(MethodCal(AA, AB));
        });

        $('.MethodA_APrimeB').on('blur', function () {
            var tr = $(this).parent().parent();
            var AB = $(this).val();
            var AA = tr.find("input[class='MethodA_AAPrime']").val();
            if (AB == null || AB == 0) {
                return;
            }
            tr.find("input[class='MethodA']").val(MethodCal(AA, AB));
        });

        $('.MethodB_AAPrime').on('blur', function () {
            var tr = $(this).parent().parent();
            var AA = $(this).val();
            var AB = tr.find("input[class='MethodB_AB']").val();
            if (AB == null || AB == 0) {
                return;
            }
            tr.find("input[class='MethodB']").val(MethodCal(AA, AB));
        });

        $('.MethodB_AB').on('blur', function () {
            var tr = $(this).parent().parent();
            var AB = $(this).val();
            var AA = tr.find("input[class='MethodB_AAPrime']").val();
            if (AB == null || AB == 0) {
                return;
            }
            tr.find("input[class='MethodB']").val(MethodCal(AA, AB));
        });
    }

    function MethodCal(AA, AB) {
        return Round(accMul(accDiv(AA, AB), 100));
    }

    function ApperanceEventBind() {
        $('.AppearanceList').on('click', function () {
            $('#Appearance .selected').removeClass('selected');
            var td = $(this).parent().parent().find("td:nth-child(1)");
            td.addClass('selected');
            var seq = $(this).attr('idx');
            var para = "?Lab=" + seq;
            window.open('@Url.Action("AppearanceList", "PublicWindow",new { Area=""})' + para, 'Appearance', config = 'toolbar=no,status=no,location=no,width=800,height=650');
        });
    }

    function GetAppearance(data) {
        var newVal = "";
        $.each(data, function (index, value) {
            if (newVal != "") {
                newVal += "/";
            }
            newVal += value.Name;
        });
        $('#Appearance .selected .ApperanceType').val(newVal);
        $('#Appearance .selected').removeClass('selected');
    }

    function FGWTEventBind() {
        $('.BeforeWash').on('blur', function () {
            var tr = $(this).parent().parent();
            var before = $(this).val();
            var after = tr.find("input[class='AfterWash']").val();
            if (before == null || before == 0) {
                return;
            }
            tr.find("input[class='Shrinkage']").val(ShrinkageCal(after, before));
        });

        $('.AfterWash').on('blur', function () {
            var tr = $(this).parent().parent();
            var after= $(this).val();
            var before = tr.find("input[class='BeforeWash']").val();
            if (before == null || before == 0) {
                return;
            }
            tr.find("input[class='Shrinkage']").val(ShrinkageCal(after, before));
        });
    }

    function ShrinkageCal(after, before) {
        return Round(accMul(accDiv(accSubtr(after, before), before), 100.0));
    }

    function FGPTEventBind() {
        $('.FGPTList').on('click', function () {
            $('#FGPT .selected').removeClass('selected');
            var td = $(this).parent().parent().find("td:nth-child(2)");
            td.addClass('selected');
            var version = $(this).attr('idx');
            var para = "?VersionID=" + version;
            FGPTListSelect = version;
            window.open('@Url.Action("FGPTList", "PublicWindow",new { Area=""})' + para, 'FGPT', config = 'toolbar=no,status=no,location=no,width=400,height=650');
        });
    }

    function GetFGPT(data) {
        var oriVal = $('#FGPT .selected .TypeOri').val();
        var newVal = oriVal.replace("{0}", data.Code);
        $('#FGPT .selected').siblings("td[class='FGPTType bg-lightyellow']").html(newVal);
        $('#FGPT .selected').siblings("td").children("input[class='display-None txtFGPTType']").val(newVal);
        $('#FGPT .selected').siblings("td").children("input[class='TypeSelection_Seq']").val(data.Seq);
        $('#FGPT .selected').removeClass('selected');
    }

    function FailMail() {
        var para = "?Title=" + $('.page-header span').html() + "&FactoryID=@ViewBag.FactoryID&Type=BulkFGT";
        window.open('@Url.Action("TestFailMailList", "PublicWindow",new { Area=""})' + para, 'Mail List', config = 'toolbar=no,status=no,location=no,width=650,height=750');
    }

    function GetTestFailMailList(data) {
        var to = "";
        var cc = "";
        $.each(data, function (index, value) {
            to += value.To + ';';
            cc += value.CC + ';';
        });

        $.ajax({
            url: "@Url.Action("FailMail", "GarmentTest", new { Area = "BulkFGT" })",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ ID: $('#Detail_ID').val(), No: $('#Detail_No').val(), TO: to, CC: cc }),
            async: false,
            success: function (data) {
                if (data.Result) {
                    msg.WithSuccesCheck("Success", function () {
                        location.reload();
                    });
                }
                else {
                    msg.WithWarningCheck(data.ErrMsg, function () {
                        location.reload();
                    });
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // console.log(xhr.responseText);
                msg.WithWarningCheck(xhr.responseText, function () {
                    location.reload();
                });
            }
        });
    }

    function GetPicture(data) {
        $('#Detail_TestBeforePicture').val(data.BeforePicture.replace("data:image/png;base64,", ""));
        $('#Detail_TestAfterPicture').val(data.AfterPicture.replace("data:image/png;base64,", ""));
    }

    function ShrinkagesToFGWT(obj) {
        var fgwtValue = $(obj).val();
        var keyToFGWT = $(obj).attr('keyToFGWT');

        if (keyToFGWT != '' && keyToFGWT != 'Before' && keyToFGWT != 'After') {
            var sameKey = $(`input[KeyToShrinkage='${keyToFGWT}']`);

            $.each(sameKey, function () {
                $(this).val(fgwtValue);
                $(this).blur();
            });
        }
    }

    function IntCheck(value) {
        return parseInt(value);
    }
</script>
