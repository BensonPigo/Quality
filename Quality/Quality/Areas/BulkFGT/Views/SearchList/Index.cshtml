
@using DatabaseObject.ViewModel.BulkFGT

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model SearchList_ViewModel


<link href="~/ThirdParty/plugins/DataTables/datatables.min.css" rel="stylesheet" />
<link href="~/ThirdParty/SciCustom/css/TableStyle.css" rel="stylesheet" />
<link href="~/ThirdParty/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
<script src="~/ThirdParty/plugins/DataTables/datatables.min.js"></script>

<style type="text/css">
    .dataTables_wrapper {
        position: static;
    }

    h3, label, #myTable_info {
        color: white
    }

    #myTable_previous, #myTable_next {
        color: white !important;
    }

    select {
        color: black
    }

    .btnmargin {
        margin-left: 10px;
        margin-top: 10px;
    }

    tfoot input {
        width: 100%;
        padding: 3px;
        box-sizing: border-box;
    }

    td {
        padding: 0.3vw;
    }

    .col-auto {
        width: auto;
    }

        .col-auto > p {
            padding: 0
        }

    .readonly {
        background-color: lightgray;
    }

    .row-name {
        color: black;
        font-size: 1.2em;
        background-color: gray;
    }
    .inner-scroll{
        padding-bottom:30px;
    }
    #ui-datepicker-div {
        width:20vw;
    }
    .main-area{
        height:85vh;
    }
    .content-scroll {
        height: 70vh;
        overflow-y:scroll;
    }
    .aiCommentTooltipText {
        visibility: hidden;
        position: fixed;
        top: 40%; /* 距離上方50%的位置 */
        left: 15%; /* 距離左邊50%的位置 */
        z-index: 9999;
        background-color: pink;
        border: 1px solid black;
        border-radius: 2px;
        color: black;
        font-size: 1rem;
        padding: 0.5rem;
        text-align: left;
    }

    .aiCommentTooltip:hover .aiCommentTooltipText {
        visibility: visible;
    }
</style>
<div class="main-content">

    <header class="page-header">
        <h3>
            <i class=""></i><span>Search List</span>
        </h3>
        <div class="breadcrumb">
            <div>Home</div>
            <div class="current">Search List</div>
        </div>
    </header>


    <div class="main-area">
        <div style="height:15vh;">
            @using (Html.BeginForm("Query", ViewContext.RouteData.GetRequiredString("Controller"), FormMethod.Post, new { @class = "", @name = "SearchFrom", @onsubmit = "return checkvalue(this.submitted)", @id = "SearchFrom" }))
            {
                    <table style="width:100%;">
                        <tr>
                            <td>
                                <label class="FindLab">Brand</label>
                            </td>
                            <td nowrap="nowrap" colspan="2">
                                <div>
                                    @Html.TextBoxFor(o => o.BrandID, new { @value = Model.BrandID, @style = "width:9vw" })
                                    <input id="btnBrandID" onclick="OpenWindow('BrandID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                                </div>
                            </td>
                            <td>
                                <label class="FindLab">Season</label>
                            </td>
                            <td nowrap="nowrap" colspan="2">
                                @Html.TextBoxFor(o => o.SeasonID, new { @value = Model.SeasonID, @style = "width:9vw" })
                                <input id="btnSeasonID" onclick="OpenWindow('SeasonID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                            </td>
                            <td>
                                <label class="FindLab">Style</label>
                            </td>
                            <td nowrap="nowrap">
                                @Html.TextBoxFor(o => o.StyleID, new { @value = Model.StyleID, @style = "width:9.5vw" })
                                <input id="btnStyleID" onclick="OpenWindow('StyleID')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                            </td>
                            <td>
                                <label class="FindLab">Article</label>
                            </td>
                            <td nowrap="nowrap">
                                @Html.TextBoxFor(o => o.Article, new { @value = Model.Article, @style = "width:9.5vw" })
                                <input id="btnArticle" onclick="OpenWindow('Article')" type="button" class="site-btn btn-blue" style="margin:0;border: 2px solid transparent;" name="" value="..." />
                            </td>
                            <td style="padding: 0vw;">
                                <input type="submit" onclick="this.form.submitted=this.value;" class="site-btn btn-gy font1rem Black" style="width: 7vw;" name="action:Query" id="btnQuery" value="Query" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label class="FindLab" for="TypeSP">Type</label>
                            </td>
                            <td colspan="2">
                                @Html.DropDownListFor(o => o.Type, Model.TypeDatasource)
                            </td>
                            <td>
                                <label class="FindLab" >Line</label>
                            </td>
                            <td colspan="6">
                                @Html.TextBoxFor(o => o.Line, new { @value = Model.Line, @style = "width:9vw" })
                            </td>
                            <td style="padding: 0vw;">
                                <input type="button" class="site-btn btn-gy font1rem Black" style="width: 7vw;" name="action:ToExcel" id="btnExcel" value="To Excel" />
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <label>Received Date</label>
                            </td>
                            <td colspan="2">
                                @Html.TextBox("ReceivedDate_sText", Model.ReceivedDate_sText, new { @style = "width:9vw", @class = "date-picker specialUse" })
                                <label>~</label>
                                @Html.TextBox("ReceivedDate_eText", Model.ReceivedDate_eText, new { @style = "width:9vw", @class = "date-picker specialUse" })
                            </td>
                            <td>
                                <label>Report Date</label>
                            </td>
                            <td colspan="2">
                                @Html.TextBox("ReportDate_sText", Model.ReportDate_sText, new { @style = "width:9vw", @class = "date-picker specialUse" })
                                <label>~</label>
                                @Html.TextBox("ReportDate_eText", Model.ReportDate_eText, new { @style = "width:9vw", @class = "date-picker specialUse" })
                            </td>
                            <td>
                                <label>Arrived W/H Date</label>
                            </td>
                            <td colspan="4">
                                @Html.TextBox("WhseArrival_sText", Model.WhseArrival_sText, new { @style = "width:9vw", @class = "date-picker" })
                                <label>~</label>
                                @Html.TextBox("WhseArrival_eText", Model.WhseArrival_eText, new { @style = "width:9vw", @class = "date-picker" })
                            </td>
                        </tr>
                    </table>
            }
        </div>
        <div class="content-scroll">
            <div class="inner-scroll" style="float:left">
                    <table id="myTable" class="table table-striped display" style="text-align:center;">
                        <thead>
                            <tr class="row-name" style="color:black">
                                <th>Type</th>
                                <th>Report No</th>
                                <th>SP#</th>
                                <th>Style#</th>
                                <th>Brand</th>
                                <th>Season</th>
                                <th>Article</th>
                                <th>Line</th>
                                <th>Artwork</th>
                                <th>Result</th>
                                <th>Received Date</th>
                                <th>Report Date</th>
                                <th>Test Date</th>
                                <th>Technician Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.DataList != null && Model.DataList.Count > 0)
                            {
                                foreach (var item in Model.DataList)
                                {
                                    string color = item.Result == "Pass" ? "blue" : "red";
                            <tr class="row-content">
                                <td>
                                    @{ string link = "";}
                                    @switch (item.Type)
                                    {
                                        case string a when a.Contains("Fabric Crocking & Shrinkage Test"):
                                            link = Url.Action("IndexBack", "FabricCrkShrkTest", new { POID = item.OrderID });
                                            break;
                                        case string a when a.Contains("Garment Test"):
                                            link = Url.Action("IndexBack", "GarmentTest", new
                                            {
                                                Brand = item.BrandID,
                                                Season = item.SeasonID,
                                                Style = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Mockup Crocking Test"):
                                            link = Url.Action("IndexGet", "MockupCrocking", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Mockup Oven Test"):
                                            link = Url.Action("IndexGet", "MockupOvenTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Mockup Wash Test"):
                                            link = Url.Action("IndexGet", "MockupWash", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Fabric Oven Test"):
                                            link = Url.Action("IndexBack", "FabricOvenTest", new { POID = item.OrderID });
                                            break;
                                        case string a when a.Contains("Washing Fastness"):
                                            link = Url.Action("IndexBack", "FabricColorFastness", new { POID = item.OrderID });
                                            break;
                                        case string a when a.Contains("Accessory Oven & Wash Test"):
                                            link = Url.Action("IndexGet", "AccessoryOvenWash", new { ReqOrderID = item.OrderID, OrderID = item.OrderID });
                                            break;
                                        case string a when a.Contains("Pulling test"):
                                            link = Url.Action("IndexGet", "PullingTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Water Fastness"):
                                            link = Url.Action("IndexBack", "WaterFastness", new
                                            {
                                                POID = item.OrderID,
                                            });
                                            break;
                                        case string a when a.Contains("Perspiration Fastness"):
                                            link = Url.Action("IndexBack", "PerspirationFastness", new
                                            {
                                                POID = item.OrderID,
                                            });
                                            break;
                                        case string a when a.Contains("Daily HT Wash"):
                                            link = Url.Action("IndexGet", "HeatTransferWash", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Bulk Moisture"):
                                            link = Url.Action("IndexGet", "DailyMoisture", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                OrderID = item.OrderID,
                                            });
                                            break;
                                        case string a when a.Contains("Accelerated Aging by Hydrolysis"):
                                            link = Url.Action("Detail", "AgingHydrolysisTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                            });
                                            break;
                                        case string a when a.Contains("Saliva Fastness Test"):
                                            link = Url.Action("IndexGet", "SalivaFastnessTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Phenolic Yellowing Test"):
                                            link = Url.Action("IndexGet", "PhenolicYellowTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("T-Peel Strength Test"):
                                            link = Url.Action("IndexGet", "TPeelStrengthTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        case string a when a.Contains("Martindale Pilling Test"):
                                            link = Url.Action("IndexGet", "MartindalePillingTest", new
                                            {
                                                ReportNo = item.ReportNo,
                                                BrandID = item.BrandID,
                                                SeasonID = item.SeasonID,
                                                StyleID = item.StyleID,
                                                Article = item.Article,
                                            });
                                            break;
                                        default:
                                            link = "#";
                                            break;
                                    }

                                    <a href="@link" target="_blank">@item.Type</a>

                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ReportNo)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.OrderID)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.StyleID)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.BrandID)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.SeasonID)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Article)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Line)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Artwork)
                                </td>
                                <td style="color: @color" class="aiCommentTooltip">
                                    @Html.DisplayFor(modelItem => item.Result)

                                    @if (item.Result == "Fail" && (item.BrandID == "ADIDAS" || item.BrandID == "REEBOK"))
                                    {
                                        <div style="white-space: pre-line; " class="aiCommentTooltipText">@item.AIComment</div>
                                        <img src="~/Image/Icon/Warning.png" width="25" height="25" class="" />
                                    }
                                </td>
                                <td>
                                    @{string ReceivedDate = item.ReceivedDate.HasValue ? item.ReceivedDate.Value.ToShortDateString() : ""; }
                                    @Html.DisplayFor(modelItem => ReceivedDate)
                                </td>
                                <td>
                                    @{string ReportDate = item.ReportDate.HasValue ? item.ReportDate.Value.ToString("yyyy-MM-dd HH:mm:ss") : ""; }
                                    @Html.DisplayFor(modelItem => ReportDate)
                                </td>
                                <td>
                                    @{string TestDate = item.TestDate.HasValue ? item.TestDate.Value.ToString("yyyy-MM-dd HH:mm:ss") : ""; }
                                    @Html.DisplayFor(modelItem => TestDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.AddName)
                                </td>
                            </tr>
                                }
                            }

                        </tbody>
                    </table>
                <br />

            </div>
        </div>
    </div>
</div>



<script type="text/javascript">

    var msg = new MessagerAlert();

    $(function () {
        QueryButtonBind();

        @Html.Raw(Model.ErrorMessage);

        $('#myTable').DataTable({
            "pageLength": 10,
            "filter": false,
            "paging": true,
            scrollY: '60vh',
            scrollCollapse: true,

        });


        $("#btnExcel").click(function () {
            var Req = {
                BrandID: $('#BrandID').val(),
                SeasonID: $('#SeasonID').val(),
                StyleID: $('#StyleID').val(),
                Article: $('#Article').val(),
                Type: $('#Type').val(),
            };
            $.ajax({
                url: "@Url.Action("ToExcel", "SearchList", new { Area = "BulkFGT" })",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ Req }),
                async: false,
                success: function (data) {
                    if (data.Result) {
                        window.location.href = data.TempFileName;
                    }
                    else {
                        msg.WithError(data.ErrMsg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Type").change();
    });

    function OpenWindow(WindowType) {
        if (WindowType == "BrandID") {
            window.open('@Url.Action("BrandList", "PublicWondow",new { Area=""})', WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "SeasonID") {
            window.open(`@Url.Action("SeasonList", "PublicWondow",new { Area=""})?BrandID=${$("#BrandID").val()}`, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
        if (WindowType == "StyleID") {
            var para = "?BrandID=" + $('#BrandID').val() + "&SeasonID=" + $('#SeasonID').val();
            window.open('@Url.Action("StyleList", "PublicWondow",new { Area=""})' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }

        if (WindowType == "Article" && $("#StyleID").val() != "") {
            var para = "?OrderID=&StyleUkey=0&BrandID=" + $('#BrandID').val() + "&SeasonID=" + $('#SeasonID').val() + "&StyleID=" + $('#StyleID').val();
            window.open('@Url.Action("ArticleList", "PublicWondow",new { Area=""})' + para, WindowType, config = 'toolbar=no,status=no,location=no,width=400,height=650');
        }
    }
    function GetBrandList(BrandID) {
        $("#BrandID").val(BrandID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetSeasonList(SeasonID) {
        $("#SeasonID").val(SeasonID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetStyleList(StyleID) {
        $("#StyleID").val(StyleID);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }
    function GetArticleList(Article) {
        $("#Article").val(Article);
        // 在這邊取得開窗選擇的Brand，進行後續動作
    }

    function QueryButtonBind() {
        $("#BrandID").blur(function () {
            $.ajax({
                url: "@Url.Action("BrandList", "PublicWondow",new { Area=""})",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#BrandID").val('');
                        msg.WithError('Brand Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#SeasonID").blur(function () {
            var BrandID = $('#BrandID').val();
            $.ajax({
                url: "@Url.Action("SeasonList", "PublicWondow",new { Area=""})",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#SeasonID").val('');
                        msg.WithError('Season Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#StyleID").blur(function () {
            var BrandID = $('#BrandID').val();
            var SeasonID = $('#SeasonID').val();
            $.ajax({
                url: "@Url.Action("StyleList", "PublicWondow",new { Area=""})",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, SeasonID: SeasonID, StyleID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#StyleID").val('');
                        msg.WithError('Style Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $('#Article').blur(function () {
            var BrandID = $('#BrandID').val();
            var SeasonID = $('#SeasonID').val();
            var StyleID = $('#StyleID').val();
            $.ajax({
                url: "@Url.Action("ArticleList", "PublicWondow",new { Area=""})",
                type: 'POST',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ BrandID: BrandID, StyleUkey : 0, SeasonID: SeasonID, StyleID: StyleID, ArticleID: $(this).val(), ReturnType: "JSON" }),
                async: true,
                success: function (data) {
                    if (data.length == 0) {
                        $("#Article").val('');
                        msg.WithError('Article Not Found');
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        $("#Type").change(function () {
            var currentType = $(this).val();

            let includes_MOCKUP = currentType.toUpperCase().includes("MOCKUP");
            let includes_HTWash = currentType.toUpperCase().includes("HT WASH");
            let includes_Moistureh = currentType.toUpperCase().includes("MOISTURE");
            let includes_Aging = currentType.toUpperCase().includes("AGING");
            let includes_SALIVA = currentType.toUpperCase().includes("SALIVA");
            let includes_Yellowing = currentType.toUpperCase().includes("YELLOWING");
            let includes_Martindale = currentType.toUpperCase().includes("MARTINDALE");

            if (!includes_MOCKUP && !includes_HTWash && !includes_Moistureh && !includes_Aging && !includes_SALIVA
                && !includes_Yellowing && !includes_Martindale) {
                $(".mockupOnly").val('');
                $(".mockupOnly").attr("disabled", "disabled");
            }
            else {
                $(".specialUse").removeAttr("disabled");
            }

            if (includes_Moistureh) {
                $("#ReceivedDate_sText, #ReceivedDate_eText ").attr("disabled", "disabled");
            }
        });
    }

    function checkvalue(buttonName) {

        if (buttonName =="Query") {
            if (checkReq() < 2) {
                var msgContent = "Does not include Type, two conditions must be selected. ";
                msg.WithError(msgContent);
                return false;
            }
        }

        return true;
    }

    function checkReq() {
        var n = 0;
        if ($("#BrandID").val() != "") n++;
        if ($("#SeasonID").val() != "") n++;
        if ($("#StyleID").val() != "") n++;
        if ($("#Article").val() != "") n++;
        if ($("#Line").val() != "") n++;
        if ($("#ReceivedDate_sText").attr('disabled') == undefined && $("#ReceivedDate_sText").val() != "" && $("#ReceivedDate_eText").val() != "") n++;
        if ($("#ReportDate_sText").attr('disabled') == undefined &&$("#ReportDate_sText").val() != "" && $("#ReportDate_eText").val() != "") n++;
        if ($("#WhseArrival_sText").val() != "" && $("#WhseArrival_eText").val() != "") n++;
        return n;
    }


</script>

