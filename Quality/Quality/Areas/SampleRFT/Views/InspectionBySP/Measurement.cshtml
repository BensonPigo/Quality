@model DatabaseObject.ViewModel.SampleRFT.InspectionBySP_Measurement

@{
    ViewBag.Title = "Measurement";
    Layout = "~/Areas/SampleRFT/Views/Shared/_ForAll_Layout.cshtml";
}

<link href="~/ThirdParty/plugins/DataTables/datatables.min.css" rel="stylesheet" />
<link href="~/ThirdParty/SciCustom/css/TableStyle.css" rel="stylesheet" />
<link href="~/ThirdParty/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />

@Html.Partial("~/Areas/SampleRFT/Views/Shared/_SampleRFTInspection_Layout.cshtml")


<style type="text/css">



    .col-auto {
        margin: 1em
    }

    .sub_title {
        font-size: 1.5em;
        color: #999999
    }


    .searchFont {
        font-size: 1vw;
        font-weight: 900;
    }

    .viewFont {
        font-size: 1.5vw;
        font-weight: 900;
    }

    .iconPlus {
        background: url('/Image/Icon/Plus.png')no-repeat center / 80% 80%;
        height: 1.5vw;
        width: 1.5vw;
        vertical-align: middle;
        cursor: pointer;
        /*display: block;*/
        /* Other styles here */
    }

    .iconReduce {
        background: url('/Image/Icon/Reduce.png')no-repeat center / 80% 80%;
        height: 1.5vw;
        width: 1.5vw;
        vertical-align: middle;
        cursor: pointer;
        /*display: block;*/
        /* Other styles here */
    }
</style>

@using (Html.BeginForm("Measurement", "InspectionBySP", FormMethod.Post, new { @id = "MeasurementForm", onsubmit = "return checkValue(this.submitted);" }))
{
    <div class="DownLeftWhiteBackgrond">
        <div style="border:0px;padding:2vh;">
            <h1 style="font-size: 3vh; font-weight: 900; color: #999999 ">Measurement for what?</h1>

        </div>
        <table style="width: 100%; margin-top: 2vh; ">
            <tbody>
                <tr>
                    <td align="right"><p class="searchFont">Article</p></td>
                    <td align="left" style="padding-left: 1vw;">
                        @Html.DropDownListFor(o => o.ListArticle, Model.ListArticle, null, new { @class = "form-control", id = "dropArticle" })
                    </td>
                </tr>
                <tr>

                    <td align="right"><p class="searchFont">Size</p></td>
                    <td align="left" style="padding-left: 1vw;">
                        @Html.DropDownListFor(o => o.ListSize, (List<SelectListItem>)ViewBag.ListSize, null, new { @class = "form-control", id = "dropSize" })
                    </td>
                </tr>

                <tr>
                    <td align="right"><p class="searchFont">Product Type</p></td>
                    <td align="left" style="padding-left: 1vw;">
                        @Html.DropDownListFor(o => o.ListProductType, Model.ListProductType, null, new { @class = "form-control", id = "dropProductType" })
                    </td>

                </tr>

            </tbody>
        </table>
    </div>
    <div class="DownRightWhiteBackgrond">
        <div style="border:0px;padding:2vh;">
            <h1 style="font-size: 3vh; font-weight: 900; color: #999999 ">Measurement</h1>
            <button type="button" class="site-btn btn-blue" style="position:absolute;top:1em;right:17.2em" onclick="open_View();">View</button>
            <button type="button" class="site-btn btn-blue" style="position:absolute;top:1em;right:8.6em" onclick="OpenPhoto();">Photo</button>
            <button type="button" class="site-btn btn-blue" id="Save" style="position:absolute;top:1em;right:0">Save</button>

            <table style="width: 20vw;">
                <tr>
                    <td><p class="searchFont">Unit</p></td>
                    <td>@Html.TextBoxFor(o => o.SizeUnit, new { @class = "form-control", @disabled = "disabled", @style = "width:10vw" }) </td>
                </tr>
            </table>

            <div style=" width: 51vw; height: 54vh; overflow-y: auto;">
                <table class="MeasurementTable table table-striped display">

                    <thead style="text-align: center; font-size: 1.5vw; font-weight: 900;">
                        <tr>

                            <th style="width:50vw">
                                <p>Description</p>
                            </th>
                            <th style="width:10vw">
                                <p>Tol(+)</p>
                            </th>
                            <th style="width:10vw">
                                <p>Tol(-)</p>
                            </th>
                            <th style="width:10vw">
                                <p idx="SizeCode"></p>
                            </th>
                            <th style="width:28vw">
                                <p></p>
                            </th>
                            <th style="width:10vw">
                                <p>Diff</p>
                            </th>
                        </tr>
                        <tr><th></th></tr>
                    </thead>
                    <tbody style="text-align: center;">
                        <tr>
                            <td colspan="6" style="height: 8vh;vertical-align: middle;" valign="middle" align="center">
                                <h3>Data Loading.......</h3>
                            </td>
                        </tr>
                        <tr><td></td></tr>
                    </tbody>
                </table>
            </div>



        </div>

        <input type="hidden" id="goPage" name="goPage">
        <div style="position:absolute;right:2em;bottom:7em;font-size:0.8em">Inline, Stagger stage can skip this step</div>
        <button id="btnBack" onclick="this.form.submitted=this.value;" type="submit" value="Back" style="right:7em;" class="button">Back</button>
        <button d="btnNext" onclick="this.form.submitted=this.value;" type="submit" value="Next" style="right:0;" class="button">Next</button>


    </div>

    @Html.HiddenFor(o => o.ID)
    @Html.HiddenFor(o => o.OrderID)
}


<div class="detail-dialog to-edit-detail" title="View">
    <div class="detail-dialog-content dialog-content-w-icon" style="height:40vh">
        <table style="width: 100%; margin-top: 2vh; ">
            <tbody>
                <tr>
                    <td align="right">
                        <div class="col-auto"><p class="viewFont" style="color:white">Article</p></div>
                    </td>
                    <td align="center">
                        <div class="col-auto"><select class="form-control" id="ViewListArticle" name="ViewListArticle"></select></div>
                    </td>

                    <td align="right"><p class="viewFont" style="color:white">Size</p></td>
                    <td align="center">
                        <div class="col-auto"><select class="form-control" id="ViewListSize" name="ViewListSize"></select></div>
                    </td>
                    <td width="10%" align="right"><p class="viewFont" style="color: white; width: 10vw;">Product Type</p></td>
                    <td align="center">
                        <div class="col-auto"><select class="form-control" id="ViewListProductType" name="ViewListProductType"></select></div>
                    </td>
                    <td align="right"><p class="viewFont" style="color:white">Unit</p></td>
                    <td align="center">
                        <div class="col-auto">
                            @Html.TextBox("ViewSizeUnit", Model.SizeUnit, new { @style = "width:10vw", @class = "form-control", @disabled = "disabled" })
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="8">
                        <div id="Content" style="background-color: white;">

                        </div>
                    </td>
                </tr>
            </tbody>
        </table>

        <br />
        <div>
        </div>
    </div>
</div>


<script type="text/javascript">

    var msg = new MessagerAlert();
    var OpenViewObj;

    $(".detail-dialog").dialog({
        autoOpen: false,
        modal: true,
        closeText: ' ',
        width: 1000,
        minHeight: 700,
        position: {
            my: "center top",
            at: "center top",
            of: window
        },
        dialogClass: "site-box",
        open: function (event, ui) {
            $('.ui-widget-overlay').bind('click', function () {
                //location.reload();//強制Refresh頁面 Benson
                $(".ui-dialog-content").dialog('close');
            });
            $(this).parent().siblings().find(".ui-dialog-content").dialog('close');

        },
        close: function () {
        },
    });

    $(".to-edit-detail").dialog({
        width: "70%",

    });

    $(".to-edit-detail").on("dialogclose", function (event, ui) {
        EditMode = false;
    });


    function open_View() {
        $.ajax({
            url: "@Url.Action("OpenView")",
            type: 'POST',
            data: jQuery.param({ OrderID: "@Model.OrderID" }),
            async: true,
            success: function (data) {
                var articleOption = "", sizeOption = "", productTypeOption = "";
                var articleArrList = [], sizeArrList = [], productTypeArrList = [];

                $.each(data, function (index, value) {
                    articleArrList.push(value.Article);
                    sizeArrList.push(value.Article+','+value.Size);
                    productTypeArrList.push(value.Article + ',' +value.ProductType);
                });

                $.each(jQuery.unique(articleArrList), function (index, value) {
                    articleOption += "<option value=" + value + ">" + value + "</option>";
                });

                $.each(jQuery.unique(sizeArrList), function (index, value) {
                    sizeOption += "<option value=" + value + " >" + value.split(',')[1] + "</option>";
                });

                $.each(jQuery.unique(productTypeArrList), function (index, value) {
                    productTypeOption += "<option value=" + value + ">" + value.split(',')[1] + "</option>";
                });

                $("#ViewListArticle").html(articleOption);
                $("#ViewListSize").html(sizeOption);
                $("#ViewListProductType").html(productTypeOption);

                reloadViewitem();

                var currentArticle = $("#ViewListArticle").val();
                var currentSize = $("#ViewListSize").val();
                var currentProductType = $("#ViewListProductType").val();

                OpenViewObj = data;
                ReloadViewData(data, currentArticle, currentSize, currentProductType);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                console.log(xhr.responseText);
            }
        });

        $(".to-edit-detail").dialog("open");
    }



    function OpenPhoto() {

            window.open('@Url.Action("MeasurementPicture")?OrderID=@Model.OrderID', "Picture", config = 'toolbar=no,status=no,location=no,width=1000,height=600');
    }

    $(document).ready(function () {
        $("#ViewListArticle").on("change", function () {
            reloadViewitem();

            ReloadViewData(OpenViewObj, $(this).val(), $("#ViewListSize").val(), $("#ViewListProductType").val());
        });

        $("#ViewListSize").change(function () {
            ReloadViewData(OpenViewObj, $("#ViewListArticle").val(), $(this).val(), $("#ViewListProductType").val());
        });

        $("#ViewListProductType").change(function () {
            ReloadViewData(OpenViewObj, $("#ViewListArticle").val(), $("#ViewListSize").val(), $(this).val());
        });


        $("#Save").click(Save);
    });


    function Save() {
        var bodyList = [];

        //表格筆數
        var bodyCount = $('.MeasurementTable>tbody>tr').length;

        // 逐一抓出DOM物件理的資料，組合物件
        for (var i = 0; i < bodyCount; i++) {
            var tr = $('.MeasurementTable>tbody>tr')[i];

            var CodeDom = $(tr).find("td>p[idx=Code]")[0];
            var ResultSizeSpecDom = $(tr).find("td>input[idx=ResultSizeSpec]")[0];
            var MeasurementUkeyDom = $(tr).find("td>p[idx=MeasurementUkey]")[0];

            var Code = $(CodeDom).text();
            var ResultSizeSpec = $(ResultSizeSpecDom).val();
            var MeasurementUkey = $(MeasurementUkeyDom).text();

            var body =
            {
                MeasurementUkey: MeasurementUkey,
                ResultSizeSpec: ResultSizeSpec,
                Code: Code,
            };
            bodyList.push(body);
        }

        var head =
        {
            ID: '@Model.ID',
            OrderID: '@Model.OrderID',
            FactoryID: '@Model.FactoryID',
            StyleUkey: '@Model.StyleUkey',
            SewingLineID: '@Model.SewingLineID',
            SelectedArticle: $("#dropArticle").val(),
            SelectedSize: $("#dropSize").val(),
            SelectedProductType: $("#dropProductType").val(),
            ListMeasurementItem: bodyList
        };


        $.ajax({
            url: '@Url.Action("MeasurementSingleSave", "InspectionBySP")',
            type: 'POST',
            data: jQuery.param({ Req: head }),
            global: false,
            async: false,
            success: function (response) {

                if (response.ExecuteResult != undefined) {
                    if (response.ExecuteResult) {
                        msg.WithSuccesCheck("Success!", function () {
                            return true;
                        });
                    }
                    else {
                        msg.WithErrorCheck(response.ErrorMessage, function () {
                            return false;
                        });
                    }
                }
                else {

                    // response.Result = undefined，代表什麼都沒輸入就按下Save
                    return true;
                }
            },
            error: function (xhr, status) {
                msg.WithError("Get View fail:" + xhr.responseText + " " + xhr.status);
            }
        });
    }


    function checkValue(self) {
        document.getElementById("goPage").value = self;
        ShowLoading();

    }

    function reloadViewitem() {
        var article = $("#ViewListArticle").val();
        var sizeOption = "", productTypeOption = "";

        //切換Article時，Size和Product Type的資料會改變，因此需要新的預設值
        var newDefaultSize = "";
        var newDefaultProductType = "";

        $("#ViewListSize > option").each(function () {

            if (this.value.split(',')[0] == article) {
                sizeOption += "<option value=" + this.value + ">" + this.text + "</option>";

                //抓第一個Size當預設值
                if (newDefaultSize == "" ) {
                    newDefaultSize = this.value;
                }
            }
            else {
                //不是這個Article的Size隱藏
                sizeOption += "<option hidden value=" + this.value + ">" + this.text + "</option>";
            }
        });

        $("#ViewListSize").html(sizeOption);
        $("#ViewListSize").val(newDefaultSize);

        $("#ViewListProductType > option").each(function () {

            if (this.value.split(',')[0] == article) {
                productTypeOption += "<option value=" + this.value + ">" + this.text + "</option>";

                //抓第一個roductType當預設值
                if (newDefaultProductType == "") {
                    newDefaultProductType = this.value;
                }
            }
            else {
                //不是這個Article的ProductType隱藏
                productTypeOption += "<option hidden value=" + this.value + ">" + this.text + "</option>";
            }
        });

        $("#ViewListProductType").html(productTypeOption);
        $("#ViewListProductType").val(newDefaultProductType);

        return true;
    }


    $(document).ready(function () {
        @Html.Raw(Model.ErrorMessage)

        $("#dropSize").on("change", function () {

            ReloadData();

        });

        $("#dropArticle").change(function () {

            var article = $(this).val();

            $.ajax({
                url: "@Url.Action("GetNewSizeByArticle", "InspectionBySP" )",
                data: { Article: article },
                type: 'POST',
                dataType: "json",
                async: false,
                success: function (datas) {

                    var sizeOption = "";
                    var sizeArrList = [];

                    $.each(datas, function (index, obj) {
                        sizeArrList.push(obj.Value);
                    });


                    $.each(sizeArrList, function (index, value) {
                        sizeOption += "<option value=" + value + " >" + value + "</option>";
                    });

                    $("#dropSize").html(sizeOption);

                    ReloadData();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    console.log(xhr.responseText);
                }
            });
        });

        ReloadData();
    });



    function ReloadData() {

        var dropArticle = document.getElementById("dropArticle");
        var dropSize = document.getElementById("dropSize");
        var dropProductType = document.getElementById("dropProductType");

        if (dropArticle.value == "" || dropSize.value == "" || dropProductType.value == "") {
            $(".MeasurementTable").hide();
            return;
        }

        var thead = "";
        var SizeUnit = document.getElementById("SizeUnit").value ;
        var tbody = "";


        if (thead == "") {
            thead += `<tr>";
            <th style="width:50vw"><p>Description</p></th>
            <th style="width:10vw"><p>Tol(+)</p></th>
            <th style="width:10vw"><p>Tol(-)</p></th>
            <th style="width:10vw"><p idx='SizeCode'>${dropSize.value}</p></th>
            <th style="width:28vw"><button type="button" class="site-btn btn-blue" style="font-size:1rem;width:70%;" onclick="ReloadData();">Clear</button></th>
            <th style="width:10vw"><p>Diff</p></th>
            </tr>`;
        }


        var items = @Html.Raw(Json.Encode(Model.ListMeasurementItem));
        var KeyIdx = 0;
        var relsizeUnit = SizeUnit;
        $.each(items, function (index, value) {
            const rules = /^.*[A-Za-z]+.*$/;
            var bol = rules.test(value.SizeSpec);
            if (bol) {
                return;
            }

            if (value.SizeSpec.indexOf('/') > -1) {
                relsizeUnit = "INCH";
                //return;
            }
            else if (value.SizeSpec.indexOf('.') > -1) {
                relsizeUnit = "CM";
                //return;
            }
        });

        $.each(items, function (index, value) {
            if (value.Size == dropSize.value) {

                if (value.SizeSpec.indexOf('/') > -1) {
                    relsizeUnit = "INCH";
                }
                else if (value.SizeSpec.indexOf('.') > -1) {
                    relsizeUnit = "CM";
                }

                if (relsizeUnit != SizeUnit) {
                    value.CanEdit = false;
                }

                var readonly = "";
                var bgColor = "white";
                if (!value.CanEdit) {
                    bgColor = "bg-lightgray";
                    readonly = "readonly";
                }

                tbody +=  `<tr >
                <td class='bg-lightblue' style ="vertical-align: middle;"><p style ='padding: 0.5vh'>${value.Description}</p></td>
                <td class='bg-lightblue' style ="vertical-align: middle;"><p style ='padding: 0.5vh' idx='Tol+'>${value.Tol2}</p></td>
                <td class='bg-lightblue' style ="vertical-align: middle;"><p style ='padding: 0.5vh' idx='Tol-'>${value.Tol1}</p></td>
                <td class='bg-lightgray' style ="vertical-align: middle;"><p style ='padding: 0.5vh' idx='standard'>${value.SizeSpec}</p></td>
                <td class='bg-lightgray' style ="display:none"><p style ='padding: 0.5vh' idx='Code'>${value.Code}</p></td>
                <td class='bg-lightgray' style ="display:none"><p style ='padding: 0.5vh' idx='MeasurementUkey'>${value.MeasurementUkey}</p></td>
`;

                if (relsizeUnit == "INCH") {
                    tbody += "<td  style ='vertical-align: middle;' class='" + bgColor + "'><img class='iconPlus' KeyIdx='" + KeyIdx + "' /><input type='text' KeyIdx='" + KeyIdx + "' idx='ResultSizeSpec' value='" + value.SizeSpec + "' placeholder= '__ __/__' style ='width:64%; height:3.5vh' class='" + bgColor + "' " + readonly + "><img KeyIdx='" + KeyIdx + "' class='iconReduce' /></td>";
                }
                else {
                    tbody += "<td  style ='vertical-align: middle;' class='" + bgColor + "'><img class='iconPlus' KeyIdx='" + KeyIdx + "' /><input type='number' KeyIdx='" + KeyIdx + "' step='any' idx='ResultSizeSpec' value='" + value.SizeSpec + "' style ='width:64%; height:2.5vh' class='" + bgColor + "' " + readonly + "><img KeyIdx='" + KeyIdx + "' class='iconReduce' /></td>";
                }

                tbody += "<td style ='vertical-align: middle;'><p style ='padding: 0.5vh' class='Diff'></p></td>";
                tbody += "</tr>";

                KeyIdx = KeyIdx + 1;
            }
        });

        $('.MeasurementTable>thead').html(thead);
        $('.MeasurementTable>tbody').html(tbody);

        $(".MeasurementTable>tbody>tr>td>input[idx='ResultSizeSpec']").on('change', function () {
            var unit = document.getElementById("SizeUnit").value;
            const rules = /^(((([0-9]{1,3}[ ])|(^))\d{1,2}[/]\d{1,2})|([0-9]{1,3}))$/;
            var bol = rules.test($(this).val());
            var val = $(this).val();
            var standard = $(this).parent().parent().children().find("p[idx='standard']").html();
            var tolh = $(this).parent().parent().children().find("p[idx='Tol+']").html();
            var toll = $(this).parent().parent().children().find("p[idx='Tol-']").html();

            if (val == "" || val <= 0) {
                $(this).val("");
                $(this).parent().parent().children().find("p[class='Diff']").html('');
                $(this).parent().parent().children().find("p[class='Diff']").parent().removeClass("bg-lightred");
                return;
            }


            var isFractional = false;
            if (val.toString().indexOf('/') > -1 && val.toString().indexOf(".") > -1) {
                // 同時存在小數和分數符號
                $(this).val("");
                $(this).parent().parent().children().find("p[class='Diff']").html('');
                $(this).parent().parent().children().find("p[class='Diff']").parent().removeClass("bg-lightred");
                return;
            }
            else if (val.toString().indexOf('/') > -1) {
                // 只有分數符號
                isFractional = true;
            }
            else if (val.toString().indexOf(".") > -1) {
                // 只有小數符號
                isFractional = false;
            }

            // 針對輸入的value進行約分
            var vi = 0, vd = 0, vm = 0;

            if (isFractional) {
                // 是分數，檢查有沒有多餘符號
                if (containsInvalidCharacters1(val)) {
                    val = 0;
                }
                else {
                    vi = val.substr(0, val.toString().indexOf(' '));
                }
            }
            else {
                // 是小數，檢查有沒有多餘符號
                if (containsInvalidCharacters2(val)) {
                    val = 0;
                }
                vi = val;
            }

            if (val == "" || val <= 0) {
                $(this).val(val);
                return;
            }

            if (vi == '') {
                vi = 0;
            }

            if (val.toString().indexOf('/') > -1) {
                vd = val.substr(val.toString().indexOf(' ') + 1, val.toString().indexOf('/') - 1 - val.toString().indexOf(' '));
                vm = val.substr(val.toString().indexOf('/') + 1, val.length - 1 - val.toString().indexOf('/'));

                vi = parseInt(vi);
                vd = parseInt(vd);
                vm = parseInt(vm);

                // 分子大於分母
                if (vd > vm && vm > 0) {
                    vi = parseInt(vi + (vd / vm));
                    vd = vd % vm;
                }
                else if (vd == vm && vm > 0) {
                    vi = parseInt(vi + (vd / vm));
                    vd = 0;
                    vvm = 0;
                }

                if (vi > 0 && vd > 0 && vm > 0) {
                    val = vi + ' ' + vd + '/' + vm;
                }
                else if (vd > 0 && vm > 0) {
                    val = vd + '/' + vm;
                }
                else {
                    val = vi;
                }
                $(this).val(val);
            }
            else {
                vd = 1;
                vm = 1;
                vi = vi - 1;
                var val = parseFloat(parseFloat(val).toFixed(4));
                if (Number.isInteger(val)) {
                    val = parseInt(val);
                }
                $(this).val(val);
            }

            // 計算Diff，根據小數或分數使用不同方式計算
            if (standard.indexOf('/') > -1 || val.toString().indexOf('/') > -1 || tolh.toString().indexOf('/') > -1 || toll.toString().indexOf('/') > -1) {
                if (standard.toString().indexOf('.') > -1) {
                    return;
                }

                var finval = FractionDiff(val.toString(), standard.toString());
                $(this).parent().parent().children().find("p[class='Diff']").html(finval);

                var sTolh = FractionAdd(standard.toString(), tolh.toString());
                var sToll = FractionDiff(standard.toString(), toll.toString());

                var diffTolh = String(FractionDiff(sTolh.toString(), val.toString()));
                var diffToll = String(FractionDiff(val.toString(), sToll.toString()));
                if (diffTolh.indexOf('-') > -1 || diffToll.indexOf('-') > -1) {
                    $(this).parent().parent().children().find("p[class='Diff']").parent().addClass("bg-lightred");
                }
                else {
                    $(this).parent().parent().children().find("p[class='Diff']").parent().removeClass("bg-lightred");
                }
            }
            else {
                var finval = accSubtr(val, standard);
                $(this).parent().parent().children().find("p[class='Diff']").html(finval);

                val = parseFloat(val);
                var sTolh = parseFloat(accAdd(standard, tolh));
                var sToll = parseFloat(accSubtr(standard, toll));
                if (sTolh >= val && val >= sToll) {
                    $(this).parent().parent().children().find("p[class='Diff']").parent().removeClass("bg-lightred");
                }
                else {
                    $(this).parent().parent().children().find("p[class='Diff']").parent().addClass("bg-lightred");
                }
            }
        });


        $(".iconPlus").click(function () {
            var Keyidx = $(this).attr("KeyIdx");
            var currentCol = $(`input[idx=ResultSizeSpec][KeyIdx=${Keyidx}]`);

            if ($(currentCol).attr("readonly") == "readonly") {
                return;
            }

            var tpye = $(currentCol).attr("type");
            var oldValue = 0;

            if (tpye == "number") {
                if ($(currentCol).val() != '') {
                    oldValue = parseFloat($(currentCol).val());
                }
                var newValue = oldValue + 0.0625;
                newValue = newValue.toFixed(4);
                $(currentCol).val(newValue).change();
            }
            if (tpye == "text") {
                var newValue = 0;
                if ($(currentCol).val() != '') {

                    // 有可能同一個Measurement表裡面會同時包含小數和分數，因此tpye == "text"不一定都是分數，還要再把小數拉出來額外運算
                    if ($(currentCol).val().indexOf('.') > -1) {
                        oldValue = parseFloat($(currentCol).val());
                        var newValue = oldValue + 0.0625;
                        newValue = newValue.toFixed(4);
                        $(currentCol).val(newValue).change();
                    }
                    //有分數，例如：1 1/2，把分子獨立出來+1
                    else if ($(currentCol).val().split(' ').length == 2) {
                        var interg = $(currentCol).val().split(' ')[0];

                        var float = $(currentCol).val().split(' ')[1];
                        var numerator = float.split('/')[0];
                        var denominator = float.split('/')[1];

                        //var tmp = parseInt(numerator) + 1;
                        var tmp = CacuFraction(float, '1/16', 'addition');
                        //newValue = tmp + ` ${float}`;
                        newValue = interg + ` ${tmp}`;
                    }
                    else {

                        // 是否為純分數
                        if ($(currentCol).val().split('/').length == 2) {

                            var tmp = CacuFraction($(currentCol).val(), '1/16', 'addition');
                            if (tmp == '0/1') {
                                newValue = 0;
                            }
                            else {
                                newValue = tmp;
                            }
                        }
                        else {

                            var tmp = CacuFraction($(currentCol).val() + '/1', '1/16', 'addition');
                            newValue = tmp;
                        }
                    }

                }
                else {
                    newValue = oldValue + 1;
                }

                $(currentCol).val(newValue).change();
            }
        });

        $(".iconReduce").click(function () {
            var Keyidx = $(this).attr("KeyIdx");
            var currentCol = $(`input[idx=ResultSizeSpec][KeyIdx=${Keyidx}]`);

            if ($(currentCol).attr("readonly") == "readonly") {
                return;
            }


            var tpye = $(currentCol).attr("type");
            var oldValue = 0;

            if (tpye == "number") {

                if ($(currentCol).val() != '') {
                    oldValue = parseFloat($(currentCol).val());
                }
                var newValue = oldValue - 0.0625;
                newValue = newValue.toFixed(4);
                $(currentCol).val(newValue).change();
            }
            if (tpye == "text") {

                var newValue = 0;
                if ($(currentCol).val() != '') {

                    // 有可能同一個Measurement表裡面會同時包含小數和分數，因此tpye == "text"不一定都是分數，還要再把小數拉出來額外運算
                    if ($(currentCol).val().indexOf('.') > -1) {
                        oldValue = parseFloat($(currentCol).val());
                        var newValue = oldValue - 0.0625;
                        newValue = newValue.toFixed(4);
                        $(currentCol).val(newValue).change();
                    }
                    //有分數，例如：1 1/2，把整數位獨立出來-1
                    else if ($(currentCol).val().split(' ').length == 2) {
                        var interg = $(currentCol).val().split(' ')[0];
                        var float = $(currentCol).val().split(' ')[1];

                        var tmp = CacuFraction(float, '1/16', 'subtraction');
                        //var tmp = parseInt(interg) - 1;

                        // 整數、分數都是0
                        if (parseInt(interg) == 0 && tmp == '0/1') {
                            newValue = 0;
                        }
                        // 整數=0，分數!=0
                        else if (parseInt(interg) == 0 && tmp != '0/1') {
                            //newValue = 0;
                            newValue = tmp;
                        }
                        // 整數!=0，分數=0
                        else if (parseInt(interg) != 0 && tmp == '0/1') {
                            //newValue = 0;
                            newValue = parseInt(interg);
                        }
                        else {
                            //newValue = tmp + ` ${float}`;
                            newValue = interg + ` ${tmp}`;
                        }

                    }
                    else {

                        // 是否為純分數
                        if ($(currentCol).val().split('/').length == 2) {

                            var tmp = CacuFraction($(currentCol).val(), '1/16', 'subtraction');
                            if (tmp == '0/1') {
                                newValue = 0;
                            }
                            else {
                                newValue = tmp;
                            }
                        }
                        else {
                            var tmp = CacuFraction($(currentCol).val() + '/1', '1/16', 'subtraction');
                            newValue = tmp;
                            // 其餘直接轉成整數
                        }

                    }

                }
                else {
                    newValue = oldValue - 1;
                }

                $(currentCol).val(newValue).change();

            }
        });
    }

    // 傳入，OpenView 回傳的 Ajax 物件集合
    function ReloadViewData(AjaxReturn, Article, Size, ProductType) {

        if (Article == "" || Size == "" || ProductType == "" || AjaxReturn.length <= 0) {
            return;
        }

        if (Size.split(',').length > 1) {
            Size = Size.split(',')[1];
        }

        if (ProductType.split(',').length > 1) {
            ProductType = ProductType.split(',')[1];
        }


        $.each(AjaxReturn, function () {
            var AjaxObj = this;

            if (AjaxObj.Article == Article && AjaxObj.Size == Size && AjaxObj.ProductType == ProductType) {

                var datas = JSON.parse(AjaxObj.MeasurementDataByJson);

                if (datas.length == 0) {
                    msg.WithErrorCheck("No data Found", function () {
                        return false;
                    });
                }
                else {
                    $('#Content').html(generateTable(datas, "Measurement"));
                    $('#Content').children("table").addClass("table-striped");
                    ChangeColor();
                }
            }

        });
    }

    function InputClear() {
        var cols = $(`input[idx=ResultSizeSpec]`);

        $.each(cols, function () {
            $(this).val('').change();
        });
    }

    function ChangeColor() {
        var unit = $('#ViewSizeUnit').val();
        $.each($('#Content > table > tbody > tr'), function () {
            var standard;
            var tolh;
            var toll;
            var val;
            $.each($(this).children(), function () {
                var tdName = $(this).attr('idx');

                if (tdName == null) {
                    return false;
                }

                if (tdName == "Tol(+)") {
                    tolh = $(this).html();
                }

                if (tdName == "Tol(-)") {
                    toll = $(this).html();
                }

                if (isDate(tdName)) {
                    val = $(this).html();
                    $(this).css('background-color', 'rgb(234, 234, 113);');
                }

                if (tdName.indexOf('_aa') > -1) {
                    standard = $(this).html();
                    $(this).css('background-color', 'rgb(211, 211, 211);');
                }

                if (tdName.indexOf('diff') > -1) {
                    $(this).css('background-color', 'rgb(234, 234, 113);');

                    if (standard == null || val == null || tolh == null || toll == null) {
                        return;
                    }
                    else {
                        // 避免standard出現文字
                        if (parseInt(standard.toString()) >= 0) {
                            cal(unit, standard.toString(), val.toString(), tolh.toString(), toll.toString(), $(this));
                        }
                    }
                }
            });
        });
    }

    function cal(unit, standard, val, tolh, toll, obj) {
        if (standard.indexOf('/') > -1 || val.indexOf('/') > -1 || tolh.indexOf('/') > -1 || toll.indexOf('/') > -1) {
            if (standard.indexOf('.') > -1) {
                return;
            }
            var sTolh = FractionAdd(standard, tolh);
            var sToll = FractionDiff(standard, toll);
            var diffTolh = String(FractionDiff(sTolh.toString(), val));
            var diffToll = String(FractionDiff(val, sToll.toString()));

            if (diffTolh.indexOf('-') > -1 || diffToll.indexOf('-') > -1) {
                obj.addClass("red");
            }
            else {
                obj.removeClass("red");
            }
        }
        else if (!isNaN(standard) && !isNaN(val)) {
            var sTolh = parseFloat(accAdd(standard, tolh));
            var sToll = parseFloat(accSubtr(standard, toll));
            if (sTolh >= val && val >= sToll) {
                obj.removeClass("red");
            }
            else {
                obj.addClass("red");
            }
        }
    }

    function gcd(a, b) {
        return b === 0 ? a : gcd(b, a % b);
    }

    function lcm(a, b) {
        return (a * b) / gcd(a, b);
    }

    function CacuFraction(valA, valB, action) {
        const [numA, denA] = valA.split('/').map(Number);
        const [numB, denB] = valB.split('/').map(Number);

        let resultNum, resultDen;

        switch (action) {
            case 'addition':
                resultNum = numA * denB + numB * denA;
                resultDen = denA * denB;
                break;
            case 'subtraction':
                resultNum = numA * denB - numB * denA;
                resultDen = denA * denB;
                break;
            default:
                throw new Error('Invalid action. Use "addition" or "subtraction".');
        }

        const commonGCD = gcd(resultNum, resultDen);
        resultNum /= commonGCD;
        resultDen /= commonGCD;

        return `${resultNum}/${resultDen}`;
    }

    // 檢查是否包含數字、/ 符號、空格以外的字元
    function containsInvalidCharacters1(text) {
        // 使用正则表达式检查是否包含数字、/ 以外的字符
        const regex = /[^0-9\/\s]/;
        return regex.test(text);
    }

    // 檢查是否包含數字、.符號以外的字元
    function containsInvalidCharacters2(text) {
        const regex = /[^0-9\.]/;
        return regex.test(text);
    }
</script>