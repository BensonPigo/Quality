@using DatabaseObject.Public

@{
    Layout = null;
    string title = ViewData["Title"] == null ? "Picture" : ViewData["Title"].ToString();
    string EditMode = ViewData["EditMode"] == null ? "EditMode" : ViewData["EditMode"].ToString();

    string TargetID = ViewData["TargetID"] == null ? string.Empty : ViewData["TargetID"].ToString();

    string BeforeColumn = ViewData["BeforeColumn"] == null ? string.Empty : ViewData["BeforeColumn"].ToString();
    string AfterColumn = ViewData["AfterColumn"] == null ? string.Empty : ViewData["AfterColumn"].ToString();
}

@model Window_Picture

<script src="~/Scripts/jquery-3.4.1.min.js"></script>

<link href="~/ThirdParty/SciCustom/css/style.css" rel="stylesheet" />
<style>

    ul {
        padding: 0;
    }

    li {
        list-style-type: none;
        border: 1px solid black;
        padding: 2px;
    }

    td {
        border-style: ridge;
    }

    .leftDiv {
        width: 45%;
        height: 90%;
        float: left;
        margin-right: 2%;
    }

    .outerDiv {
        width: 45%;
        height: 90%;
        float: left;
        margin-right: 2%;
    }

    .grayDiv {
        width: 100%;
        height: 4vh;
        background-color: lightgray;
        text-align: center;
    }

    .pointer {
        cursor: pointer;
    }


    #loading {
        position: fixed;
        top: 50%;
        left: 40%;
        transform: translate(-50%, -50%);
        border: 20px solid #f3f3f3;
        border-top: 20px solid #ff8000;
        border-radius: 50%;
        width: 200px;
        height: 200px;
        animation: spin 2s linear infinite;
    }
</style>
<br />
<header>
    <h3 style="width:85%;float:left;margin:0">@title</h3>
    <input id="btnKeep" type="button" value="Keep" />
    <input id="btnExit" type="button" value="Exit" />
</header>
<br />
<div class="outerDiv" style="margin-right:2%;">
    <div class="grayDiv">
        <h2 style="width:80%;float:left;padding-top:5px">Before</h2>
        <input type="file" id="BeforeUpload" name="name" accept=".png, .jpg, .jpeg" value="UP" style="display:none;" />
        <img id="BeforeUploadIcon" class="pointer uploadIcon" style="height: 90%; vertical-align: top;margin-right:5px;" src="~/Image/Icon/Upload.png" />
        <img id="BeforeCam" class="OpenCamera pointer" style="height:80%;padding-top:5px" src="~/Image/Icon/Camera.png" />
        <img id="BeforeDel" class="pointer" style="height:80%;padding-top:5px" src="~/Image/Icon/Delete.png" />

    </div>
    @{
        var BrforeImage = Model.BrforeImage is null ? new byte[1] : Model.BrforeImage;
        var base64_Brfore = Convert.ToBase64String(BrforeImage);
        var imgSrc_Brfore = String.Format("data:image/png;base64,{0}", base64_Brfore);

        var AfterImage = Model.AfterImage is null ? new byte[1] : Model.AfterImage;
        var base64_After = Convert.ToBase64String(AfterImage);
        var imgSrc_After = String.Format("data:image/png;base64,{0}", base64_After);
    }
    @if (BrforeImage[0] != 0)
    {
        <img id="BeforePic" Type="Before" style="width:100%;" src="@imgSrc_Brfore" />
        <img id="OriBeforePic" style="width:100%;display:none;" src="@imgSrc_Brfore" />
    }
    else
    {
        <img id="BeforePic" Type="Before" style="width:100%;" />
        <img id="OriBeforePic" style="width:100%;display:none;" />
    }
</div>
<div class="outerDiv">
    <div class="grayDiv">
        <h2 style="width:80%;float:left;padding-top:5px">After</h2>
        <input type="file" id="AfterUpload" name="name" accept=".png, .jpg, .jpeg" value="UP" style="display:none;" />
        <img id="AfterUploadIcon" class="pointer uploadIcon" style="height: 90%; vertical-align: top;margin-right:5px;" src="~/Image/Icon/Upload.png" />
        <img id="AfterCam" Type="After" class="OpenCamera pointer" style="height:80%;padding-top:5px" src="~/Image/Icon/Camera.png" />
        <img id="AfterDel" class="pointer" style="height:80%;padding-top:5px" src="~/Image/Icon/Delete.png" />
    </div>
    @if (AfterImage[0] != 0)
    {
        <img id="AfterPic" style="width:100%;" src="@imgSrc_After" />
        <img id="OriAfterPic" style="width:100%;display:none;" src="@imgSrc_After" />
    }
    else
    {
        <img id="AfterPic" style="width:100%;" />
        <img id="OriAfterPic" style="width:100%;display:none;" />
    }

</div>
<div id="loading" style="display:none;"></div>

@{
    Html.RenderPartial("ScreenShot");
}

<script>

    var ID_List = [];
    var Name_List = [];
    $(function () {

        // 找出父頁面的照片
        const CurrentBefore = window.opener.document.querySelector("#@BeforeColumn");
        const CurrentAfter = window.opener.document.querySelector("#@AfterColumn");

        //如果父頁面有照片，則顯示父頁面照片，如果沒有則顯示DB的照片
        if (CurrentBefore != null && CurrentBefore.value != '') {
            var before = document.querySelector("#BeforePic");
            before.src = 'data:image/png;base64,' + CurrentBefore.value;
        }
        if (CurrentAfter != null && CurrentAfter.value != '') {
            var after = document.querySelector("#AfterPic");
            after.src = 'data:image/png;base64,' + CurrentAfter.value;
        }

        // Screenshot Exit
        $('#btnScreenshotExit').on('click', function () {
            StopScreen();
            $('#Screenshot').addClass("display-None");
        });


        $("#btnKeep").click(async function () {

            var before = document.querySelector("#BeforePic");
            var after = document.querySelector("#AfterPic");

            var BeforePicturePic;
            var AfterPicturePic;

            // blob:http表示為上傳圖檔
            if (before.src.indexOf('blob:http') > -1) {

                if (document.querySelector(`#BeforeUpload`).files.length > 0) {
                    const file = document.querySelector(`#BeforeUpload`).files[0];
                    var base64 = await convertFile(file);
                    before = base64.replace("data:image/jpg;base64,", "data:image/png;base64,").replace("data:image/jpeg;base64,", "data:image/png;base64,");
                    BeforePicturePic = before;
                }
                else {
                    const blobUrl = document.querySelector(`#BeforePic`).src;
                    const blob = await fetch(blobUrl).then(res => res.blob());
                    var base64 = await convertFile(blob);
                    before = base64.replace("data:image/jpg;base64,", "data:image/png;base64,").replace("data:image/jpeg;base64,", "data:image/png;base64,");
                    BeforePicturePic = before;
                }
            }
            else {
                BeforePicturePic = before.src;
            }

            if (after.src.indexOf('blob:http') > -1) {

                if (document.querySelector(`#AfterUpload`).files.length > 0) {
                    const file = document.querySelector(`#AfterUpload`).files[0];
                    var base64 = await convertFile(file);
                    after = base64.replace("data:image/jpg;base64,", "data:image/png;base64,").replace("data:image/jpeg;base64,", "data:image/png;base64,");
                    AfterPicturePic = after;
                }
                else {
                    const blobUrl = document.querySelector(`#AfterPic`).src;
                    const blob = await fetch(blobUrl).then(res => res.blob());
                    var base64 = await convertFile(blob);
                    after = base64.replace("data:image/jpg;base64,", "data:image/png;base64,").replace("data:image/jpeg;base64,", "data:image/png;base64,");
                    AfterPicturePic = after;
                }
            }
            else {
                AfterPicturePic = after.src;
            }

            var Picture = {
                BeforePicture: BeforePicturePic,
                AfterPicture: AfterPicturePic,
            }

            window.opener.GetPicture(Picture);
            window.close();
        });


        $("#btnExit").click(function () {
            window.close();
        });

        $("#BeforeUploadIcon").click(function () {

            $("#BeforeUpload").click();
        });

        BeforeUpload.onchange = async evt => {
            $('#loading').show();
            const file = evt.target.files[0];
            if (file) {
                const compressedBase64 = await compressImage(file);
                $('#BeforePic').attr('src', compressedBase64);
                $('#loading').hide();
            }
        }

        $("#AfterUploadIcon").click(function () {

            $("#AfterUpload").click();
        });

        AfterUpload.onchange = async evt => {
            $('#loading').show();
            const file = evt.target.files[0];
            if (file) {
                const compressedBase64 = await compressImage(file);
                $('#AfterPic').attr('src', compressedBase64);
                $('#loading').hide();
            }
        }


        $("#BeforeDel").click(function () {

            // DB的圖檔
            const Ori = document.querySelector("#OriBeforePic");

            // User拍下的圖片
            const Setting = document.querySelector("#BeforePic");


            document.querySelector("#BeforePic").removeAttribute('src');
            // 如果User沒拍，則刪除原本的
            //if (Ori == "" || Ori == null || Ori == undefined) {
            //    document.querySelector("#BeforePic").removeAttribute('src');
            //}
            //else {
            //    Setting.src = Ori.src;
            //}
        });

        $("#AfterDel").click(function () {

            // DB的圖檔
            const Ori = document.querySelector("#OriAfterPic");

            // User拍下的圖片
            const Setting = document.querySelector("#AfterPic");

            document.querySelector("#AfterPic").removeAttribute('src');
            // 如果User沒拍，則刪除原本的
            //if (Ori == "" || Ori == null || Ori == undefined) {
            //    document.querySelector("#AfterPic").removeAttribute('src');
            //}
            //else {
            //    Setting.src = Ori.src;
            //}
        });

        CamInit();


        if ('@EditMode' == 'False') {
            $("#BeforeDel, #AfterDel, .OpenCamera ,.uploadIcon").hide();
        }
    });

    function CamInit() {
        $('.OpenCamera').on('click', function () {

            if ('@EditMode' == 'True') {
                var Type = $(this).attr('Type');
                var sentID = "BeforePic";
                switch (Type) {
                    case "Befroe":
                        sentID = "BeforePic";
                        break;
                    case "After":
                        sentID = "AfterPic";
                        break;
                }

                $('#Screenshot').removeClass("display-None");
                Screenshot(sentID);
            }
        });
    }

    function convertFile(file) {
        return new Promise((resolve, reject) => {
            // 建立FileReader物件
            let reader = new FileReader()
            // 註冊onload事件，取得result則resolve (會是一個Base64字串)
            reader.onload = () => { resolve(reader.result) }
            // 註冊onerror事件，若發生error則reject
            reader.onerror = () => { reject(reader.error) }
            // 讀取檔案
            reader.readAsDataURL(file)
        })
    }

    async function compressImage(imageFile) {
        const MAX_FILE_SIZE = 500 * 1024; // 最大檔案大小為 500KB
        const MAX_COMPRESSION_TRIES = 20; // 最大壓縮次數
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");

        let resizedFile = imageFile;
        let compressionTries = 0;

        while (
            resizedFile.size > MAX_FILE_SIZE &&
            compressionTries < MAX_COMPRESSION_TRIES
        ) {
            compressionTries++;
            const reader = new FileReader();
            const img = new Image();
            reader.readAsDataURL(resizedFile);
            resizedFile = await new Promise((resolve) => {
                reader.onload = function (event) {
                    img.src = event.target.result;
                    img.onload = function () {
                        const originalWidth = img.width;
                        const originalHeight = img.height;
                        const resizingFactor = 0.8;
                        const canvasWidth = originalWidth * resizingFactor;
                        const canvasHeight = originalHeight * resizingFactor;
                        canvas.width = canvasWidth;
                        canvas.height = canvasHeight;

                        context.clearRect(0, 0, canvasWidth, canvasHeight);
                        context.drawImage(
                            img,
                            0,
                            0,
                            originalWidth * resizingFactor,
                            originalHeight * resizingFactor
                        );

                        canvas.toBlob(
                            (blob) => {
                                if (blob) {
                                    resolve(blob);
                                } else {
                                    resolve(imageFile);
                                }
                            },
                            "image/png",
                            0.8
                        );
                    };
                };

                console.log(resizedFile.size);
                console.log(compressionTries);
            });
        }

        const base64 = await new Promise((resolve) => {
            const reader = new FileReader();
            reader.readAsDataURL(resizedFile);
            reader.onload = function () {
                resolve(reader.result);
            };
        });

        return base64;
    }

</script>